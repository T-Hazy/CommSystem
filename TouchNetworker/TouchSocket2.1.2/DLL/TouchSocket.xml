<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocket</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.Sockets.IPHost">
            <summary>
            IP解析映射
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IPHost.#ctor(System.String)">
            <summary>
            IP解析映射
            <para>
            支持端口，ip，域名等。具体格式如下：
            <list type="bullet">
            <item>端口：直接按<see cref="T:System.Int32"/>入参，该操作一般在监听时使用。</item>
            <item>IPv4：按"127.0.0.1:7789"入参。</item>
            <item>IPv6：按"[*::*]:7789"入参。</item>
            <item>域名(1)："tcp://127.0.0.1:7789"</item>
            <item>域名(2)："tcp://[*::*]:7789"</item>
            <item>域名(3)："http://touchsocket.net"</item>
            <item>域名(4)："http://touchsocket.net:7789"</item>
            </list>
            </para>
            </summary>
            <param name="uriString"></param>
        </member>
        <member name="M:TouchSocket.Sockets.IPHost.#ctor(System.Int32)">
            <summary>
            从端口号创建IPv4的Any地址。
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TouchSocket.Sockets.IPHost.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            从<see cref="T:System.Net.IPAddress"/>
            </summary>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="P:TouchSocket.Sockets.IPHost.EndPoint">
            <summary>
            获取终结点。
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:TouchSocket.Sockets.IPHost.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IPHost.op_Implicit(System.String)~TouchSocket.Sockets.IPHost">
            <summary>
            由字符串向<see cref="T:TouchSocket.Sockets.IPHost"/>转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:TouchSocket.Sockets.IPHost.op_Implicit(System.Int32)~TouchSocket.Sockets.IPHost">
            <summary>
            由端口向<see cref="T:TouchSocket.Sockets.IPHost"/>转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:TouchSocket.Sockets.IPHost.ParseIPHosts(System.String[])">
            <summary>
            解析一个组的地址。
            </summary>
            <param name="ipHostStrings"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.KeepAliveValue">
            <summary>
            保活机制
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.KeepAliveValue.KeepAliveTime">
            <summary>
            保活机制
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.KeepAliveValue.Interval">
            <summary>
            发送间隔，默认20*1000ms
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.KeepAliveValue.AckInterval">
            <summary>
            确认间隔，默认2*1000ms
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ClientSslOption">
            <summary>
            客户端Ssl验证
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClientSslOption.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ClientSslOption.TargetHost">
            <summary>
            目标Host
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ClientSslOption.ClientCertificates">
            <summary>
            验证组合
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ServiceSslOption">
            <summary>
            服务器Ssl设置
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ServiceSslOption.Certificate">
            <summary>
            证书
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ServiceSslOption.ClientCertificateRequired">
            <summary>
            该值指定是否向客户端请求证书用于进行身份验证。 请注意，这只是一个请求 - 如果没有提供任何证书，服务器仍然可接受连接请求
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.SslOption">
            <summary>
            Ssl配置
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.SslOption.#ctor">
            <summary>
            构造函数，初始化Ssl配置
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.SslOption.OnCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            默认的证书验证回调实现
            </summary>
            <param name="sender">发送者对象</param>
            <param name="certificate">客户端证书</param>
            <param name="chain">证书链</param>
            <param name="sslPolicyErrors">SSL策略错误</param>
            <returns>总是返回true，表示接受证书</returns>
        </member>
        <member name="P:TouchSocket.Sockets.SslOption.SslProtocols">
            <summary>
            协议版本
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.SslOption.CheckCertificateRevocation">
            <summary>
            该值指定身份验证期间是否检查证书吊销列表
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.SslOption.CertificateValidationCallback">
            <summary>
            SSL验证回调。
            用于自定义证书验证逻辑
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.TcpListenOption">
            <summary>
            监听配置
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.IpHost">
            <summary>
            监听地址
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.SendTimeout">
            <summary>
            发送超时时间
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.ReuseAddress">
            <summary>
            是否使用地址复用
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.Backlog">
            <summary>
            Tcp处理并发连接时最大半连接队列
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.NoDelay">
            <summary>
            禁用延迟发送
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.UseSsl">
            <summary>
            是否使用ssl加密
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.ServiceSslOption">
            <summary>
            用于Ssl加密的证书
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpListenOption.Adapter">
            <summary>
            配置Tcp适配器
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.Protocol">
            <summary>
            协议类
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.Protocol.m_value">
            <summary>
            值
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.Protocol.None">
            <summary>
            表示无协议
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.Protocol.Http">
            <summary>
            获取http协议
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.Protocol.Tcp">
            <summary>
            Tcp协议
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.Protocol.NamedPipe">
            <summary>
            命名管道
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.Protocol.Udp">
            <summary>
            UDP协议
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.Protocol.WebSocket">
            <summary>
            获取WebSocket协议
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.Protocol.#ctor(System.String)">
            <summary>
            表示
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:TouchSocket.Sockets.Protocol.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.Protocol.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.Protocol.Equals(System.Object)">
            <summary>
            比较是否和目标相等
            </summary>
            <param name="obj">目标</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.Protocol.op_Equality(TouchSocket.Sockets.Protocol,TouchSocket.Sockets.Protocol)">
            <summary>
            等于
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.Protocol.op_Inequality(TouchSocket.Sockets.Protocol,TouchSocket.Sockets.Protocol)">
            <summary>
            不等于
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.TcpNetworkMonitor">
            <summary>
            Tcp网络监听器
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpNetworkMonitor.#ctor(TouchSocket.Sockets.TcpListenOption,System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Tcp网络监听器
            </summary>
            <param name="option">监听配置选项</param>
            <param name="socket">Socket组件</param>
            <param name="e">Socket异步事件参数</param>
            <exception cref="T:System.ArgumentNullException">如果option或socket为null，则抛出此异常</exception>
        </member>
        <member name="P:TouchSocket.Sockets.TcpNetworkMonitor.Option">
            <summary>
            监听配置
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpNetworkMonitor.Socket">
            <summary>
            Socket组件
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpNetworkMonitor.SocketAsyncEvent">
            <summary>
            SocketAsyncEventArgs
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.TouchSocketUtility">
            <summary>
            TouchSocketUtility
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.UdpNetworkMonitor">
            <summary>
            Udp监听器
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpNetworkMonitor.#ctor(TouchSocket.Sockets.IPHost,System.Net.Sockets.Socket)">
            <summary>
            初始化Udp监听器
            </summary>
            <param name="iPHost">IP主机信息</param>
            <param name="socket">Socket对象，用于网络通信</param>
            <exception cref="T:System.ArgumentNullException">如果socket为null，则抛出此异常</exception>
        </member>
        <member name="P:TouchSocket.Sockets.UdpNetworkMonitor.IPHost">
            <summary>
            获取IP主机信息
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpNetworkMonitor.Socket">
            <summary>
            获取或设置Socket组件
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ConnectableService">
            <summary>
            表示可连接的服务器基类
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService.#ctor">
            <summary>
            表示可连接的服务器基类
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ConnectableService.Count">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.ConnectableService.MaxCount">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService.ClearAsync">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService.ClientExists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService.GetIds">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService.ResetIdAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService.GetClients">
            <inheritdoc cref="M:TouchSocket.Sockets.IConnectableService.GetClients"/>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService.GetNextNewId">
            <summary>
            尝试获取下一个新的标识符。
            </summary>
            <returns>返回新的标识符，如果内部方法调用失败，则返回默认的新标识符。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.ConnectableService`1">
            <summary>
            ConnectableService 类为实现与客户端的连接提供了一个框架。
            这个抽象类以泛型的形式定义，允许继承该类的服务处理特定类型的客户端。
            </summary>
            <typeparam name="TClient">客户端类型，必须实现 IClient 和 IIdClient 接口。</typeparam>
        </member>
        <member name="P:TouchSocket.Sockets.ConnectableService`1.Clients">
            <summary>
            客户端集合属性，返回一个客户端集合对象，该对象管理所有连接的客户端。
            </summary>
            <value>一个 IClientCollection 泛型接口，用于管理客户端实例。</value>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService`1.ClientInitialized(`0)">
            <summary>
            客户端实例初始化完成。
            </summary>
            <param name="client">初始化完成的客户端实例。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService`1.GetClients">
            <summary>
            获取所有客户端实例的集合。
            </summary>
            <returns>一个 IClient 接口的集合，包含所有客户端实例。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableService`1.NewClient">
            <summary>
            创建一个新的客户端实例。
            </summary>
            <returns>一个 TClient 类型的新的客户端实例。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ServiceBase">
            <summary>
            服务器基类
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ServiceBase.ServerName">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.ServiceBase.ServerState">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceBase.StartAsync">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceBase.StopAsync">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TcpCore">
            <summary>
            Tcp核心
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.MinBufferSize">
            <summary>
            最小缓存尺寸
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.MaxBufferSize">
            <summary>
            最大缓存尺寸
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCore.#ctor">
            <summary>
            Tcp核心
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCore.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.ReceiveBufferSize">
            <summary>
            接收缓存池,运行时的值会根据流速自动调整
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.ReceiveCounter">
            <summary>
            接收计数器
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.SendBufferSize">
            <summary>
            发送缓存池,运行时的值会根据流速自动调整
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.SendCounter">
            <summary>
            发送计数器
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.Socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.SslStream">
            <summary>
            提供一个用于客户端-服务器通信的流，该流使用安全套接字层 (SSL) 安全协议对服务器和（可选）客户端进行身份验证。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCore.UseSsl">
            <summary>
            是否启用了Ssl
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCore.AuthenticateAsync(TouchSocket.Sockets.ServiceSslOption)">
            <summary>
            以Ssl服务器模式授权
            </summary>
            <param name="sslOption"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCore.AuthenticateAsync(TouchSocket.Sockets.ClientSslOption)">
            <summary>
            以Ssl客户端模式授权
            </summary>
            <param name="sslOption"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCore.Reset(System.Net.Sockets.Socket)">
            <summary>
            重置环境，并设置新的<see cref="P:TouchSocket.Sockets.TcpCore.Socket"/>。
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCore.Reset">
            <summary>
            重置环境。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCore.SendAsync(System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据。
            <para>
            内部会根据是否启用Ssl，进行直接发送，还是Ssl发送。
            </para>
            </summary>
            <param name="memory"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:TouchSocket.Sockets.ClientFactory`1">
            <summary>
            客户端工厂的基类，用于创建特定类型的客户端对象。
            </summary>
            <typeparam name="TClient">客户端类型，必须实现IClient接口。</typeparam>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.#ctor">
            <summary>
            客户端工厂类的构造函数。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ClientFactory`1.AvailableCount">
            <summary>
            获取可用的客户端数量。
            <para>
            该值指示了当前空闲的客户端数量和未创建的客户端数量。
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:TouchSocket.Sockets.ClientFactory`1.CreatedCount">
            <summary>
            获取已经创建的客户端数量。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ClientFactory`1.FreeCount">
            <summary>
            获取空闲的客户端数量。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ClientFactory`1.MaxCount">
            <summary>
            最大客户端数量。默认10。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ClientFactory`1.MinCount">
            <summary>
            池中维护的最小客户端数量。默认0。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ClientFactory`1.CreatedClients">
            <summary>
            已创建的客户端安全列表，一般不要直接操作。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ClientFactory`1.FreeClients">
            <summary>
            空闲客户端的安全队列，一般不要直接操作。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.Clear">
            <summary>
            清理池中的所有客户端。
            </summary>
            <returns>被清理的客户端数量。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.DisposeClient(`0)">
            <summary>
            释放客户端最后的调用。
            </summary>
            <param name="client">待释放的客户端实例。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.GetClient(System.TimeSpan)">
            <summary>
            获取用于传输的客户端结果。可以支持<see cref="T:System.IDisposable"/>。
            </summary>
            <param name="waitTime">等待时间，超过此时间则取消获取客户端的操作。</param>
            <returns>返回一个<see cref="T:TouchSocket.Sockets.ClientFactoryResult`1"/>对象，包含租用的客户端和归还客户端的方法。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.GetClient">
            <summary>
            获取一个指定客户端，默认情况下等待1秒。
            </summary>
            <returns>返回一个<see cref="T:TouchSocket.Sockets.ClientFactoryResult`1"/>对象，包含租用的客户端和归还客户端的方法。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.IsAlive(`0)">
            <summary>
            判断客户端是不是存活状态。
            </summary>
            <param name="client">要判断的客户端对象。</param>
            <returns>返回一个布尔值，表示客户端的存活状态。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.CreateClient">
            <summary>
            创建客户端
            </summary>
            <returns>返回一个异步任务，该任务结果为创建的客户端对象。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.RentClient(System.TimeSpan)">
            <summary>
            租赁客户端
            </summary>
            <param name="waitTime">等待时间</param>
            <returns>客户端实例</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactory`1.ReturnClient(`0)">
            <summary>
            放回使用完成的客户端
            </summary>
            <param name="client">客户端实例</param>
        </member>
        <member name="T:TouchSocket.Sockets.ClientFactoryResult`1">
            <summary>
            客户端工厂结果
            </summary>
            <typeparam name="TClient">客户端类型，必须实现IClient接口</typeparam>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactoryResult`1.#ctor(`0,System.Action{`0})">
            <summary>
            初始化客户端工厂结果
            </summary>
            <param name="client">客户端实例</param>
            <param name="action">对客户端执行的操作</param>
        </member>
        <member name="P:TouchSocket.Sockets.ClientFactoryResult`1.Client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClientFactoryResult`1.Dispose">
            <summary>
            释放资源，执行对客户端的操作
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ConnectableClientFactory`1">
            <summary>
            适用于可连接客户端的连接工厂。
            </summary>
            <typeparam name="TClient">客户端类型，必须实现IClient和IConnectableClient接口。</typeparam>
        </member>
        <member name="P:TouchSocket.Sockets.ConnectableClientFactory`1.ConnectTimeout">
            <summary>
            连接超时设定
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ConnectableClientFactory`1.GetConfig">
            <summary>
            获取传输的客户端配置
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectableClientFactory`1.OnGetConfig">
            <summary>
            获取配置。
            </summary>
            <returns>返回TouchSocketConfig对象，用于传输客户端配置。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.TcpClientFactory`1">
            <summary>
            适用于Tcp客户端的连接工厂。
            </summary>
            <typeparam name="TClient">表示Tcp客户端的类型参数，必须实现ITcpClient接口。</typeparam>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientFactory`1.IsAlive(`0)">
            <summary>
            判断给定的Tcp客户端是否处于活动状态。
            </summary>
            <param name="client">要判断状态的Tcp客户端。</param>
            <returns>如果客户端在线则返回true，否则返回false。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientFactory`1.DisposeClient(`0)">
            <summary>
            处理Tcp客户端的释放操作。
            </summary>
            <param name="client">要释放的Tcp客户端。</param>
        </member>
        <member name="T:TouchSocket.Sockets.TcpClientFactory">
            <summary>
            适用于基于<see cref="T:TouchSocket.Sockets.TcpClient"/>的连接工厂。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientFactory.CreateClient">
            <summary>
            创建并初始化一个新的TcpClient实例。
            </summary>
            <returns>配置并连接好的TcpClient实例。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.INatService`1">
            <summary>
            定义了一个支持NAT（网络地址转换）服务的接口，用于扩展ITcpServiceBase服务以支持NAT穿透功能。
            </summary>
            <typeparam name="TClient">客户端类型的参数，必须实现INatSessionClient接口。</typeparam>
        </member>
        <member name="T:TouchSocket.Sockets.INatSessionClient">
            <summary>
            定义了<see cref="T:TouchSocket.Sockets.INatSessionClient"/>接口。
            该接口专门用于处理需要网络地址转换（Nat）支持的TCP会话客户端操作。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.INatSessionClient.AddTargetClientAsync(System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            异步添加目标客户端。
            </summary>
            <param name="setupAction">配置操作委托，用于设置TouchSocket配置。</param>
            <returns>Task异步任务对象。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.INatSessionClient.AddTargetClientAsync(TouchSocket.Sockets.NatTargetClient)">
            <summary>
            异步添加目标客户端。
            </summary>
            <param name="client">要添加的TCP客户端。</param>
            <returns>Task异步任务对象。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.INatSessionClient.RemoveTargetClient(TouchSocket.Sockets.NatTargetClient)">
            <summary>
            移除目标客户端。
            </summary>
            <param name="client">要移除的TCP客户端。</param>
            <returns>如果移除成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.INatSessionClient.GetTargetClients">
            <summary>
            获取所有目标客户端。
            </summary>
            <returns>返回一个包含所有目标客户端的数组。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.NatService`1">
            <summary>
            Tcp端口转发服务器
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.NatSessionClient">
            <summary>
            端口转发辅助类，继承自<see cref="T:TouchSocket.Sockets.TcpSessionClient"/>。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.AddTargetClientAsync(TouchSocket.Sockets.NatTargetClient)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.AddTargetClientAsync(System.Action{TouchSocket.Core.TouchSocketConfig})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.GetTargetClients">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.RemoveTargetClient(TouchSocket.Sockets.NatTargetClient)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.OnNatClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            当NAT连接关闭时的虚拟方法。
            </summary>
            <param name="e">关闭事件的参数。</param>
            <returns>一个等待完成的任务。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.OnNatConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            当建立NAT连接时触发的抽象异步事件处理方法。
            </summary>
            <param name="e">包含连接信息的事件参数。</param>
            <returns>一个异步任务，表示事件处理的完成。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.OnNatReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            在Nat服务器收到数据时。
            </summary>
            <param name="e">接收到的数据事件参数</param>
            <returns>需要转发的数据。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.OnTargetClientClosed(TouchSocket.Sockets.NatTargetClient,TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            当目标客户端断开。
            </summary>
            <param name="client">断开的Tcp客户端</param>
            <param name="e">断开事件参数</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.OnTargetClientReceived(TouchSocket.Sockets.NatTargetClient,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            在目标客户端收到数据时。
            </summary>
            <param name="client">发送数据的Tcp客户端</param>
            <param name="e">接收到的数据事件参数</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.OnTcpConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.NatTargetClient_Closed(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            处理TcpClient断开连接事件。
            </summary>
            <param name="client">断开连接的客户端。</param>
            <param name="e">包含断开连接信息的事件参数。</param>
        </member>
        <member name="M:TouchSocket.Sockets.NatSessionClient.NatTargetClient_Received(TouchSocket.Sockets.NatTargetClient,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            处理接收数据事件。
            </summary>
            <param name="client">接收到数据的客户端。</param>
            <param name="e">包含接收数据信息的事件参数。</param>
        </member>
        <member name="T:TouchSocket.Sockets.NatTargetClient">
            <summary>
            封装类，用于处理NAT穿透后的目标客户端连接。
            </summary>
            <remarks>
            该类继承自TcpClientBase，并实现了ITcpConnectableClient和IClientSender接口，
            以支持TCP连接和客户端数据发送功能。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.NatTargetClient.#ctor">
            <summary>
            初始化 NatTargetClient 类的新实例。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.NatTargetClient.#ctor(System.Boolean)">
            <summary>
            初始化 NatTargetClient 类的新实例，并设置是否为备用模式。
            </summary>
            <param name="standBy">指示是否将客户端置于备用模式。</param>
        </member>
        <member name="P:TouchSocket.Sockets.NatTargetClient.StandBy">
            <summary>
            是否独立化当前对象。当为<see langword="true"/>时，<see cref="T:TouchSocket.Sockets.NatSessionClient"/>即使断线，也不会释放该对象。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.NatTargetClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatTargetClient.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatTargetClient.SendAsync(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatTargetClient.SendAsync(TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatTargetClient.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NatTargetClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TcpClient">
            <summary>
            表示一个TCP客户端，继承自TcpClientBase并实现了ITcpClient接口。
            该类提供了与远程服务器建立TCP连接的功能。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClient.Closed">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClient.Closing">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClient.Connected">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClient.Connecting">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClient.Received">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.OnTcpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.OnTcpConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            准备连接的时候，此时已初始化Socket，但是并未建立Tcp连接
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.ClearReceiver">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.CreateReceiver">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            当收到适配器处理的数据时。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.SendAsync(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.SendAsync(TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClient.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TcpClientBase">
            <summary>
            TcpClientBase类是作为一个抽象基类设计的，它继承自SetupConfigObject，并实现了ITcpSession接口。
            这个类的主要目的是为TCP会话相关的操作提供一个基础框架，同时整合了配置设定的功能。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.#ctor">
            <summary>
            构造函数用于初始化TcpClientBase类的实例。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.OnTcpConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            建立Tcp连接时触发。
            <para>
            覆盖父类方法，将不会触发<see cref="T:TouchSocket.Sockets.ITcpConnectedPlugin"/>插件。
            </para>
            </summary>
            <param name="e">连接事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            准备连接的时候，此时已初始化Socket，但是并未建立Tcp连接。
            <para>
            覆盖父类方法，将不会触发<see cref="T:TouchSocket.Sockets.ITcpConnectingPlugin"/>插件。
            </para>
            </summary>
            <param name="e">连接事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            在连接断开时触发。
            <para>
            如果重写此方法，则不会触发<see cref="T:TouchSocket.Sockets.ITcpClosedPlugin"/>插件。
            </para>
            </summary>
            <param name="e">包含断开连接相关信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.OnTcpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            即将断开连接(仅主动断开时有效)。
            <para>
            覆盖父类方法，将不会触发<see cref="T:TouchSocket.Sockets.ITcpClosingPlugin"/>插件。
            </para>
            </summary>
            <param name="e">包含断开连接相关信息的事件参数</param>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.LastReceivedTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.LastSentTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.DataHandlingAdapter">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.IP">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.MainSocket">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.Online">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.Port">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.UseSsl">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.Protocol">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.RemoteIPHost">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpClientBase.IsClient">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.CloseAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.TcpConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步连接服务器
            </summary>
            <param name="millisecondsTimeout">连接超时时间，单位为毫秒</param>
            <param name="token">取消令牌</param>
            <returns>返回任务</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.Abort(System.Boolean,System.String)">
            <summary>
            中止连接。
            </summary>
            <param name="manual">是否为手动中止。</param>
            <param name="msg">中止的消息。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.ProtectedCreateReceiver(TouchSocket.Sockets.IReceiverClient{TouchSocket.Sockets.IReceiverResult})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.ProtectedClearReceiver">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            当收到适配器处理的数据时。
            </summary>
            <param name="e">包含接收到的数据事件的相关信息。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.OnTcpSending(System.ReadOnlyMemory{System.Byte})">
            <summary>
            当即将发送时，如果覆盖父类方法，则不会触发插件。
            </summary>
            <param name="memory">待发送的数据，以只读内存形式提供。</param>
            <returns>返回值意义：表示是否继续发送数据的指示，true为继续，false为取消发送。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.SetAdapter(TouchSocket.Core.SingleStreamDataHandlingAdapter)">
            <summary>
            设置适配器。
            </summary>
            <param name="adapter">要设置的适配器实例。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.OnTcpReceiving(TouchSocket.Core.ByteBlock)">
            <summary>
            当收到原始数据时，触发相关插件进行处理。
            </summary>
            <param name="byteBlock">包含收到的原始数据的字节块。</param>
            <returns>
            如果返回<see langword="true"/>，则表示数据已被处理，且不会再向下传递。
            </returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.ProtectedDefaultSendAsync(System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据，保护方法。
            此方法用于在已建立的TCP连接上异步发送数据。
            它首先检查当前实例是否已被弃用，然后检查客户端是否已连接。
            如果这些检查通过，它将调用OnTcpSending事件处理程序进行预发送处理，
            最后通过TCP核心发送数据。
            </summary>
            <param name="memory">要发送的数据，存储在只读内存区中。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
            <exception cref="T:System.ObjectDisposedException">如果当前实例已被弃用，则抛出此异常。</exception>
            <exception cref="T:System.InvalidOperationException">如果客户端未连接，则抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.ProtectedSendAsync(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            异步发送数据，通过适配器模式灵活处理数据发送。
            </summary>
            <param name="memory">待发送的只读字节内存块。</param>
            <returns>一个异步任务，表示发送操作。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.ProtectedSendAsync(TouchSocket.Core.IRequestInfo@)">
            <summary>
            异步发送请求信息的受保护方法。
            
            此方法首先检查当前对象是否能够发送请求信息，如果不能，则抛出异常。
            如果可以发送，它将使用数据处理适配器来异步发送输入请求。
            </summary>
            <param name="requestInfo">要发送的请求信息。</param>
            <returns>返回一个任务，该任务代表异步操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpClientBase.ProtectedSendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            异步发送数据。
            如果数据处理适配器不存在或无法拼接发送，则将所有传输字节合并到一个连续的内存块中发送。
            如果数据处理适配器存在且支持拼接发送，则直接发送传输字节列表。
            </summary>
            <param name="transferBytes">要发送的字节数据列表，每个项代表一个字节片段。</param>
            <returns>发送任务。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.TcpService">
            <summary>
            Tcp服务类，继承自<see cref="T:TouchSocket.Sockets.TcpService`1"/>，实现<see cref="T:TouchSocket.Sockets.ITcpService"/>接口。
            该类用于提供基于TCP协议的服务。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService.NewClient">
            <summary>
            创建新的客户端会话。
            </summary>
            <returns>返回一个新的PrivateTcpSessionClient对象。</returns>
            <remarks>
            此方法覆盖了基类中的同名方法，用于生成自定义的TcpSessionClient实例。
            </remarks>
        </member>
        <member name="T:TouchSocket.Sockets.TcpService.PrivateTcpSessionClient">
            <summary>
            私有TcpSessionClient类，继承自TcpSessionClient。
            该类用于提供自定义的TcpSessionClient实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.TcpServiceBase`1">
            <summary>
            提供基于TCP的服务基类，用于管理和操作TCP客户端会话。
            </summary>
            <typeparam name="TClient">TCP客户端会话的类型，必须继承自TcpSessionClientBase，并实现IIdClient和IClient接口。</typeparam>
        </member>
        <member name="P:TouchSocket.Sockets.TcpServiceBase`1.Clients">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpServiceBase`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpServiceBase`1.Monitors">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpServiceBase`1.ServerState">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.AddListen(TouchSocket.Sockets.TcpListenOption)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.ClearAsync">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.ClientExists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.GetIds">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.RemoveListen(TouchSocket.Sockets.TcpNetworkMonitor)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.ResetIdAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.StartAsync">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.StopAsync">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.OnAuthenticatingError(System.Exception)">
            <summary>
            在身份验证过程中发生错误时触发。
            此方法用于记录身份验证过程中的异常错误。
            </summary>
            <param name="ex">发生的异常对象。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpServiceBase`1.PreviewBind(TouchSocket.Sockets.TcpNetworkMonitor)">
            <summary>
            预览绑定 TCP 网络监视器。
            此方法允许派生类在绑定监视器之前执行自定义的预览绑定逻辑。
            </summary>
            <param name="monitor">要绑定的 TCP 网络监视器实例。</param>
        </member>
        <member name="T:TouchSocket.Sockets.TcpService`1">
            <summary>
            抽象类<see cref="T:TouchSocket.Sockets.TcpService`1"/>为基于TCP协议的服务提供基础实现。
            它扩展了<see cref="T:TouchSocket.Sockets.TcpServiceBase`1"/>并实现了<see cref="T:TouchSocket.Sockets.ITcpService`1"/>接口，其中TClient是<see cref="T:TouchSocket.Sockets.TcpSessionClient"/>的一个派生类。
            该类旨在为具体的服务类提供一个框架，定义了与TCP客户端会话管理相关的基本功能。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService`1.ClientInitialized(`0)">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpService`1.Closed">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpService`1.Closing">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpService`1.Connected">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpService`1.Connecting">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpService`1.Received">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService`1.OnTcpClosed(`0,TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            客户端断开连接，覆盖父类方法将不会触发事件。
            </summary>
            <param name="sessionClient">发生断开连接事件的客户端</param>
            <param name="e">断开连接事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService`1.OnTcpClosing(`0,TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            即将断开连接(仅主动断开时有效)。
            </summary>
            <param name="sessionClient">Tcp客户端对象</param>
            <param name="e">断开连接事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService`1.OnTcpConnected(`0,TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            客户端连接完成时的异步处理方法。此方法覆盖父类的同名方法，用于处理客户端成功连接到服务器的情况。
            不同之处在于，此方法的调用不会触发事件，而是直接执行连接处理逻辑。
            </summary>
            <param name="sessionClient">表示客户端的套接字对象。</param>
            <param name="e">包含连接过程中相关数据的事件参数对象。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService`1.OnTcpConnecting(`0,TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            客户端请求连接，覆盖父类方法将不会触发事件。
            </summary>
            <param name="sessionClient">正在连接的客户端对象</param>
            <param name="e">连接事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService`1.OnTcpReceived(`0,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            当接收到TCP数据时触发的异步事件处理器。
            </summary>
            <param name="sessionClient">发生数据接收的客户端套接字实例。</param>
            <param name="e">包含接收数据事件的相关数据。</param>
            <remarks>
            此方法不直接处理数据接收，而是作为事件处理器，当数据接收事件被触发时，它会检查是否存在已注册的事件处理程序。
            如果存在，它将异步调用这些事件处理程序。这种设计允许外部代码根据需要自定义数据处理逻辑，
            同时保持了代码的灵活性和可扩展性。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService`1.SendAsync(System.String,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpService`1.SendAsync(System.String,TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TcpSessionClient">
             <summary>
             定义了一个抽象类TcpSessionClient，用于处理TCP会话客户端的连接和数据传输。
             它继承自TcpSessionClientBase类，并实现了ITcpSessionClient接口。
            
             该类提供了基础的TCP会话管理功能，包括客户端的标识(Id)、IP地址(IP)和端口号(Port)。
             使用DebuggerDisplay属性，可以在调试工具中更清晰地展示每个实例的Id、IP地址和端口号。
            
             继承此类的子类通常需要实现或重写一些方法和属性，以适应特定的业务逻辑和数据处理需求。
             </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClient.Closed">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClient.Closing">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            客户端已断开连接。
            </summary>
            <param name="e">有关断开连接事件的信息。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.OnTcpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            即将断开连接(仅主动断开时有效)。
            </summary>
            <param name="e">有关断开连接的事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.OnTcpConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            当客户端完整建立Tcp连接。
            </summary>
            <param name="e">包含连接建立信息的事件参数。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            客户端正在连接。
            </summary>
            <param name="e">包含连接信息的事件参数。</param>
            <returns>一个等待的任务，该任务在连接完成后会被完成。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            当收到适配器处理的数据时。
            </summary>
            <returns>如果返回<see langword="true"/>则表示数据已被处理，且不会再向下传递。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.SendAsync(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.SendAsync(TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.SendAsync(System.String,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.SendAsync(System.String,TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.ClearReceiver">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClient.CreateReceiver">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TcpSessionClientBase">
            <summary>
            具有调试显示属性的抽象基类，用于TCP会话客户端。
            </summary>
            <remarks>
            此类提供了基础结构，用于支持TCP会话的客户端，包括ID、IP和端口信息。
            它实现了与TCP会话、客户端标识和解析器配置相关的接口。
            </remarks>
            <seealso cref="T:TouchSocket.Core.ResolverConfigObject"/>
            <seealso cref="T:TouchSocket.Sockets.ITcpSession"/>
            <seealso cref="T:TouchSocket.Sockets.ITcpListenableClient"/>
            <seealso cref="T:TouchSocket.Sockets.IClient"/>
            <seealso cref="T:TouchSocket.Sockets.IIdClient"/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.#ctor">
            <summary>
            TcpSessionClientBase 类的构造函数。
            </summary>
            <remarks>
            初始化 TcpSessionClientBase 类的新实例，并设置协议为 TCP。
            </remarks>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.Config">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.DataHandlingAdapter">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.Id">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.IP">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.IsClient">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.LastReceivedTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.LastSentTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.ListenOption">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.MainSocket">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.Online">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.PluginManager">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.Port">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.Protocol">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.Resolver">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.Service">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.ServiceIP">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.ServicePort">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TcpSessionClientBase.UseSsl">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.Abort(System.Boolean,System.String)">
            <summary>
            中止当前操作。
            </summary>
            <param name="manual">是否为手动中止。</param>
            <param name="msg">中止的消息。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.OnInitialized">
            <summary>
            当初始化完成时，执行在<see cref="M:TouchSocket.Sockets.TcpSessionClientBase.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)"/>之前。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            客户端已断开连接。
            <para>
            覆盖父类方法，将不会触发<see cref="T:TouchSocket.Sockets.ITcpClosedPlugin"/>插件。
            </para>
            </summary>
            <param name="e">包含断开连接相关信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.OnTcpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            即将断开连接(仅主动断开时有效)。
            <para>
            覆盖父类方法，将不会触发<see cref="T:TouchSocket.Sockets.ITcpClosingPlugin"/>插件。
            </para>
            </summary>
            <param name="e">包含断开连接相关信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.OnTcpConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            当客户端完整建立Tcp连接时触发。
            <para>
            覆盖父类方法，将不会触发<see cref="T:TouchSocket.Sockets.ITcpConnectedPlugin"/>插件。
            </para>
            </summary>
            <param name="e">包含连接信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            客户端正在连接。
            <para>
            覆盖父类方法，将不会触发<see cref="T:TouchSocket.Sockets.ITcpConnectingPlugin"/>插件。
            </para>
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.CloseAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ResetIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.IdChanged(System.String,System.String)">
            <summary>
            当Id更新的时候触发
            </summary>
            <param name="sourceId">原始Id</param>
            <param name="targetId">目标Id</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            当收到适配器处理的数据时。
            </summary>
            <param name="e">包含收到的数据事件的相关信息。</param>
            <returns>一个等待任务，表示异步操作完成时的信号。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.OnTcpReceiving(TouchSocket.Core.ByteBlock)">
            <summary>
            当收到原始数据
            </summary>
            <param name="byteBlock">包含收到的原始数据。</param>
            <returns>如果返回<see langword="true"/>则表示数据已被处理，且不会再向下传递。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.OnTcpSending(System.ReadOnlyMemory{System.Byte})">
            <summary>
            在数据即将通过TCP发送时触发，此方法用于通过插件机制拦截发送行为。
            如果子类覆盖了此方法，则不会触发插件。
            </summary>
            <param name="memory">待发送的数据，以只读内存区形式提供。</param>
            <returns>返回值表示是否允许发送，true为允许，false为阻止。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ProtectedResetId(System.String)">
            <summary>
            直接重置内部Id。
            </summary>
            <param name="targetId">目标Id，用于重置内部Id。</param>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ProtectedTryGetClient(System.String,TouchSocket.Sockets.TcpSessionClientBase@)">
            <summary>
            尝试通过Id获得对应的客户端
            </summary>
            <param name="id">客户端的唯一标识符</param>
            <param name="sessionClient">输出参数，用于返回找到的客户端实例</param>
            <returns>如果找到对应的客户端，则返回true；否则返回false</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.SetAdapter(TouchSocket.Core.SingleStreamDataHandlingAdapter)">
            <summary>
            设置数据处理适配器。
            </summary>
            <param name="adapter">要设置的适配器实例。</param>
            <exception cref="T:System.ArgumentNullException">如果提供的适配器为null，则抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ProtectedDefaultSendAsync(System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据，保护方法。
            此方法用于在已建立的TCP连接上异步发送数据。
            它首先检查当前实例是否已被处置，然后检查客户端是否已连接。
            如果这些检查通过，它将调用OnTcpSending事件处理程序进行预发送处理，
            最后通过TCP核心组件实际发送数据。
            </summary>
            <param name="memory">要发送的数据，存储在内存中。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
            <exception cref="T:System.ObjectDisposedException">如果调用此方法的实例已被处置。</exception>
            <exception cref="T:System.InvalidOperationException">如果客户端未连接时抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ProtectedSendAsync(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            异步发送只读内存数据。
            </summary>
            <param name="memory">要发送的只读内存块。</param>
            <returns>异步操作任务。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ProtectedSendAsync(TouchSocket.Core.IRequestInfo@)">
            <summary>
            异步发送请求信息。
            </summary>
            <param name="requestInfo">要发送的请求信息。</param>
            <returns>异步操作任务。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ProtectedSendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            异步发送字节传输列表。
            </summary>
            <param name="transferBytes">包含字节数据的传输列表。</param>
            <returns>异步操作任务。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ProtectedClearReceiver">
            <summary>
            清除接收器对象。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpSessionClientBase.ProtectedCreateReceiver(TouchSocket.Sockets.IReceiverClient{TouchSocket.Sockets.IReceiverResult})">
            <summary>
            创建或获取接收器对象。
            </summary>
            <param name="receiverObject">接收器客户端对象，用于创建接收器。</param>
            <returns>返回一个接收器对象，用于处理接收操作。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.UdpSession">
            <summary>
            UdpSession 类，继承自 UdpSessionBase 并实现 IUdpSession 接口。
            这个类提供了与 UDP 会话相关的操作和属性，是 UDP 会话管理的核心组件。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSession.DataHandlingAdapter">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSession.Received">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.OnUdpReceived(TouchSocket.Sockets.UdpReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.SendAsync(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.SendAsync(TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.SendAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.SendAsync(System.Net.EndPoint,TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.SendAsync(System.Net.EndPoint,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.ClearReceiver">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSession.CreateReceiver">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.UdpSessionBase">
            <summary>
            UdpSessionBase 类是 UDP 会话的基础抽象类，继承自 ServiceBase 类，并实现了 IUdpSessionBase 接口。
            它提供了 UDP 会话管理的基本功能，包括创建和关闭会话等。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.#ctor">
            <summary>
            构造函数，初始化UDP会话基类。
            </summary>
            <remarks>
            该构造函数负责创建和初始化一个UDP会话对象。它设置了会话的协议类型为UDP，
            并创建了一个UDP套接字用于会话。此外，还初始化了一个用于监控UDP网络状态的对象。
            </remarks>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSessionBase.LastReceivedTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSessionBase.LastSentTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSessionBase.ProtectedDataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSessionBase.Monitor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSessionBase.Protocol">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSessionBase.RemoteIPHost">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSessionBase.ServerState">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSessionBase.IsClient">
            <summary>
            在Udp中，该值没有意义，且可以自由赋值。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.DropMulticastGroup(System.Net.IPAddress)">
            <summary>
            从组播组中退出。
            </summary>
            <param name="multicastAddr">指定的组播地址。</param>
            <exception cref="T:System.ObjectDisposedException">如果当前对象已被处置，则引发异常。</exception>
            <exception cref="T:System.ArgumentNullException">如果multicastAddr为null，则引发异常。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.JoinMulticastGroup(System.Net.IPAddress)">
            <summary>
            加入组播。
            <para>组播地址为 224.0.0.0 ~ 239.255.255.255，其中 224.0.0.0~224.255.255.255 不建议在用户程序中使用，因为它们一般都有特殊用途。</para>
            </summary>
            <param name="multicastAddr">要加入的组播地址。</param>
            <exception cref="T:System.ArgumentNullException">如果 <paramref name="multicastAddr"/> 为 null，则抛出此异常。</exception>
            <exception cref="T:System.ObjectDisposedException">如果当前对象已被处置，则抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.StartAsync">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.StopAsync">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.OnUdpReceived(TouchSocket.Sockets.UdpReceivedDataEventArgs)">
            <summary>
            处理已接收到的数据。
            </summary>
            <param name="e">包含接收到的数据的事件参数</param>
            <remarks>
            此方法使用异步模式调用所有实现的处理程序来处理接收到的UDP数据。
            它不直接处理数据，而是提供一个集中的位置来触发所有相关的插件处理程序。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.OnUdpSending(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <summary>
            在UDP数据即将发送时触发插件。
            如果当前类覆盖了父类的方法，则不会触发插件。
            </summary>
            <param name="endPoint">发送目标的端点。</param>
            <param name="memory">待发送的字节数据。</param>
            <returns>返回一个ValueTask布尔对象，指示插件是否处理了发送事件。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.PreviewBind(System.Net.Sockets.Socket)">
            <summary>
            在Socket初始化对象后，Bind之前调用。
            可用于设置Socket参数。
            父类方法可覆盖。
            </summary>
            <param name="socket">待设置的Socket对象</param>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.SetAdapter(TouchSocket.Sockets.UdpDataHandlingAdapter)">
            <summary>
            设置适配器
            </summary>
            <param name="adapter">要设置的适配器实例</param>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ReceivingData(TouchSocket.Core.ByteBlock)">
            <summary>
            当收到原始数据时，处理数据。
            该方法提供了一个机制，通过该机制可以对原始数据进行自定义处理，而不必修改具体的传输逻辑。
            </summary>
            <param name="byteBlock">包含收到的原始数据的字节块。</param>
            <returns>
            如果返回<see langword="true"/>，则表示数据已被当前处理者完全处理，且不会再向下传递至其他处理者或消费者。
            返回<see langword="false"/>表示当前处理者未处理数据，数据可能会被传递给下一个处理者或消费者。
            </returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedSendAsync(System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据，使用提供的内存数据。
            </summary>
            <param name="memory">要发送的字节数据的内存段。</param>
            <returns>返回一个任务，表示发送操作的异步执行。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedSendAsync(TouchSocket.Core.IRequestInfo)">
            <summary>
            异步发送数据，使用提供的请求信息。
            </summary>
            <param name="requestInfo">包含要发送数据的请求信息的对象。</param>
            <returns>返回一个任务，表示发送操作的异步执行。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedSendAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据到指定的端点。
            该方法通过适配器转发数据，如果适配器未设置，则采用默认发送方式。
            </summary>
            <param name="endPoint">要发送数据到的目标端点。</param>
            <param name="memory">待发送的字节数据。</param>
            <returns>返回一个任务，表示异步操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedSendAsync(System.Net.EndPoint,TouchSocket.Core.IRequestInfo)">
            <summary>
            异步发送请求信息到指定的端点。
            在发送之前，会检查是否具备发送请求信息的能力，并通过适配器进行发送。
            </summary>
            <param name="endPoint">要发送数据到的目标端点。</param>
            <param name="requestInfo">待发送的请求信息。</param>
            <returns>返回一个任务，表示异步操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedDefaultSendAsync(System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送只读字节内存到远程主机。
            此方法提供了一种默认的发送方式，确保只有在可以发送且远程IP主机不为空时才尝试发送数据。
            </summary>
            <param name="memory">要发送的只读字节内存。</param>
            <returns>一个等待任务，表示异步操作。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedDefaultSendAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据到指定的端点。
            </summary>
            <param name="endPoint">要发送数据到的端点。</param>
            <param name="memory">待发送的数据，以只读内存形式提供。</param>
            <remarks>
            此方法为异步发送操作提供保护措施，确保数据在发送前进行必要的检查，
            并通过UDP协议进行发送。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedSendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
             <summary>
             异步安全发送数据方法。
            
             本方法提供了一种安全的异步数据发送方式，确保在发送过程中，
             使用了端点信息并且避免了潜在的空引用错误。
             </summary>
             <param name="transferBytes">要发送的字节数据集合。</param>
             <returns>返回一个任务，表示异步操作的完成。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedSendAsync(System.Net.EndPoint,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            异步发送数据到指定的端点。
            </summary>
            <param name="endPoint">要发送数据的端点。</param>
            <param name="transferBytes">待发送的字节数据列表，每个项包含要传输的字节片段。</param>
            <returns>异步操作任务。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedCreateReceiver(TouchSocket.Sockets.IReceiverClient{TouchSocket.Sockets.IUdpReceiverResult})">
            <summary>
            创建或获取一个UDP接收器对象。
            </summary>
            <param name="receiverObject">接收器客户端对象，用于处理UDP接收结果。</param>
            <returns>返回一个<see cref="T:TouchSocket.Sockets.IReceiver`1"/>类型的接收器对象。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSessionBase.ProtectedClearReceiver">
            <summary>
            清除当前的UDP接收器对象。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.TcpDataAdapterTester">
            <summary>
            Tcp数据处理适配器测试
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.UdpDataAdapterTester">
            <summary>
            Udp数据处理适配器测试
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataAdapterTester.CreateTester(TouchSocket.Sockets.UdpDataHandlingAdapter,System.Int32,System.Func{TouchSocket.Core.ByteBlock,TouchSocket.Core.IRequestInfo,System.Threading.Tasks.Task})">
            <summary>
            获取测试器
            </summary>
            <param name="adapter">待测试适配器</param>
            <param name="multiThread">并发多线程数量</param>
            <param name="receivedCallBack">收到数据回调</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataAdapterTester.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataAdapterTester.Run(System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32,System.Int32)">
            <summary>
            模拟测试运行发送
            </summary>
            <param name="memory">待测试的内存块</param>
            <param name="testCount">测试次数</param>
            <param name="expectedCount">期待测试次数</param>
            <param name="millisecondsTimeout">超时时间（毫秒）</param>
            <returns>测试运行的时间差</returns>
        </member>
        <member name="T:TouchSocket.Sockets.NormalUdpDataHandlingAdapter">
            <summary>
            常规UDP数据处理适配器
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.NormalUdpDataHandlingAdapter.CanSplicingSend">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.NormalUdpDataHandlingAdapter.CanSendRequestInfo">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.NormalUdpDataHandlingAdapter.PreviewReceived(System.Net.EndPoint,TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:TouchSocket.Sockets.NormalUdpDataHandlingAdapter.PreviewSendAsync(System.Net.EndPoint,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.UdpDataHandlingAdapter">
            <summary>
            Udp数据处理适配器
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpDataHandlingAdapter.CanSendRequestInfo">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpDataHandlingAdapter.CanSplicingSend">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpDataHandlingAdapter.ReceivedCallBack">
            <summary>
            当接收数据处理完成后，回调该函数执行接收
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpDataHandlingAdapter.SendCallBackAsync">
            <summary>
            当接收数据处理完成后，异步回调该函数执行发送
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.ReceivedInput(System.Net.EndPoint,TouchSocket.Core.ByteBlock)">
            <summary>
            收到数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.SendInputAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送输入数据。
            </summary>
            <param name="endPoint">要发送数据的端点。</param>
            <param name="memory">包含要发送的数据的只读内存。</param>
            <returns>返回一个任务，表示发送操作。</returns>
            <remarks>
            此方法是一个异步操作，用于向指定的端点发送输入数据。
            它使用PreviewSendAsync方法来执行实际的发送操作。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.SendInputAsync(System.Net.EndPoint,TouchSocket.Core.IRequestInfo)">
            <summary>
            发送数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="endPoint"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.SendInputAsync(System.Net.EndPoint,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            发送数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="endPoint"></param>
            <param name="transferBytes"></param>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.GoReceived(System.Net.EndPoint,TouchSocket.Core.ByteBlock,TouchSocket.Core.IRequestInfo)">
            <summary>
            处理已经经过预先处理后的数据
            </summary>
            <param name="remoteEndPoint">远程端点，标识数据来源</param>
            <param name="byteBlock">接收到的二进制数据块</param>
            <param name="requestInfo">解析后的请求信息</param>
            <returns>一个异步任务，代表处理过程</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.GoSendAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <summary>
            发送已经经过预先处理后的数据
            </summary>
            <param name="endPoint">目标端点，表示数据发送的目的地址</param>
            <param name="memory">已经经过预先处理的字节数据，以 ReadOnlyMemory 方式传递以提高性能</param>
            <returns>返回一个 Task 对象，表示异步操作的完成</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.PreviewReceived(System.Net.EndPoint,TouchSocket.Core.ByteBlock)">
            <summary>
            当接收到数据后预先处理数据,然后调用<see cref="M:TouchSocket.Sockets.UdpDataHandlingAdapter.GoReceived(System.Net.EndPoint,TouchSocket.Core.ByteBlock,TouchSocket.Core.IRequestInfo)"/>处理数据
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.PreviewSendAsync(System.Net.EndPoint,TouchSocket.Core.IRequestInfo)">
            <summary>
            当发送数据前预先处理数据
            </summary>
            <param name="endPoint"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.PreviewSendAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <summary>
            当发送数据前预先处理数据。
            </summary>
            <param name="endPoint">数据发送的目标端点。</param>
            <param name="memory">待发送的字节数据内存。</param>
            <returns>一个表示异步操作完成的 <see cref="T:System.Threading.Tasks.Task"/> 对象。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.PreviewSendAsync(System.Net.EndPoint,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            组合发送预处理数据，
            当属性SplicingSend实现为True时，系统才会调用该方法。
            </summary>
            <param name="endPoint"></param>
            <param name="transferBytes"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TouchSocket.Sockets.UdpDataHandlingAdapter.Reset">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.UdpFrame">
            <summary>
            UDP数据帧
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpFrame.Crc">
            <summary>
            Crc校验
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpFrame.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpFrame.FIN">
            <summary>
            是否为终结帧
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpFrame.Id">
            <summary>
            数据Id
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpFrame.SN">
            <summary>
            帧序号
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpFrame.Parse(System.ReadOnlySpan{System.Byte})">
            <summary>
            解析给定的只读字节跨度数据。
            </summary>
            <param name="span">待解析的只读字节跨度。</param>
            <returns>如果解析成功，则返回true；否则返回false。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.UdpPackage">
            <summary>
            UDP数据包
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpPackage.#ctor(System.Int64,System.Int32,System.Collections.Concurrent.ConcurrentDictionary{System.Int64,TouchSocket.Sockets.UdpPackage})">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
            <param name="millisecondsTimeout"></param>
            <param name="revStore"></param>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackage.Count">
            <summary>
            当前长度
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackage.Crc">
            <summary>
            Crc
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackage.Id">
            <summary>
            包唯一标识
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackage.IsComplated">
            <summary>
            是否已完成
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackage.Length">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackage.MTU">
            <summary>
            MTU
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackage.TotalCount">
            <summary>
            总长度，在收到最后一帧之前，为-1。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpPackage.Add(TouchSocket.Sockets.UdpFrame)">
            <summary>
            添加帧
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:TouchSocket.Sockets.UdpPackage.TryGetData(TouchSocket.Core.ByteBlock)">
            <summary>
            获得数据
            </summary>
            <param name="byteBlock"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.UdpPackageAdapter">
            <summary>
            UDP数据包的适配器
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpPackageAdapter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackageAdapter.CanSendRequestInfo">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackageAdapter.CanSplicingSend">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackageAdapter.MTU">
            <summary>
            最大传输单元
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.UdpPackageAdapter.Timeout">
            <summary>
            接收超时时间，默认5000ms
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpPackageAdapter.PreviewReceived(System.Net.EndPoint,TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpPackageAdapter.PreviewSendAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.UdpPackageAdapter.PreviewSendAsync(System.Net.EndPoint,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.ClosedEventHandler`1">
            <summary>
            客户端已断开连接
            </summary>
            <typeparam name="TClient">客户端类型</typeparam>
            <param name="client">断开连接的客户端</param>
            <param name="e">断开连接事件参数</param>
            <returns>任务</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ClosingEventHandler`1">
            <summary>
            客户端即将断开连接
            </summary>
            <typeparam name="TClient">客户端类型</typeparam>
            <param name="client">即将断开连接的客户端</param>
            <param name="e">断开连接事件参数</param>
        </member>
        <member name="T:TouchSocket.Sockets.ConnectedEventHandler`1">
            <summary>
            客户端已连接
            </summary>
            <typeparam name="TClient">客户端类型</typeparam>
            <param name="client">已连接的客户端</param>
            <param name="e">连接事件参数</param>
        </member>
        <member name="T:TouchSocket.Sockets.ConnectingEventHandler`1">
            <summary>
            客户端正在连接
            </summary>
            <typeparam name="TClient">客户端类型</typeparam>
            <param name="client">正在连接的客户端</param>
            <param name="e">连接事件参数</param>
        </member>
        <member name="T:TouchSocket.Sockets.ReceivedEventHandler`1">
            <summary>
            接收数据事件
            </summary>
            <param name="client">接收数据的客户端</param>
            <param name="e">接收数据事件参数</param>
        </member>
        <member name="T:TouchSocket.Sockets.TryOutEventHandler`1">
            <summary>
            尝试获取客户端实例
            </summary>
            <typeparam name="TClient">客户端类型</typeparam>
            <param name="id">客户端标识</param>
            <param name="client">客户端实例</param>
            <returns>是否成功获取客户端实例</returns>
        </member>
        <member name="T:TouchSocket.Sockets.UdpReceivedEventHandler`1">
            <summary>
            UDP数据接收事件
            </summary>
            <typeparam name="TClient">客户端类型</typeparam>
            <param name="client">接收数据的客户端</param>
            <param name="e">UDP接收数据事件参数</param>
        </member>
        <member name="T:TouchSocket.Sockets.CheckClearType">
            <summary>
            检查清理类型
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.CheckClearType.OnlySend">
            <summary>
            仅统计发送
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.CheckClearType.OnlyReceive">
            <summary>
            仅统计接收
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.CheckClearType.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ServerState">
            <summary>
            服务器状态
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.ServerState.None">
            <summary>
            无状态，指示为初建
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.ServerState.Running">
            <summary>
            正在运行
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.ServerState.Exception">
            <summary>
            运行遇到异常
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.ServerState.Stopped">
            <summary>
            已停止
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ByteBlockEventArgs">
            <summary>
            字节事件参数类，用于在插件之间传递字节块数据
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ByteBlockEventArgs.#ctor(TouchSocket.Core.ByteBlock)">
            <summary>
            初始化字节事件参数对象
            </summary>
            <param name="byteBlock">需要传递的字节块数据</param>
        </member>
        <member name="P:TouchSocket.Sockets.ByteBlockEventArgs.ByteBlock">
            <summary>
            获取字节块数据
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ClosedEventArgs">
            <summary>
            断开连接事件参数
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClosedEventArgs.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="manual">断开连接是否为手动操作</param>
            <param name="mes">断开连接的消息</param>
        </member>
        <member name="P:TouchSocket.Sockets.ClosedEventArgs.Manual">
            <summary>
            是否为主动行为。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ClosingEventArgs">
            <summary>
            即将断开连接事件参数
            </summary>
            <remarks>
            当发生断开连接事件时，使用该类来传递断开连接的消息。
            继承自MsgEventArgs，用于提供断开连接时的详细信息。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.ClosingEventArgs.#ctor(System.String)">
            <summary>
            初始化即将断开连接事件参数对象
            </summary>
            <param name="msg">断开连接的消息</param>
        </member>
        <member name="T:TouchSocket.Sockets.ConnectedEventArgs">
            <summary>
            表示连接事件的参数类，继承自PluginEventArgs。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ConnectingEventArgs">
            <summary>
            即将连接事件的参数类，继承自MsgPermitEventArgs。
            用于处理即将连接事件时传递的信息。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ConnectingEventArgs.#ctor">
            <summary>
            构造函数
            初始化IsPermitOperation属性为true，表示默认允许操作。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ConnectingEventArgs.Id">
            <summary>
            客户端Id。该Id的赋值，仅在服务器适用。
            用于标识唯一的客户端连接。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IdChangedEventArgs">
            <summary>
            Id变更事件参数类，用于插件内部Id发生变化时传递相关信息
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IdChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            初始化Id变更事件参数对象
            </summary>
            <param name="sourceId">旧Id</param>
            <param name="targetId">新Id</param>
        </member>
        <member name="P:TouchSocket.Sockets.IdChangedEventArgs.OldId">
            <summary>
            旧Id
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IdChangedEventArgs.NewId">
            <summary>
            新Id
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ReceivedDataEventArgs">
            <summary>
            接收数据事件参数类，继承自ByteBlockEventArgs
            用于封装接收到的数据和相关的请求信息
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ReceivedDataEventArgs.#ctor(TouchSocket.Core.ByteBlock,TouchSocket.Core.IRequestInfo)">
            <summary>
            构造函数，初始化接收到的数据和请求信息
            </summary>
            <param name="byteBlock">接收到的数据块</param>
            <param name="requestInfo">请求信息，描述了数据接收的上下文</param>
        </member>
        <member name="P:TouchSocket.Sockets.ReceivedDataEventArgs.RequestInfo">
            <summary>
            获取请求信息
            </summary>
            <remarks>
            该属性只读，用于提供接收数据时的请求上下文信息
            </remarks>
        </member>
        <member name="T:TouchSocket.Sockets.SendingEventArgs">
            <summary>
            SendingEventArgs 类，继承自 PluginEventArgs，用于封装待发送数据的内存块。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.SendingEventArgs.#ctor(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            初始化 SendingEventArgs 类的新实例。
            </summary>
            <param name="memory">待发送数据的只读内存块。</param>
        </member>
        <member name="P:TouchSocket.Sockets.SendingEventArgs.Memory">
            <summary>
            数据缓存区，该属性可能获取来自于内存池，所以最好不要引用该对象，可以同步使用该对象
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ServiceStateEventArgs">
            <summary>
            服务器状态事件参数
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceStateEventArgs.#ctor(TouchSocket.Sockets.ServerState,System.Exception)">
            <summary>
            初始化服务器状态事件参数类
            </summary>
            <param name="serverState">服务器的状态信息</param>
            <param name="exception">与状态变化相关的异常（如果有的话）</param>
        </member>
        <member name="P:TouchSocket.Sockets.ServiceStateEventArgs.ServerState">
            <summary>
            获取服务器状态
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ServiceStateEventArgs.Exception">
            <summary>
            获取与状态变化相关的异常信息
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.UdpReceivedDataEventArgs">
            <summary>
            UdpReceivedDataEventArgs 类，继承自 ReceivedDataEventArgs 类
            用于封装 UDP 接收到的数据及相关信息
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.UdpReceivedDataEventArgs.#ctor(System.Net.EndPoint,TouchSocket.Core.ByteBlock,TouchSocket.Core.IRequestInfo)">
            <summary>
            构造函数
            初始化 UdpReceivedDataEventArgs 对象
            </summary>
            <param name="endPoint">接收数据的终结点</param>
            <param name="byteBlock">接收到的数据块</param>
            <param name="requestInfo">请求信息，提供关于此次接收请求的元数据</param>
        </member>
        <member name="P:TouchSocket.Sockets.UdpReceivedDataEventArgs.EndPoint">
            <summary>
            接收终结点
            表示数据是从哪个终结点接收的
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.UdpSendingEventArgs">
            <summary>
            提供与UDP发送操作相关的事件处理方法。
            </summary>
            <remarks>
            该类继承自<see cref="T:TouchSocket.Sockets.SendingEventArgs"/>，专门化处理UDP发送事件，
            包含了发送数据的目的端点信息。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.UdpSendingEventArgs.#ctor(System.ReadOnlyMemory{System.Byte}@,System.Net.EndPoint)">
            <summary>
            初始化<see cref="T:TouchSocket.Sockets.UdpSendingEventArgs"/>类的新实例。
            </summary>
            <param name="memory">要发送的数据内存区块。</param>
            <param name="endPoint">数据发送的目的端点。</param>
        </member>
        <member name="P:TouchSocket.Sockets.UdpSendingEventArgs.EndPoint">
            <summary>
            获取发送数据的目的端点。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ClientNotConnectedException">
            <summary>
            未连接异常
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClientNotConnectedException.#ctor">
            <summary>
            初始化未连接异常
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClientNotConnectedException.#ctor(System.String)">
            <summary>
            初始化未连接异常
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="T:TouchSocket.Sockets.ClientNotFindException">
            <summary>
            没有找到Id对应的客户端
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClientNotFindException.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClientNotFindException.#ctor(System.String)">
            <summary>
            带信息的构造函数
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="T:TouchSocket.Sockets.ClientExtension">
            <summary>
            客户端扩展类
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.GetInfo``1(``0)">
            <summary>
            获取会话信息
            </summary>
            <typeparam name="TClient">会话类型，必须实现ITcpSession和IIdClient接口</typeparam>
            <param name="client">会话实例</param>
            <returns>会话信息字符串，包括IP、端口、ID和协议类型</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.GetIPPort``1(``0)">
            <summary>
            获取客户端的IP和端口号
            </summary>
            <typeparam name="TClient">泛型参数，表示客户端会话类型，必须实现ITcpSession接口</typeparam>
            <param name="client">具体客户端会话实例</param>
            <returns>返回客户端的IP地址和端口号，格式为IP:端口号</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.GetLastActiveTime``1(``0)">
            <summary>
            获取最后活动时间。即<see cref="P:TouchSocket.Sockets.IClient.LastReceivedTime"/>与<see cref="P:TouchSocket.Sockets.IClient.LastSentTime"/>的最近值。
            </summary>
            <typeparam name="TClient">泛型参数，表示客户端类型，必须实现<see cref="T:TouchSocket.Sockets.IClient"/>接口。</typeparam>
            <param name="client">泛型参数实例，表示具体的客户端对象。</param>
            <returns>返回最后活动时间，即<see cref="P:TouchSocket.Sockets.IClient.LastReceivedTime"/>与<see cref="P:TouchSocket.Sockets.IClient.LastSentTime"/>中较近的时间。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.GetOtherIds``1(``0)">
            <summary>
            获取服务器中，除自身以外的所有客户端id
            </summary>
            <typeparam name="TClient">客户端类型，要求实现ITcpListenableClient和IIdClient接口</typeparam>
            <param name="client">当前客户端实例</param>
            <returns>返回一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>，包含除当前客户端外的所有客户端id</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.TryShutdown``1(``0,System.Net.Sockets.SocketShutdown)">
            <summary>
            安全性发送关闭报文
            </summary>
            <typeparam name="TClient">客户端类型，必须是ITcpSession接口的实现</typeparam>
            <param name="client">要关闭的客户端对象</param>
            <param name="how">关闭的方式，默认值为SocketShutdown.Both，即读写都关闭</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.CloseAsync``1(``0)">
            <summary>
            异步关闭指定的客户端连接。
            该方法通过调用IClosableClient接口的CloseAsync方法来实现关闭操作，传入一个空字符串作为参数。
            </summary>
            <typeparam name="TClient">客户端类型，必须实现IClosableClient接口。</typeparam>
            <param name="client">要关闭的客户端实例。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.SafeCloseAsync``1(``0,System.String)">
            <summary>
            安全性关闭。不会抛出异常。
            </summary>
            <typeparam name="TClient">要关闭的客户端类型，必须实现IClosableClient接口。</typeparam>
            <param name="client">要关闭的客户端实例。</param>
            <param name="msg">关闭时传递的消息。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.SafeCloseAsync``1(``0)">
            <summary>
            安全性关闭。不会抛出异常。
            </summary>
            <typeparam name="TClient">一个泛型参数，代表客户端类型，该类型必须实现IClosableClient接口。</typeparam>
            <param name="client">要关闭的客户端实例。</param>
            <remarks>
            此方法提供了一种安全关闭客户端的方式，确保在关闭过程中不会因为异常而中断。
            它是异步的，允许在不阻塞当前线程的情况下完成关闭操作。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.Close``1(``0)">
            <summary>
            同步关闭客户端
            </summary>
            <remarks>
            请注意，该同步方法由<see cref="M:TouchSocket.Sockets.IClosableClient.CloseAsync(System.String)"/>异步转同步而来。所以请谨慎使用。建议直接使用异步。
            </remarks>
            <typeparam name="TClient">要操作的客户端类型，必须实现<see cref="T:TouchSocket.Sockets.IClosableClient"/>接口</typeparam>
            <param name="client">要关闭的客户端实例</param>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.Close``1(``0,System.String)">
            <summary>
            同步关闭客户端
            </summary>
            <remarks>
            请注意，该同步方法由<see cref="M:TouchSocket.Sockets.IClosableClient.CloseAsync(System.String)"/>异步转同步而来。所以请谨慎使用。建议直接使用异步。
            </remarks>
            <typeparam name="TClient">要操作的客户端类型，必须实现<see cref="T:TouchSocket.Sockets.IClosableClient"/>接口。</typeparam>
            <param name="client">要关闭的客户端实例。</param>
            <param name="msg">关闭客户端时发送的消息。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.SafeClose``1(``0,System.String)">
            <summary>
            安全性关闭。不会抛出异常。
            </summary>
            <remarks>
            请注意，该同步方法由<see cref="M:TouchSocket.Sockets.IClosableClient.CloseAsync(System.String)"/>异步转同步而来。所以请谨慎使用。建议直接使用异步。
            </remarks>
            <typeparam name="TClient">要操作的客户端类型，必须实现<see cref="T:TouchSocket.Sockets.IClosableClient"/>接口。</typeparam>
            <param name="client">要关闭的客户端实例。</param>
            <param name="msg">关闭时传递的消息。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.SafeClose``1(``0)">
            <summary>
            安全性关闭。不会抛出异常。
            </summary>
            <remarks>
            请注意，该同步方法由<see cref="M:TouchSocket.Sockets.IClosableClient.CloseAsync(System.String)"/>异步转同步而来。所以请谨慎使用。建议直接使用异步。
            </remarks>
            <typeparam name="TClient">要关闭的客户端类型，必须实现<see cref="T:TouchSocket.Sockets.IClosableClient"/>接口。</typeparam>
            <param name="client">要进行安全关闭的客户端实例。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.ConnectAsync(TouchSocket.Sockets.IConnectableClient,System.Int32)">
            <inheritdoc cref="M:TouchSocket.Sockets.IConnectableClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.ConnectAsync``1(``0,TouchSocket.Sockets.IPHost,System.Int32)">
            <inheritdoc cref="M:TouchSocket.Sockets.IConnectableClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.TryConnectAsync(TouchSocket.Sockets.IConnectableClient,System.Int32)">
            <summary>
            尝试连接。不会抛出异常。
            </summary>
            <param name="client">要连接的客户端对象，实现了IConnectableClient接口。</param>
            <param name="millisecondsTimeout">连接超时时间，单位为毫秒。默认值为5000毫秒。</param>
            <returns>返回一个Result对象，其中包含连接操作的结果代码以及可能的异常消息。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.TryConnectAsync``1(``0,System.Int32)">
            <summary>
            尝试连接。不会抛出异常。
            </summary>
            <typeparam name="TClient">客户端类型，必须实现ISetupConfigObject和IConnectableClient接口。</typeparam>
            <param name="client">要连接的客户端对象。</param>
            <param name="millisecondsTimeout">连接超时时间，以毫秒为单位。默认为5000毫秒（5秒）。</param>
            <returns>返回一个Result对象，其中包含连接操作的结果代码和可能的异常消息。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.Connect(TouchSocket.Sockets.IConnectableClient,System.Int32,System.Threading.CancellationToken)">
            <summary>
            同步执行连接操作。
            </summary>
            <remarks>
            注意，本同步操作是直接等待的<see cref="M:TouchSocket.Sockets.IConnectableClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)"/>，所以请谨慎使用。
            </remarks>
            <param name="client">要连接的客户端对象。</param>
            <param name="millisecondsTimeout">连接超时时间，以毫秒为单位。默认为5000毫秒。</param>
            <param name="cancellationToken">用于取消操作的令牌。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.Connect``1(``0,TouchSocket.Sockets.IPHost,System.Int32)">
            <summary>
            同步执行连接操作。
            </summary>
            <remarks>
            注意，本同步操作是直接等待的<see cref="M:TouchSocket.Sockets.IConnectableClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)"/>，所以请谨慎使用。
            </remarks>
            <typeparam name="TClient">要连接的客户端类型，必须实现<see cref="T:TouchSocket.Core.ISetupConfigObject"/>和<see cref="T:TouchSocket.Sockets.IConnectableClient"/>接口。</typeparam>
            <param name="client">要进行连接的客户端实例。</param>
            <param name="ipHost">连接的目标IP地址和端口信息。</param>
            <param name="millisecondsTimeout">连接超时时间，单位为毫秒，默认为5000毫秒。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.TryConnect(TouchSocket.Sockets.IConnectableClient,System.Int32)">
            <summary>
            同步执行连接操作。不会抛出异常。
            </summary>
            <remarks>
            注意，本同步操作是直接等待的<see cref="M:TouchSocket.Sockets.IConnectableClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)"/>，所以请谨慎使用。
            </remarks>
            <param name="client">要执行连接操作的客户端对象。</param>
            <param name="millisecondsTimeout">连接超时时间，以毫秒为单位。默认值为5000毫秒。</param>
            <returns>返回一个<see cref="T:TouchSocket.Core.Result"/>对象，其中包含连接操作的结果代码以及可能的异常消息。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ClientExtension.TryConnect``1(``0,System.Int32)">
            <summary>
            同步执行连接操作。不会抛出异常。
            </summary>
            <remarks>
            注意，本同步操作是直接等待的<see cref="M:TouchSocket.Sockets.IConnectableClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)"/>，所以请谨慎使用。
            </remarks>
            <typeparam name="TClient">要连接的客户端类型，必须实现<see cref="T:TouchSocket.Core.ISetupConfigObject"/>和<see cref="T:TouchSocket.Sockets.IConnectableClient"/>.</typeparam>
            <param name="client">要执行连接操作的客户端实例。</param>
            <param name="millisecondsTimeout">连接超时时间，以毫秒为单位。默认值为5000毫秒（5秒）。</param>
            <returns>一个<see cref="T:TouchSocket.Core.Result"/>实例，包含连接操作的结果代码和可能的异常消息。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.HeartbeatPluginExtension">
            <summary>
            心跳插件扩展类
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.HeartbeatPluginExtension.SetTick``1(``0,System.TimeSpan)">
            <summary>
            设置心跳间隔。默认3秒。
            </summary>
            <typeparam name="THeartbeatPlugin">心跳插件类型，必须是HeartbeatPlugin的派生类型。</typeparam>
            <param name="heartbeatPlugin">将要设置心跳间隔的心跳插件实例。</param>
            <param name="timeSpan">心跳间隔时间，包括小时、分钟和秒等。</param>
            <returns>返回设置后的心跳插件实例，支持链式调用。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.HeartbeatPluginExtension.SetMaxFailCount``1(``0,System.Int32)">
            <summary>
            设置最大失败次数，默认3。
            </summary>
            <typeparam name="THeartbeatPlugin">心跳插件类型</typeparam>
            <param name="heartbeatPlugin">具体的心跳插件实例</param>
            <param name="value">设置的最大失败次数</param>
            <returns>返回设置后的心跳插件实例</returns>
        </member>
        <member name="T:TouchSocket.Sockets.SenderExtension">
            <summary>
            发送者扩展类
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据。
            </summary>
            <typeparam name="TClient">发送器类型参数，必须实现ISender接口。</typeparam>
            <param name="client">发送器实例。</param>
            <param name="memory">待发送的字节内存块，使用<see cref="T:System.ReadOnlyMemory`1"/>类型以强调数据不会被修改。</param>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,System.String)">
            <summary>
            以UTF-8的编码同步发送字符串。
            </summary>
            <typeparam name="TClient">发送者类型，必须实现ISender接口。</typeparam>
            <param name="client">发送者实例。</param>
            <param name="value">待发送的字符串。</param>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.SendAsync``1(``0,System.String)">
            <summary>
            以UTF-8的编码异步发送字符串。
            </summary>
            <typeparam name="TClient">发送器类型参数，必须实现ISender接口。</typeparam>
            <param name="client">发送器实例。</param>
            <param name="value">待发送的字符串。</param>
            <returns>返回一个Task对象，表示异步操作。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            异步发送数据。
            </summary>
            <param name="client">发送数据的客户端对象。</param>
            <param name="bytesList">待发送的字节数据列表。</param>
            <typeparam name="TClient">客户端对象类型，必须实现<see cref="T:TouchSocket.Sockets.IClientSender"/>接口。</typeparam>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,TouchSocket.Core.IRequestInfo)">
            <summary>
            异步发送请求信息。
            </summary>
            <param name="client">发起请求的客户端对象。</param>
            <param name="requestInfo">要发送的请求信息。</param>
            <typeparam name="TClient">客户端对象的类型，必须实现<see cref="T:TouchSocket.Sockets.IRequestInfoSender"/>接口。</typeparam>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,System.String,TouchSocket.Core.IRequestInfo)">
            <summary>
            同步发送请求方法
            </summary>
            <typeparam name="TClient">泛型参数，表示客户端类型，必须实现IIdRequestInfoSender接口</typeparam>
            <param name="client">客户端实例</param>
            <param name="id">请求的目标ID</param>
            <param name="requestInfo">请求信息对象，包含请求的各种细节</param>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,System.String,System.String)">
            <summary>
            以UTF-8的编码同步发送字符串。
            </summary>
            <typeparam name="TClient">泛型参数，表示客户端类型，必须实现IIdSender接口。</typeparam>
            <param name="client">客户端实例，用于发送数据。</param>
            <param name="id">标识符，用于指定发送的目标。</param>
            <param name="value">要发送的字符串内容。</param>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,System.String,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            异步发送数据。
            </summary>
            <typeparam name="TClient">发送器类型参数，必须实现IIdSender接口。</typeparam>
            <param name="client">发送器实例。</param>
            <param name="id">发送的数据的唯一标识。</param>
            <param name="memory">待发送的字节内存块，使用<see cref="T:System.ReadOnlyMemory`1"/>以强调数据不会被修改。</param>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.SendAsync``1(``0,System.String,System.String)">
            <summary>
            以UTF-8的编码异步发送字符串。
            </summary>
            <typeparam name="TClient">发送器类型，必须实现IIdSender接口。</typeparam>
            <param name="client">发送器实例。</param>
            <param name="id">发送的目标标识符。</param>
            <param name="value">要发送的字符串内容。</param>
            <returns>返回一个Task对象，表示异步操作。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,System.Net.EndPoint,System.String)">
            <summary>
            以UTF-8的编码同步发送字符串。
            </summary>
            <typeparam name="TClient">泛型参数，限定为实现了IUdpClientSender接口的类型。</typeparam>
            <param name="client">用于发送数据的客户端实例。</param>
            <param name="endPoint">发送数据的目的地，表示为一个端点。</param>
            <param name="value">需要发送的字符串数据。</param>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.Send``1(``0,System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据到指定的端点。
            </summary>
            <typeparam name="TClient">发送客户端的类型，必须实现<see cref="T:TouchSocket.Sockets.IUdpClientSender"/>接口。</typeparam>
            <param name="client">发送客户端实例。</param>
            <param name="endPoint">数据发送的目标端点。</param>
            <param name="memory">待发送的数据，以只读内存的方式提供。</param>
        </member>
        <member name="M:TouchSocket.Sockets.SenderExtension.SendAsync``1(``0,System.Net.EndPoint,System.String)">
            <summary>
            以UTF-8的编码异步发送字符串。
            </summary>
            <typeparam name="TClient">泛型参数，表示UDP客户端发送器的类型。</typeparam>
            <param name="client">UDP客户端实例，用于发送数据。</param>
            <param name="endPoint">发送数据的目的地，可以是IP地址和端口号的组合。</param>
            <param name="value">需要发送的字符串内容。</param>
            <returns>返回一个Task对象，代表异步操作的完成状态。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ServiceExtension">
            <summary>
            提供针对服务的一系列扩展方法。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceExtension.Start``1(``0)">
            <summary>
            启动服务的扩展方法。
            </summary>
            <typeparam name="TService">服务的类型，必须继承自IServiceBase。</typeparam>
            <param name="service">要启动的服务实例。</param>
            <remarks>
            此方法使用了GetFalseAwaitResult方法来避免捕获异常，这在某些异步操作中可能是必要的，
            但在常规情况下，应该避免在生产代码中直接调用非await的异步方法结果。
            </remarks>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceExtension.Stop``1(``0)">
            <summary>
            停止给定的服务。
            </summary>
            <typeparam name="TService">要停止的服务类型，必须实现IServiceBase接口。</typeparam>
            <param name="service">要执行停止操作的服务实例。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceExtension.Start``1(``0,TouchSocket.Sockets.IPHost[])">
            <inheritdoc cref="M:TouchSocket.Sockets.IServiceBase.StartAsync"/>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceExtension.StartAsync``1(``0,TouchSocket.Sockets.IPHost[])">
            <inheritdoc cref="M:TouchSocket.Sockets.IServiceBase.StartAsync"/>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceExtension.Start``1(``0,TouchSocket.Sockets.IPHost)">
            <inheritdoc cref="M:TouchSocket.Sockets.IServiceBase.StartAsync"/>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceExtension.StartAsync``1(``0,TouchSocket.Sockets.IPHost)">
            <inheritdoc cref="M:TouchSocket.Sockets.IServiceBase.StartAsync"/>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceExtension.GetClient``1(TouchSocket.Sockets.IConnectableService{``0},System.String)">
            <summary>
            从连接服务中获取指定ID的客户端。
            </summary>
            <param name="connectableService">一个可连接的服务实例，提供了访问其客户端集合的方法。</param>
            <param name="id">要查找的客户端的唯一标识符。</param>
            <typeparam name="TClient">客户端的类型，必须同时实现<see cref="T:TouchSocket.Sockets.IIdClient"/>和<see cref="T:TouchSocket.Sockets.IClient"/>接口。</typeparam>
            <returns>如果找到指定ID的客户端，则返回该客户端；否则，抛出<see cref="T:TouchSocket.Sockets.ClientNotFindException"/>异常。</returns>
            <exception cref="T:TouchSocket.Sockets.ClientNotFindException">当无法找到指定ID的客户端时抛出。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.ServiceExtension.TryGetClient``1(TouchSocket.Sockets.IConnectableService{``0},System.String,``0@)">
            <summary>
            尝试从可连接服务中获取与指定ID匹配的客户端。
            </summary>
            <param name="connectableService">一个实现了<see cref="T:TouchSocket.Sockets.IConnectableService`1"/>接口的可连接服务对象。</param>
            <param name="id">要获取的客户端的唯一标识符。</param>
            <param name="client">如果找到匹配的客户端，则设置此参数为该客户端对象；如果未找到，则设置为default(TClient)。</param>
            <returns>如果找到匹配的客户端，则返回true；否则返回false。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.SocketExtension">
            <summary>
            Socket的扩展方法类
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.SocketExtension.AbsoluteSend(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32)">
            <summary>
            绝对发送数据。
            该方法使用指定的Socket对象，将数据从缓冲区发送到远程主机。
            它确保所有数据都被发送，即使需要多次调用Socket的Send方法。
            </summary>
            <param name="socket">用于发送数据的Socket对象。</param>
            <param name="buffer">包含要发送的数据的字节数组。</param>
            <param name="offset">字节数组中开始发送数据的索引。</param>
            <param name="length">要发送的数据长度。</param>
            <exception cref="T:System.Net.Sockets.SocketException">当数据发送失败时抛出异常。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.SocketExtension.TryClose(System.Net.Sockets.Socket)">
            <summary>
            尝试关闭<see cref="T:System.Net.Sockets.Socket"/>。不会抛出异常。
            </summary>
            <param name="socket"></param>
        </member>
        <member name="T:TouchSocket.Sockets.SocketPluginManagerExtension">
            <summary>
            定义一个静态类SocketPluginManagerExtension，用于扩展Socket插件管理功能
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.SocketPluginManagerExtension.UseCheckClear(TouchSocket.Core.IPluginManager)">
            <summary>
             检查连接客户端活性插件。
             <para>当在设置的周期内，没有接收/发送任何数据，则判定该客户端掉线。执行清理。默认配置：60秒为一个周期，同时检测发送和接收。</para>
             服务器、客户端均适用。
            </summary>
            <param name="pluginManager">插件管理器对象，用于管理插件。</param>
            <returns>返回一个<see cref="T:TouchSocket.Sockets.CheckClearPlugin`1"/>类型的插件实例，用于执行客户端活性检查及清理操作。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.SocketPluginManagerExtension.UseCheckClear``1(TouchSocket.Core.IPluginManager)">
            <summary>
             检查连接客户端活性插件。
             <para>当在设置的周期内，没有接收/发送任何数据，则判定该客户端掉线。执行清理。默认配置：60秒为一个周期，同时检测发送和接收。</para>
             服务器、客户端均适用。
            </summary>
            <param name="pluginManager">插件管理器</param>
            <returns>返回一个用于检查和清理不活跃客户端的插件实例</returns>
        </member>
        <member name="M:TouchSocket.Sockets.SocketPluginManagerExtension.UseReconnection``1(TouchSocket.Core.IPluginManager)">
            <summary>
            使用断线重连。
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="pluginManager"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.SocketPluginManagerExtension.UseReconnection(TouchSocket.Core.IPluginManager,System.Int32,System.Boolean,System.Int32,System.Action{TouchSocket.Sockets.ITcpClient})">
            <summary>
            使用断线重连。
            <para>该效果仅客户端在完成首次连接，且为被动断开时有效。</para>
            </summary>
            <param name="pluginManager"></param>
            <param name="successCallback">成功回调函数</param>
            <param name="tryCount">尝试重连次数，设为-1时则永远尝试连接</param>
            <param name="printLog">是否输出日志。</param>
            <param name="sleepTime">失败时，停留时间</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.SocketPluginManagerExtension.UseReconnection(TouchSocket.Core.IPluginManager,System.TimeSpan,System.Func{TouchSocket.Sockets.ITcpClient,System.Int32,System.Exception,System.Boolean},System.Action{TouchSocket.Sockets.ITcpClient})">
            <summary>
            使用断线重连。
            <para>该效果仅客户端在完成首次连接，且为被动断开时有效。</para>
            </summary>
            <param name="pluginManager"></param>
            <param name="sleepTime">失败时间隔时间</param>
            <param name="failCallback">失败时回调（参数依次为：客户端，本轮尝试重连次数，异常信息）。如果回调为null或者返回false，则终止尝试下次连接。</param>
            <param name="successCallback">成功连接时回调。</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.SocketPluginManagerExtension.UseTcpReconnection``1(TouchSocket.Core.IPluginManager)">
            <summary>
            使用断线重连。
            </summary>
            <typeparam name="TClient">指定的客户端类型，必须继承自ITcpClient。</typeparam>
            <param name="pluginManager">插件管理器实例，用于添加断线重连插件。</param>
            <returns>返回创建的重连实例。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.SocketPluginManagerExtension.UseTcpReconnection(TouchSocket.Core.IPluginManager)">
            <summary>
            为插件管理器添加TCP重新连接插件。
            </summary>
            <param name="pluginManager">要添加插件的插件管理器。</param>
            <returns>返回新创建的TCP重新连接插件实例。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.TouchSocketConfigExtension">
            <summary>
            触摸套接字配置扩展类
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.SendTimeoutProperty">
            <summary>
            发送超时设定，默认为0。
            所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.TcpDataHandlingAdapterProperty">
            <summary>
            数据处理适配器
            所需类型<see cref="T:System.Func`1"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.UdpDataHandlingAdapterProperty">
            <summary>
            数据处理适配器
            所需类型<see cref="T:System.Func`1"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.MinBufferSizeProperty">
            <summary>
            最小缓存池尺寸
            所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.MaxBufferSizeProperty">
            <summary>
            最大缓存池尺寸
            所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetMinBufferSize(TouchSocket.Core.TouchSocketConfig,System.Int32)">
            <summary>
            最小缓存容量，默认缺省。
            <list type="number">
            </list>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetMaxBufferSize(TouchSocket.Core.TouchSocketConfig,System.Int32)">
            <summary>
            最大缓存容量，默认缺省。
            <list type="number">
            </list>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetSendTimeout(TouchSocket.Core.TouchSocketConfig,System.Int32)">
            <summary>
            发送超时设定，单位毫秒，默认为0。意为禁用该配置。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetTcpDataHandlingAdapter(TouchSocket.Core.TouchSocketConfig,System.Func{TouchSocket.Core.SingleStreamDataHandlingAdapter})">
            <summary>
            设置(Tcp系)数据处理适配器。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetUdpDataHandlingAdapter(TouchSocket.Core.TouchSocketConfig,System.Func{TouchSocket.Sockets.UdpDataHandlingAdapter})">
            <summary>
            设置(Udp系)数据处理适配器。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.ServerNameProperty">
            <summary>
            服务名称，用于标识，无实际意义，所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.ThreadCountProperty">
            <summary>
            多线程数量。默认-1缺省。
            <para>UDP模式中，该值为重叠IO并发数</para>
            所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetServerName(TouchSocket.Core.TouchSocketConfig,System.String)">
            <summary>
            服务名称，用于标识，无实际意义
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetThreadCount(TouchSocket.Core.TouchSocketConfig,System.Int32)">
            <summary>
            多线程数量，默认为-1缺省，实际上在udp中相当于1。
            <para>UDP模式中，该值为重叠IO并发数</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.BindIPHostProperty">
            <summary>
            Tcp固定端口绑定，
            所需类型<see cref="T:TouchSocket.Sockets.IPHost"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.KeepAliveValueProperty">
            <summary>
            在Socket配置KeepAlive属性，这个是操作tcp底层的，如果你对底层不了解，建议不要动。
            所需类型<see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.NoDelayProperty">
            <summary>
            设置Socket不使用Delay算法，
            所需类型<see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.RemoteIPHostProperty">
            <summary>
            远程目标地址，所需类型<see cref="T:TouchSocket.Sockets.IPHost"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.SslOptionProperty">
            <summary>
            Ssl配置，为Null时则不启用
            所需类型<see cref="T:TouchSocket.Sockets.SslOption"/>
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetBindIPHost(TouchSocket.Core.TouchSocketConfig,TouchSocket.Sockets.IPHost)">
            <summary>
            固定端口绑定。
            <para>在<see cref="T:TouchSocket.Sockets.UdpSessionBase"/>中表示本地监听地址</para>
            <para>在<see cref="T:TouchSocket.Sockets.TcpClientBase"/>中表示固定客户端端口号。</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetClientSslOption(TouchSocket.Core.TouchSocketConfig,TouchSocket.Sockets.ClientSslOption)">
            <summary>
            设置客户端Ssl配置，为Null时则不启用。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetKeepAliveValue(TouchSocket.Core.TouchSocketConfig,TouchSocket.Sockets.KeepAliveValue)">
            <summary>
            在Socket的KeepAlive属性。
            <para>注意：这个是操作tcp底层的，如果你对底层不了解，建议不要动。</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetRemoteIPHost(TouchSocket.Core.TouchSocketConfig,TouchSocket.Sockets.IPHost)">
            <summary>
            设置远程目标地址。在<see cref="T:TouchSocket.Sockets.UdpSessionBase"/>中，表示默认发送时的目标地址。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetNoDelay(TouchSocket.Core.TouchSocketConfig,System.Boolean)">
            <summary>
            设置Socket的NoDelay属性，默认不做处理。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.BacklogProperty">
            <summary>
            挂起连接队列的最大长度，所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.GetDefaultNewIdProperty">
            <summary>
            设置默认Id的获取方式，所需类型<see cref="T:System.Func`2"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.ListenIPHostsProperty">
            <summary>
            服务器负责监听的地址组。所需类型<see cref="T:TouchSocket.Sockets.IPHost"/>数组
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.ListenOptionsProperty">
            <summary>
            直接单个配置服务器监听的地址组。所需类型<see cref="T:System.Action"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.MaxCountProperty">
            <summary>
            最大可连接数，默认为10000，所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.ReuseAddressProperty">
            <summary>
            端口复用，默认为false，所需类型<see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetBacklog(TouchSocket.Core.TouchSocketConfig,System.Int32)">
            <summary>
            挂起连接队列的最大长度，默认不设置值。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetGetDefaultNewId(TouchSocket.Core.TouchSocketConfig,System.Func{System.String})">
            <summary>
            设置Tcp服务器默认Id的获取方式。仅服务器生效。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetListenIPHosts(TouchSocket.Core.TouchSocketConfig,TouchSocket.Sockets.IPHost[])">
            <summary>
            服务器负责监听的地址组。
            </summary>
            <param name="config"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetListenOptions(TouchSocket.Core.TouchSocketConfig,System.Action{System.Collections.Generic.List{TouchSocket.Sockets.TcpListenOption}})">
            <summary>
            直接单个配置服务器监听的地址组。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetMaxCount(TouchSocket.Core.TouchSocketConfig,System.Int32)">
            <summary>
            最大可连接数，默认为10000。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetServiceSslOption(TouchSocket.Core.TouchSocketConfig,TouchSocket.Sockets.ServiceSslOption)">
            <summary>
            设置客户端Ssl配置，为Null时则不启用。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.UseReuseAddress(TouchSocket.Core.TouchSocketConfig)">
            <summary>
            启用端口复用。
            <para>该配置可在服务器、或客户端在监听端口时，运行监听同一个端口。可以一定程度缓解端口来不及释放的问题</para>
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.EnableBroadcastProperty">
            <summary>
            该值指定 System.Net.Sockets.Socket可以发送或接收广播数据包。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.UseBroadcast(TouchSocket.Core.TouchSocketConfig)">
            <summary>
            该值指定 System.Net.Sockets.Socket可以发送或接收广播数据包。
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.UseUdpReceive(TouchSocket.Core.TouchSocketConfig)">
            <summary>
            当udp作为客户端时，开始接收数据。起作用相当于<see cref="M:TouchSocket.Sockets.TouchSocketConfigExtension.SetBindIPHost(TouchSocket.Core.TouchSocketConfig,TouchSocket.Sockets.IPHost)"/>随机端口。
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="F:TouchSocket.Sockets.TouchSocketConfigExtension.UdpConnResetProperty">
            <summary>
            解决Windows下UDP连接被重置错误10054。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.UseUdpConnReset(TouchSocket.Core.TouchSocketConfig)">
            <summary>
            解决Windows下UDP连接被重置错误10054。
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.BuildClientAsync``1(TouchSocket.Core.TouchSocketConfig)">
            <summary>
            构建可配置，可连接类客户端，并连接
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TouchSocketConfigExtension.BuildServiceAsync``1(TouchSocket.Core.TouchSocketConfig)">
            <summary>
            构建Tcp类服务器，并启动。
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.IClient">
            <summary>
            终端接口
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IClient.Protocol">
            <summary>
            终端协议
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IClient.LastReceivedTime">
            <summary>
            最后一次接收到数据的时间
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IClient.LastSentTime">
            <summary>
            最后一次发送数据的时间
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IClient.IsClient">
            <summary>
            表示是否为客户端终端。当为<see langword="true"/>时，表示是客户端。否则为服务器通讯终端。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IClientCollection`1">
            <summary>
            客户端集合类
            </summary>
            <typeparam name="TClient">客户端类型参数，必须实现IIdClient接口</typeparam>
        </member>
        <member name="P:TouchSocket.Sockets.IClientCollection`1.Count">
            <summary>
            集合中客户端的数量
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IClientCollection`1.Item(System.String)">
            <summary>
            通过客户端的唯一标识符(Id)获取客户端对象。如果找不到对应的客户端，应返回null。
            </summary>
            <param name="id">客户端的唯一标识符</param>
            <returns>对应的客户端对象，如果找不到则返回null</returns>
        </member>
        <member name="M:TouchSocket.Sockets.IClientCollection`1.GetIds">
            <summary>
            获取集合中所有客户端的唯一标识符(Id)
            </summary>
            <returns>一个包含所有客户端Id的集合</returns>
        </member>
        <member name="M:TouchSocket.Sockets.IClientCollection`1.ClientExist(System.String)">
            <summary>
            判断指定Id的客户端是否存在于集合中
            </summary>
            <param name="id">要查找的客户端的唯一标识符</param>
            <returns>如果集合中存在该Id对应的客户端返回true，否则返回false</returns>
        </member>
        <member name="M:TouchSocket.Sockets.IClientCollection`1.TryGetClient(System.String,`0@)">
            <summary>
            尝试获取指定Id的客户端对象
            </summary>
            <param name="id">要获取的客户端的唯一标识符</param>
            <param name="client">输出参数，用于存储找到的客户端对象</param>
            <returns>如果找到对应的客户端对象返回true，否则返回false</returns>
        </member>
        <member name="T:TouchSocket.Sockets.IClosableClient">
            <summary>
            具有关闭动作的对象。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IClosableClient.CloseAsync(System.String)">
            <summary>
            关闭客户端。
            </summary>
            <param name="msg">关闭时的提示信息。</param>
        </member>
        <member name="T:TouchSocket.Sockets.IConnectableClient">
            <summary>
            定义可连接客户端的行为。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IConnectableClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步连接
            </summary>
            <param name="millisecondsTimeout">最大等待时间</param>
            <param name="token">可取消令箭</param>
            <exception cref="T:System.TimeoutException">当连接超时时抛出</exception>
            <exception cref="T:System.Exception">当连接过程中发生错误时抛出</exception>
        </member>
        <member name="T:TouchSocket.Sockets.IConnectableService">
            <summary>
            表示可连接的服务器基类接口
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IConnectableService.Count">
            <summary>
            获取已连接的客户端数量
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IConnectableService.MaxCount">
            <summary>
            获取已配置的最大可连接数量
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IConnectableService.ClearAsync">
            <summary>
            清理（断开）已连接的所有客户端
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IConnectableService.GetIds">
            <summary>
            获取已连接的所有客户端Id集合
            </summary>
            <returns>返回客户端Id的集合</returns>
        </member>
        <member name="M:TouchSocket.Sockets.IConnectableService.ResetIdAsync(System.String,System.String)">
            <summary>
            重置指定客户端的Id
            </summary>
            <param name="sourceId">源Id</param>
            <param name="targetId">目标Id</param>
        </member>
        <member name="M:TouchSocket.Sockets.IConnectableService.ClientExists(System.String)">
            <summary>
            根据Id判断对应的客户端是否存在
            </summary>
            <param name="id">客户端的Id</param>
            <returns>返回是否存在</returns>
        </member>
        <member name="M:TouchSocket.Sockets.IConnectableService.GetClients">
            <summary>
            获取已连接的所有客户端。
            </summary>
            <returns>返回IClient的集合</returns>
        </member>
        <member name="T:TouchSocket.Sockets.IConnectableService`1">
            <summary>
            表示可连接的泛型服务器基类接口
            </summary>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="P:TouchSocket.Sockets.IConnectableService`1.Clients">
            <summary>
            获取已连接的客户端集合。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IIdClient">
            <summary>
            具有Id的客户端
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IIdClient.ResetIdAsync(System.String)">
            <summary>
            重新设置Id
            </summary>
            <param name="newId">新的Id值</param>
        </member>
        <member name="P:TouchSocket.Sockets.IIdClient.Id">
            <summary>
            用于索引的Id
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IOnlineClient">
            <summary>
            标识在线状态的对象
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IOnlineClient.Online">
            <summary>
            判断是否在线
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IClientSender">
            <summary>
            客户端发送接口
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IClientSender.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            异步组合发送数据。
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="transferBytes">组合数据</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="T:TouchSocket.Sockets.IIdRequestInfoSender">
            <summary>
            定义了一个接口，用于异步发送标识符和请求信息
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IIdRequestInfoSender.SendAsync(System.String,TouchSocket.Core.IRequestInfo)">
            <summary>
            异步发送指定标识符和请求信息的方法
            </summary>
            <param name="id">要发送的标识符</param>
            <param name="requestInfo">请求信息对象，包含发送的具体内容</param>
            <returns>返回一个任务，表示异步操作的完成</returns>
        </member>
        <member name="T:TouchSocket.Sockets.IIdSender">
            <summary>
            定义了一个接口，用于向特定客户端发送数据
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IIdSender.SendAsync(System.String,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步向对应Id的客户端发送数据
            </summary>
            <param name="id">目标客户端的唯一标识符</param>
            <param name="memory">要发送的数据，以字节形式存储在内存中</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">如果目标客户端未连接，则抛出此异常</exception>
            <exception cref="T:TouchSocket.Sockets.ClientNotFindException">如果无法根据Id找到对应的客户端，则抛出此异常</exception>
            <exception cref="T:System.Exception">如果发生其他异常情况</exception>
        </member>
        <member name="T:TouchSocket.Sockets.IRequestInfoSender">
            <summary>
            定义异步请求信息发送器的接口。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IRequestInfoSender.SendAsync(TouchSocket.Core.IRequestInfo)">
            <summary>
            异步发送数据。
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="requestInfo">解析对象</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="T:TouchSocket.Sockets.ISender">
            <summary>
            具有发送功能的接口
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ISender.SendAsync(System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据。
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="memory">要发送的数据，以字节的只读内存形式提供。</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="T:TouchSocket.Sockets.IUdpClientSender">
            <summary>
            具有Udp终结点的发送
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IUdpClientSender.SendAsync(System.Net.EndPoint,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            异步组合发送数据。
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="endPoint">远程终结点</param>
            <param name="transferBytes">组合数据</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="M:TouchSocket.Sockets.IUdpClientSender.SendAsync(System.Net.EndPoint,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步组合发送数据。
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="endPoint">远程终结点</param>
            <param name="memory">只读内存块，包含待发送的数据</param>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>一个表示异步操作的Task对象</returns>
        </member>
        <member name="T:TouchSocket.Sockets.IUdpRequestInfoSender">
            <summary>
            定义UDP请求信息发送接口。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IUdpRequestInfoSender.SendAsync(System.Net.EndPoint,TouchSocket.Core.IRequestInfo)">
            <summary>
            异步发送数据。
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="endPoint">发送数据的目标端点。</param>
            <param name="requestInfo">要发送的请求信息，包含具体的请求数据和元信息。</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <remarks>
            此方法为异步非阻塞方式，调用后立即返回，不保证数据发送成功。
            </remarks>
        </member>
        <member name="T:TouchSocket.Sockets.IServiceBase">
            <summary>
            服务器接口
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IServiceBase.ServerName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IServiceBase.ServerState">
            <summary>
            服务器状态
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IServiceBase.StartAsync">
            <summary>
            异步启动
            </summary>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TouchSocket.Sockets.IServiceBase.StopAsync">
            <summary>
            异步停止
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:TouchSocket.Sockets.ISessionClient">
            <summary>
            定义会话客户端接口，继承自IClient, IIdClient, IClosableClient接口
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpClient">
            <summary>
            定义了一个接口，该接口继承了多个与TCP客户端相关的接口，用于统一和扩展TCP客户端的功能。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpClient.Connected">
            <summary>
            连接事件处理程序，用于处理与 ITcpClient 接口相关的连接事件
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpClient.Connecting">
            <summary>
            准备连接的时候
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpClient.Closed">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpClient.Closing">
            <summary>
            即将断开连接(仅主动断开时有效)。
            <para>
            </para>
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpClient.Received">
            <summary>
            接收到数据
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpConnectableClient">
            <summary>
            定义了ITcpConnectableClient接口，该接口继承自IConnectableClient接口，
            用于特化基于TCP协议的客户端操作。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpConnectableClient.RemoteIPHost">
            <summary>
            获取远程主机信息。
            </summary>
            <value>
            远程IP主机信息。
            </value>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpListenableClient">
            <summary>
            定义一个接口，用于支持TCP监听的客户端操作。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpListenableClient.Service">
            <summary>
            包含此辅助类的主服务器类
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpListenableClient.ServiceIP">
            <summary>
            接收此客户端的服务器IP地址
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpListenableClient.ServicePort">
            <summary>
            接收此客户端的服务器端口
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpListenableClient.ListenOption">
            <summary>
            监听配置。
            <para>
            注意：一般情况下不要随意修改该值。
            </para>
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpService">
            <summary>
            定义了ITcpService接口，该接口继承自泛型版本的ITcpService接口，其中泛型参数为TcpSessionClient。
            这个接口的存在是为了提供一种约束或模板，用于指导实现者如何构建TCP服务。
            它规定了TCP服务的基本功能和行为，但不关心这些功能的具体实现细节。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpServiceBase">
            <summary>
            定义了基于TCP协议的服务基础接口。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpServiceBase.Monitors">
            <summary>
            网络监听集合
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpServiceBase.AddListen(TouchSocket.Sockets.TcpListenOption)">
            <summary>
            添加一个地址监听。支持在服务器运行过程中动态添加。
            </summary>
            <param name="options">监听选项，包含地址和端口等信息。</param>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpServiceBase.RemoveListen(TouchSocket.Sockets.TcpNetworkMonitor)">
            <summary>
            移除一个地址监听。支持在服务器运行过程中动态移除。
            </summary>
            <param name="monitor">要移除的监听器。</param>
            <returns>返回是否已成功移除。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpServiceBase`1">
            <summary>
            定义了ITcpServiceBase接口，它是连接服务的基接口，专门处理TCP服务。
            该接口继承自<see cref="T:TouchSocket.Sockets.IConnectableService`1"/>和ITcpServiceBase，约束TClient必须实现ITcpListenableClient, IClient, IIdClient接口。
            </summary>
            <typeparam name="TClient">客户端类型参数，必须实现ITcpListenableClient, IClient, IIdClient接口。</typeparam>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpService`1">
            <summary>
            定义了一个泛型接口 ITcpService{TClient}，用于处理 TCP 服务的核心功能。
            </summary>
            <typeparam name="TClient">客户端会话类型，必须实现 ITcpSessionClient 接口。</typeparam>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpService`1.Connected">
            <summary>
            用户连接完成时的事件处理程序
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpService`1.Connecting">
            <summary>
            当有用户连接时触发的事件
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpService`1.Closed">
            <summary>
            用户断开连接事件的事件处理程序
            </summary>
            <remarks>
            此属性用于获取或设置一个事件处理程序，该处理程序在用户断开连接时被调用
            </remarks>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpService`1.Closing">
            <summary>
            即将断开连接(仅主动断开时有效)。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpSession">
            <summary>
            定义了一个ITcpSession接口，该接口继承自IClient, IResolverConfigObject, IOnlineClient, IClosableClient等多个接口。
            该接口的目的是为TCP会话提供一组标准的方法和属性，以实现TCP会话的创建、管理和关闭等功能。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpSession.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpSession.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpSession.MainSocket">
            <summary>
            主通信器
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpSession.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpSession.UseSsl">
            <summary>
            使用Ssl加密
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpSessionClient">
            <summary>
            定义 ITcpSessionClient 接口，继承自多个接口，以支持 TCP 会话客户端的功能。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpSessionClient.Closed">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITcpSessionClient.Closing">
            <summary>
            即将断开连接(仅主动断开时有效)。
            <para>
            此事件标识在与 <see cref="T:TouchSocket.Sockets.ITcpSessionClient"/> 的连接即将主动断开时发生的事件。提供此事件是为了允许执行断开连接前的清理操作。
            </para>
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IUdpSession">
            <summary>
            定义一个UDP会话接口，该接口继承自多个与UDP通信相关的接口。
            整合了UDP会话的基础功能、客户端发送功能、UDP客户端发送特性和接收客户端特性。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IUdpSession.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IUdpSession.Received">
            <summary>
            收到UDP数据包时触发的事件处理程序
            </summary>
            <remarks>
            该属性用于处理接收到的UDP数据包。当有数据包到达时，会调用此事件处理程序。
            实现 <see cref="T:TouchSocket.Sockets.IUdpSession"/> 接口的实例将提供处理收到的数据包的方法。
            </remarks>
        </member>
        <member name="T:TouchSocket.Sockets.IUdpSessionBase">
            <summary>
            定义了一个基于UDP的会话接口，该接口继承自通用服务接口IServiceBase和客户端接口IClient。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpClientBase">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.ISocketClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.SocketClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TcpClientSlim">
            <summary>
            轻量级Tcp客户端
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpDisconnectedPlugin`1">
            <summary>
            ITcpDisconnectedPlugin
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpDisconnectedPlugin">
            <summary>
            ITcpDisconnectedPlugin
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpDisconnectingPlugin`1">
            <summary>
            ITcpDisconnectingPlugin
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpDisconnectingPlugin">
            <summary>
            ITcpDisconnectingPlugin
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.DisconnectEventArgs">
            <summary>
            DisconnectEventArgs
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.CheckClearPlugin`1">
            <summary>
            检查清理连接插件。服务器与客户端均适用。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.CheckClearPlugin`1.#ctor(TouchSocket.Core.ILog)">
            <summary>
            检查清理连接插件。服务器与客户端均适用。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.CheckClearPlugin`1.CheckClearType">
            <summary>
            清理统计类型。默认为：<see cref="F:TouchSocket.Sockets.CheckClearType.All"/>。当设置为<see cref="F:TouchSocket.Sockets.CheckClearType.OnlySend"/>时，
            则只检验发送方向是否有数据流动。没有的话则会断开连接。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.CheckClearPlugin`1.OnClose">
            <summary>
            当因为超出时间限定而关闭。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.CheckClearPlugin`1.Tick">
            <summary>
            获取或设置清理无数据交互的Client，默认60秒。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.CheckClearPlugin`1.SetCheckClearType(TouchSocket.Sockets.CheckClearType)">
            <summary>
            设置清理统计类型。此方法允许指定在何种情况下应清理统计信息。
            默认情况下，清理类型设置为<see cref="F:TouchSocket.Sockets.CheckClearType.All"/>，表示所有情况都进行清理。
            如果设置为<see cref="F:TouchSocket.Sockets.CheckClearType.OnlySend"/>，则仅检验发送方向是否有数据流动，
            若没有数据流动，则断开连接。
            </summary>
            <param name="clearType">要设置的清理统计类型。</param>
            <returns>返回当前<see cref="T:TouchSocket.Sockets.CheckClearPlugin`1"/>实例，以支持链式调用。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.CheckClearPlugin`1.SetOnClose(System.Action{`0,TouchSocket.Sockets.CheckClearType})">
            <summary>
            设置在超出时间限定而关闭时的回调操作。
            </summary>
            <param name="action">一个Action委托，包含客户端对象和检查清除类型作为参数，在关闭操作执行时会被调用。</param>
            <returns>返回当前的CheckClearPlugin实例，以支持链式调用。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.CheckClearPlugin`1.SetTick(System.TimeSpan)">
            <summary>
            设置清理无数据交互的Client，默认60秒。
            </summary>
            <param name="timeSpan">清理无数据交互的Client的时间间隔</param>
            <returns>返回配置后的实例，支持链式调用</returns>
        </member>
        <member name="M:TouchSocket.Sockets.CheckClearPlugin`1.Loaded(TouchSocket.Core.IPluginManager)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.HeartbeatPlugin">
            <summary>
            心跳插件的基类，定义了心跳插件的基本结构和功能。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.HeartbeatPlugin.MaxFailCount">
            <summary>
            最大失败次数，默认3。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.HeartbeatPlugin.Tick">
            <summary>
            心跳间隔。默认3秒。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IIdChangedPlugin">
            <summary>
            定义了一个插件接口IIdChangedPlugin，继承自IPlugin。
            该接口用于通知实现该接口的插件，某个ID发生了更改。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IIdChangedPlugin.OnIdChanged(TouchSocket.Sockets.IClient,TouchSocket.Sockets.IdChangedEventArgs)">
            <summary>
            当客户端ID发生变化时触发的异步事件处理程序。
            </summary>
            <param name="client">发生ID变更的客户端对象。</param>
            <param name="e">包含ID变更详细信息的事件参数。</param>
            <remarks>
            该方法用于异步处理客户端ID的变更，当客户端的ID发生变化时会触发此事件。
            通过此事件，系统可以相应地更新与客户端相关联的数据或状态。
            </remarks>
        </member>
        <member name="T:TouchSocket.Sockets.IServerStartedPlugin">
            <summary>
            定义了一个插件接口IServerStartedPlugin，该接口继承自IPlugin。
            该接口的目的是为那些需要在服务器启动时执行特定操作的插件提供一个标识。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IServerStartedPlugin.OnServerStarted(TouchSocket.Sockets.IServiceBase,TouchSocket.Sockets.ServiceStateEventArgs)">
            <summary>
            当服务器执行<see cref="M:TouchSocket.Sockets.IServiceBase.StartAsync"/>方法后时。
            <para>
            注意：此处的事件并不意味着服务器已经成功启动，具体的启动状态请参考<see cref="P:TouchSocket.Sockets.ServiceStateEventArgs.ServerState"/>.
            </para>
            </summary>
            <param name="sender">触发事件的服务对象。</param>
            <param name="e">包含服务器状态信息的事件参数对象。</param>
            <returns>一个Task对象，标识异步操作的完成。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.IServerStopedPlugin">
            <summary>
            定义了一个接口，用于标识和处理服务器停止时的插件行为。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IServerStopedPlugin.OnServerStoped(TouchSocket.Sockets.IServiceBase,TouchSocket.Sockets.ServiceStateEventArgs)">
            <summary>
            当服务器调用<see cref="M:TouchSocket.Sockets.IServiceBase.StopAsync"/>或者<see cref="M:System.IDisposable.Dispose"/>时
            </summary>
            <param name="sender">发送停止或释放操作的服务对象</param>
            <param name="e">包含停止或释放操作相关信息的事件参数</param>
            <returns>一个Task对象，表示异步操作的完成</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpClosedPlugin">
            <summary>
            定义了一个ITcpClosedPlugin接口，该接口继承自IPlugin接口。
            这个接口的目的是为插件提供一种标识，表明该插件支持处理TCP连接关闭时的操作。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpClosedPlugin.OnTcpClosed(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            在会话断开后触发。
            </summary>
            <param name="client">断开连接的TCP会话客户端。</param>
            <param name="e">会话断开事件的参数。</param>
            <returns>一个等待完成的任务。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpClosingPlugin">
            <summary>
            定义了即将断开TCP连接时的插件接口。
            该接口仅在主动断开连接时有效。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpClosingPlugin.OnTcpClosing(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            处理TCP连接即将断开的情况（仅在主动断开连接时有效）。
            此方法主要用于执行断开连接前的清理工作。
            </summary>
            <param name="client">发起断开连接请求的客户端会话对象。</param>
            <param name="e">断开连接事件的相关信息。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpConnectedPlugin">
            <summary>
            定义了ITcpConnectedPlugin接口，它是通过TCP连接的插件应实现的接口。
            这个接口扩展了IPlugin接口，增加了与TCP连接相关的功能和要求。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpConnectedPlugin.OnTcpConnected(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            客户端连接成功后触发
            </summary>
            <param name="client">建立连接的客户端会话</param>
            <param name="e">连接事件参数</param>
            <returns>一个Task对象，标识异步操作</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpConnectingPlugin">
            <summary>
            定义了基于TCP连接前的插件接口，继承自IPlugin接口。
            该接口提供了特定于TCP连接操作的额外功能和要求。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpConnectingPlugin.OnTcpConnecting(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            在即将完成连接时触发。
            </summary>
            <param name="client">正在连接的客户端会话对象。</param>
            <param name="e">包含连接信息的事件参数。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpReceivedPlugin">
            <summary>
            定义了一个ITcpReceivedPlugin接口，该接口继承自IPlugin接口。
            用于处理TCP接收数据的插件，提供了一种扩展机制，允许开发人员实现自定义的数据处理逻辑。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpReceivedPlugin.OnTcpReceived(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            在收到数据时触发
            </summary>
            <param name="client">触发事件的TCP会话客户端</param>
            <param name="e">包含接收到的数据和相关状态的事件参数</param>
            <returns>一个Task对象，表示异步操作的结果</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpReceivingPlugin">
            <summary>
            定义了一个接口，用于通过TCP进行接收操作的插件。
            继承自IPlugin接口，表示这是一个插件的一部分，专注于接收TCP数据。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpReceivingPlugin.OnTcpReceiving(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ByteBlockEventArgs)">
            <summary>
            在刚收到数据时触发，即在适配器之前。
            该方法主要用于执行接收数据前的预处理操作。
            </summary>
            <param name="client">发送数据的客户端会话对象。</param>
            <param name="e">包含接收数据事件相关的参数。</param>
            <returns>一个Task对象，代表异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ITcpSendingPlugin">
            <summary>
            定义了一个ITcpSendingPlugin接口，该接口继承自IPlugin接口。
            用于标识插件在系统中负责TCP发送功能。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITcpSendingPlugin.OnTcpSending(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.SendingEventArgs)">
            <summary>
            当即将发送数据时，调用该方法在适配器之后，接下来即会发送数据。
            此方法主要用于在数据发送前执行额外的操作，例如日志记录或数据修改。
            </summary>
            <param name="client">表示与客户端的TCP会话。</param>
            <param name="e">包含发送数据的事件参数。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.IUdpReceivedPlugin">
            <summary>
            定义了一个UDP接收插件接口，该接口继承自IPlugin。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IUdpReceivedPlugin.OnUdpReceived(TouchSocket.Sockets.IUdpSessionBase,TouchSocket.Sockets.UdpReceivedDataEventArgs)">
            <summary>
            在收到数据时触发
            </summary>
            <param name="client">发送数据的客户端会话</param>
            <param name="e">包含接收数据的信息的事件参数</param>
            <returns>一个等待完成的异步任务</returns>
        </member>
        <member name="T:TouchSocket.Sockets.IUdpSendingPlugin">
            <summary>
            定义了一个UDP发送插件接口，继承自IPlugin接口。
            该接口为实现UDP数据发送功能的插件提供了一套标准的方法和属性。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IUdpSendingPlugin.OnUdpSending(TouchSocket.Sockets.IUdpSessionBase,TouchSocket.Sockets.UdpSendingEventArgs)">
            <summary>
            当即将发送数据时，调用该方法在适配器之后，接下来即会发送数据。
            此方法用于在数据发送前执行额外的处理或检查。
            </summary>
            <param name="client">正在与之通信的UDP会话客户端。</param>
            <param name="e">包含发送事件相关数据的参数对象。</param>
            <returns>一个Task对象，代表异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ReconnectionPlugin`1">
            <summary>
            重连插件
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.#ctor">
            <summary>
            重连插件
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ReconnectionPlugin`1.ActionForCheck">
            <summary>
            每个周期可执行的委托。用于检验客户端活性。返回true表示存活，返回
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ReconnectionPlugin`1.ActionForConnect">
            <summary>
            ActionForConnect
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ReconnectionPlugin`1.Tick">
            <summary>
            检验时间间隔
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.SetActionForCheck(System.Func{`0,System.Int32,System.Threading.Tasks.Task{System.Nullable{System.Boolean}}})">
            <summary>
            设置一个周期性执行的委托，用于检查客户端状态。
            </summary>
            <param name="actionForCheck">一个委托，接受客户端实例和周期次数作为参数，返回一个任务，该任务结果为布尔值。</param>
            <returns>返回当前ReconnectionPlugin实例，以便链式调用。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.SetActionForCheck(System.Func{`0,System.Int32,System.Nullable{System.Boolean}})">
            <summary>
            设置每个周期执行的委托。用于判断客户端是否存活。如果返回True，表示客户端存活。返回False，表示客户端失活，需要立即重连。返回null，则表示跳过此次检查。
            </summary>
            <param name="actionForCheck">一个委托，接受一个客户端实例和一个整型参数，返回一个可空的布尔值。</param>
            <returns>返回当前ReconnectionPlugin实例，支持链式调用。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.SetConnectAction(System.Func{`0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            设置连接动作
            </summary>
            <param name="tryConnect">一个异步方法，尝试建立连接，并返回一个布尔值指示连接是否成功</param>
            <returns>返回当前实例，以便支持链式调用</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.SetConnectAction(System.TimeSpan,System.Func{`0,System.Int32,System.Exception,System.Boolean},System.Action{`0})">
            <summary>
            设置连接动作
            </summary>
            <param name="sleepTime">失败时间隔时间</param>
            <param name="failCallback">失败时回调（参数依次为：客户端，本轮尝试重连次数，异常信息）。如果回调为null或者返回false，则终止尝试下次连接。</param>
            <param name="successCallback">成功连接时回调</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.SetConnectAction(System.Int32,System.Boolean,System.Int32,System.Action{`0})">
            <summary>
            设置连接动作
            </summary>
            <param name="tryCount">尝试重连次数，设为-1时则永远尝试连接</param>
            <param name="printLog">是否输出日志。</param>
            <param name="sleepTime">失败时，停留时间</param>
            <param name="successCallback">成功回调函数</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.SetConnectAction(System.Func{`0,System.Boolean})">
            <summary>
            设置连接动作
            </summary>
            <param name="tryConnect">一个函数，用于尝试连接操作 参数为客户端实例，返回布尔值表示连接是否成功</param>
            <returns>返回当前实例，以便链式调用</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.UsePolling(System.TimeSpan)">
            <summary>
            使用轮询保持活性。
            </summary>
            <param name="tick">轮询的时间间隔。</param>
            <returns>返回当前的ReconnectionPlugin实例，用于链式调用。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.Loaded(TouchSocket.Core.IPluginManager)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ReconnectionPlugin`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TcpCommandLinePlugin">
            <summary>
            Tcp命令行插件。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCommandLinePlugin.#ctor(TouchSocket.Core.ILog)">
            <summary>
            Tcp命令行插件构造函数。
            该插件初始化时，会扫描自身类定义的所有命令方法，并将它们注册到插件内部的映射中。
            这允许插件在接收到命令时，能够根据命令名称找到并执行相应的处理方法。
            </summary>
            <param name="logger">用于日志记录的接口。确保外部提供的logger不为null，否则将抛出ArgumentNullException异常。</param>
            <exception cref="T:System.ArgumentNullException">如果logger参数为null，则抛出此异常。</exception>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCommandLinePlugin.Converter">
            <summary>
            字符串转换器，默认支持基础类型和Json。可以自定义。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.TcpCommandLinePlugin.ReturnException">
            <summary>
            是否返回执行异常。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCommandLinePlugin.NoReturnException">
            <summary>
            设置异常返回策略，当有执行异常时不返回异常。
            </summary>
            <returns>返回当前的TcpCommandLinePlugin实例，以支持链式调用。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.TcpCommandLinePlugin.OnTcpReceived(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.InternalUdpReceiver">
            <summary>
            Receiver
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.InternalUdpReceiver.#ctor(TouchSocket.Sockets.IReceiverClient{TouchSocket.Sockets.IUdpReceiverResult})">
            <summary>
            Receiver
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:TouchSocket.Sockets.InternalUdpReceiver.ReadAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.InternalUdpReceiver.InputReceive(System.Net.EndPoint,TouchSocket.Core.ByteBlock,TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.InternalUdpReceiver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.IReceiver`1">
            <summary>
            定义了接收操作结果的接收者接口。
            此接口继承自 IDisposableObject，表明接收者对象应该支持释放操作。
            </summary>
            <typeparam name="TResult">接收结果的类型，必须继承自<see cref="T:TouchSocket.Sockets.IReceiverResult"/>。</typeparam>
        </member>
        <member name="P:TouchSocket.Sockets.IReceiver`1.CacheMode">
            <summary>
            获取或设置是否启用缓存模式。
            <para>
            设为<see langword="true"/>即启用缓存模式。在缓存模式下，<see cref="P:TouchSocket.Sockets.IReceiverResult.ByteBlock"/>的数据如果<see cref="P:TouchSocket.Core.ByteBlock.CanReadLength"/>大于0。
            即会缓存未消费的数据。
            </para>
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IReceiver`1.MaxCacheSize">
            <summary>
            获取或设置最大缓存大小。
            这决定了缓存能够存储的最大数据量，以字节为单位。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IReceiver`1.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            异步读取操作。
            </summary>
            <param name="token">用于取消异步读取操作的取消令牌。</param>
            <returns>一个<see cref="T:System.Threading.Tasks.ValueTask`1"/>，其结果是异步读取的数据。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.IReceiverClient`1">
            <summary>
            定义了一个泛型接口，用于创建和管理同步数据接收器客户端
            </summary>
            <typeparam name="TResult">接收结果的类型，必须继承自<see cref="T:TouchSocket.Sockets.IReceiverResult"/>接口</typeparam>
        </member>
        <member name="M:TouchSocket.Sockets.IReceiverClient`1.CreateReceiver">
            <summary>
            获取一个同步数据接收器
            </summary>
            <returns>返回一个IReceiver接口实例，用于接收类型为TResult的数据</returns>
        </member>
        <member name="M:TouchSocket.Sockets.IReceiverClient`1.ClearReceiver">
            <summary>
            移除同步数据接收器
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IReceiverResult">
            <summary>
            接收结果接口，定义了接收操作完成后所需满足的方法和属性
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IReceiverResult.ByteBlock">
            <summary>
            获取接收到的数据字节块
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IReceiverResult.RequestInfo">
            <summary>
            获取与接收数据相关的请求信息
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IReceiverResult.IsCompleted">
            <summary>
            获取接收操作是否已完成的标志
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IReceiverResult.Message">
            <summary>
            获取接收操作相关的消息字符串，例如错误信息或完成状态描述
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IUdpReceiverResult">
            <summary>
            表示UDP接收结果的接口，继承自通用的接收结果接口。
            该接口提供了特定于UDP接收操作的功能。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IUdpReceiverResult.EndPoint">
            <summary>
            获取UDP端点信息，该属性标识了数据报接收的远端点。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.UdpReceiverResult">
            <summary>
            ReceiverResult
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.IWaitingClient`2">
            <summary>
            定义了等待客户端的接口，该客户端既支持发送操作，又能在异步操作中等待结果。
            </summary>
            <typeparam name="TClient">客户端类型参数，该客户端既是一个接收者，也是一个发送者。</typeparam>
            <typeparam name="TResult">结果类型参数，表示接收者客户端处理操作后返回的结果。</typeparam>
        </member>
        <member name="P:TouchSocket.Sockets.IWaitingClient`2.WaitingOptions">
            <summary>
            等待设置。
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.IWaitingClient`2.Client">
            <summary>
            客户端终端
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.IWaitingClient`2.SendThenResponseAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="memory">要发送的数据，使用内存表示</param>
            <param name="token">取消令箭，用于取消操作</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回的数据，类型为ResponsedData</returns>
        </member>
        <member name="M:TouchSocket.Sockets.IWaitingClient`2.SendThenResponseAsync(TouchSocket.Core.IRequestInfo,System.Threading.CancellationToken)">
            <summary>
            异步发送请求并等待响应
            </summary>
            <param name="requestInfo">请求信息，包含发送请求所需的所有细节</param>
            <param name="token">用于取消操作的取消令牌</param>
            <returns>返回一个任务，该任务的结果是服务器的响应数据</returns>
        </member>
        <member name="T:TouchSocket.Sockets.ResponsedData">
            <summary>
            响应数据。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ResponsedData.#ctor(System.Byte[],TouchSocket.Core.IRequestInfo)">
            <summary>
            构造函数
            </summary>
            <param name="data">响应的数据</param>
            <param name="requestInfo">请求信息</param>
        </member>
        <member name="P:TouchSocket.Sockets.ResponsedData.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ResponsedData.RequestInfo">
            <summary>
            RequestInfo
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.WaitingClientExtension">
            <summary>
            定义一个静态扩展类，用于处理等待客户端操作的扩展方法
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.CreateWaitingClient``2(``0,TouchSocket.Sockets.WaitingOptions)">
            <summary>
            创建可等待的客户端。
            </summary>
            <typeparam name="TClient">客户端类型，必须同时实现<see cref="T:TouchSocket.Sockets.IReceiverClient`1"/>和ISender接口。</typeparam>
            <typeparam name="TResult">接收结果类型，必须继承自IReceiverResult。</typeparam>
            <param name="client">要转换为可等待客户端的实例。</param>
            <param name="waitingOptions">等待选项，用于控制等待行为。</param>
            <returns>返回一个新的WaitingClient实例，该实例提供对原客户端的封装，并支持等待操作。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.CreateWaitingClient(TouchSocket.Sockets.IUdpSession,TouchSocket.Sockets.WaitingOptions)">
            <summary>
            为 IUdpSession 类型的客户端创建一个等待客户端。
            </summary>
            <param name="client">IUdpSession 类型的客户端实例。</param>
            <param name="waitingOptions">等待选项，用于配置等待客户端的行为。</param>
            <returns>返回一个实现了<see cref="T:TouchSocket.Sockets.IWaitingClient`2"/>的等待客户端实例。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.CreateWaitingClient(TouchSocket.Sockets.IUdpSession)">
            <summary>
            创建一个等待客户端，用于接收UDP数据。
            </summary>
            <param name="client">IUdpSession 实例。</param>
            <returns>返回一个 IWaitingClient 实例，可用于接收 UDP 消息。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.CreateWaitingClient(TouchSocket.Sockets.ITcpClient,TouchSocket.Sockets.WaitingOptions)">
            <summary>
            为 ITcpClient 类型的客户端创建一个等待客户端。
            </summary>
            <param name="client">ITcpClient 类型的客户端实例。</param>
            <param name="waitingOptions">等待选项，用于配置等待客户端的行为。</param>
            <returns>返回一个实现了<see cref="T:TouchSocket.Sockets.IWaitingClient`2"/>的等待客户端实例。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.CreateWaitingClient(TouchSocket.Sockets.ITcpClient)">
            <summary>
            为指定的 TCP 客户端创建一个等待客户端实例。
            </summary>
            <param name="client">要为其创建等待客户端的 ITcpClient 实例。</param>
            <returns>返回创建的<see cref="T:TouchSocket.Sockets.IWaitingClient`2"/>实例。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.CreateWaitingClient(TouchSocket.Sockets.ITcpSessionClient,TouchSocket.Sockets.WaitingOptions)">
            <summary>
            为 ITcpSessionClient 类型的客户端创建一个等待客户端。
            </summary>
            <param name="client">ITcpSessionClient 类型的客户端实例。</param>
            <param name="waitingOptions">等待选项，用于配置等待客户端的行为。</param>
            <returns>返回一个实现了<see cref="T:TouchSocket.Sockets.IWaitingClient`2"/>的等待客户端实例。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.CreateWaitingClient(TouchSocket.Sockets.ITcpSessionClient)">
            <summary>
            为指定的 ITcpSessionClient 实例创建一个等待客户端。
            </summary>
            <param name="client">要创建等待客户端的 ITcpSessionClient 实例。</param>
            <returns>返回一个IWaitingClient实例。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenResponseAsync``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.String,System.Threading.CancellationToken)">
            <summary>
            发送数据并等待
            </summary>
            <param name="client">等待客户端接口</param>
            <param name="msg">要发送的消息</param>
            <param name="token">取消令箭</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenResponseAsync``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.String,System.Int32)">
            <summary>
            发送数据并等待
            </summary>
            <param name="client">等待客户端接口</param>
            <param name="msg">要发送的消息</param>
            <param name="millisecondsTimeout">超时时间，默认为5000毫秒</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接时抛出的异常</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长时抛出的异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回从客户端接收到的数据</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenResponseAsync``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            发送数据并等待响应
            </summary>
            <typeparam name="TClient">客户端类型，需实现<see cref="T:TouchSocket.Sockets.IReceiverClient`1"/>和ISender接口</typeparam>
            <typeparam name="TResult">响应结果类型，需实现IReceiverResult接口</typeparam>
            <param name="client">用于发送和接收的客户端实例</param>
            <param name="memory">要发送的数据，以只读内存块形式</param>
            <param name="millisecondsTimeout">等待响应的超时时间（毫秒），默认为5000毫秒</param>
            <returns>返回接收到的响应数据</returns>
            <exception cref="T:System.TimeoutException">如果在指定的超时时间内没有收到响应，则抛出TimeoutException异常</exception>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenResponseAsync``2(TouchSocket.Sockets.IWaitingClient{``0,``1},TouchSocket.Core.IRequestInfo,System.Int32)">
            <summary>
            异步发送请求并等待响应的扩展方法。
            </summary>
            <typeparam name="TClient">客户端类型，必须同时实现<see cref="T:TouchSocket.Sockets.IReceiverClient`1"/>、<see cref="T:TouchSocket.Sockets.ISender"/>和<see cref="T:TouchSocket.Sockets.IRequestInfoSender"/>接口。</typeparam>
            <typeparam name="TResult">接收结果类型，必须实现IReceiverResult接口。</typeparam>
            <param name="client">等待客户端，实现了<see cref="T:TouchSocket.Sockets.IWaitingClient`2"/>接口。</param>
            <param name="requestInfo">请求信息，用于发送。</param>
            <param name="millisecondsTimeout">操作的超时时间（以毫秒为单位），默认为5000毫秒。</param>
            <returns>返回一个异步任务，结果为响应数据。</returns>
            <exception cref="T:System.TimeoutException">当操作超时时抛出。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenReturnAsync``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.String,System.Int32)">
            <summary>
            异步发送消息并返回结果
            </summary>
            <param name="client">发送客户端</param>
            <param name="msg">待发送的消息</param>
            <param name="millisecondsTimeout">超时时间，单位为毫秒，默认为5000毫秒</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenReturnAsync``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            异步发送数据并返回响应，如果超时则抛出异常。
            </summary>
            <param name="client">实现IWaitSender接口的客户端对象，用于发送数据。</param>
            <param name="memory">待发送的数据，以<see cref="T:System.ReadOnlyMemory`1"/>的形式指定。</param>
            <param name="millisecondsTimeout">操作超时的时间，以毫秒为单位，默认为5000毫秒（5秒）。</param>
            <returns>返回发送操作的响应数据，以byte数组形式。</returns>
            <exception cref="T:System.TimeoutException">当操作超时时，此异常被抛出。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenReturnAsync``2(TouchSocket.Sockets.IWaitingClient{``0,``1},TouchSocket.Core.IRequestInfo,System.Int32)">
            <summary>
            异步发送请求并返回响应数据
            </summary>
            <typeparam name="TClient">客户端类型</typeparam>
            <typeparam name="TResult">接收结果类型，必须实现IReceiverResult接口</typeparam>
            <param name="client">等待客户端实例，提供发送和接收功能</param>
            <param name="requestInfo">请求信息，包含要发送的数据</param>
            <param name="millisecondsTimeout">操作超时时间（以毫秒为单位），默认为5000毫秒</param>
            <returns>返回一个任务，该任务结果是一个字节数组，包含响应数据</returns>
            <exception cref="T:System.TimeoutException">当操作超时时，抛出此异常</exception>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenReturnAsync``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            在给定的客户端上异步发送数据并返回响应数据。
            </summary>
            <typeparam name="TClient">发送和请求信息的客户端类型。</typeparam>
            <typeparam name="TResult">接收结果的类型。</typeparam>
            <param name="client">一个等待客户端对象。</param>
            <param name="memory">要发送的数据。</param>
            <param name="token">用于取消操作的取消令牌。</param>
            <returns>一个异步任务，该任务的结果是返回的响应数据。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenResponse``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            向服务器发送数据并等待接收响应。
            </summary>
            <typeparam name="TClient">客户端类型，必须同时实现<see cref="T:TouchSocket.Sockets.IReceiverClient`1"/>和ISender接口。</typeparam>
            <typeparam name="TResult">接收结果类型，必须实现IReceiverResult接口。</typeparam>
            <param name="client">实现等待客户端接口<see cref="T:TouchSocket.Sockets.IWaitingClient`2"/>的实例。</param>
            <param name="memory">要发送的数据，以只读内存形式提供。</param>
            <param name="token">用于取消操作的取消令牌。</param>
            <returns>包含操作结果的ResponsedData对象。</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenResponse``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.String,System.Threading.CancellationToken)">
            <summary>
            发送数据并等待
            </summary>
            <param name="client">等待客户端接口</param>
            <param name="msg">要发送的消息</param>
            <param name="token">取消令箭</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenResponse``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.String,System.Int32)">
            <summary>
            发送数据并等待
            </summary>
            <param name="client">等待客户端接口，用于发送数据并等待响应</param>
            <param name="msg">要发送的消息</param>
            <param name="millisecondsTimeout">等待响应的超时时间（以毫秒为单位），默认为5000毫秒</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenResponse``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            发送数据并等待响应。
            </summary>
            <typeparam name="TClient">客户端类型，必须同时实现<see cref="T:TouchSocket.Sockets.IReceiverClient`1"/>和ISender接口。</typeparam>
            <typeparam name="TResult">接收结果类型，必须实现IReceiverResult接口。</typeparam>
            <param name="client">等待客户端实例，用于发送数据并等待响应。</param>
            <param name="memory">要发送的数据，以只读内存形式提供。</param>
            <param name="millisecondsTimeout">等待响应的超时时间，以毫秒为单位，默认为5000毫秒（5秒）。</param>
            <returns>返回从服务端接收到的响应数据。</returns>
            <exception cref="T:System.TimeoutException">如果在指定的超时时间内没有收到响应，则抛出TimeoutException异常。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenReturn``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.String,System.Int32)">
            <summary>
            发送字节流
            </summary>
            <param name="client">要发送数据的客户端</param>
            <param name="msg">要发送的消息</param>
            <param name="millisecondsTimeout">等待返回数据的超时时间，默认为5000毫秒</param>
            <exception cref="T:TouchSocket.Sockets.ClientNotConnectedException">客户端没有连接</exception>
            <exception cref="T:TouchSocket.Core.OverlengthException">发送数据超长</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenReturn``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            使用指定的超时时间通过IWaitSender发送数据并返回响应。
            此方法通过创建一个带有超时时间的CancellationTokenSource来控制操作的超时。
            如果操作在指定的超时时间内完成，则返回操作的结果，否则抛出一个超时异常。
            </summary>
            <param name="client">实现IWaitSender接口的实例，用于发送数据并等待响应。</param>
            <param name="memory">只读字节内存，表示要发送的数据。</param>
            <param name="millisecondsTimeout">操作的超时时间，以毫秒为单位，默认为5000毫秒（5秒）。</param>
            <returns>操作成功时返回字节数组，包含响应数据。</returns>
            <exception cref="T:System.TimeoutException">当操作超时时，会抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.Sockets.WaitingClientExtension.SendThenReturn``2(TouchSocket.Sockets.IWaitingClient{``0,``1},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            向接收方发送数据后返回发送结果。
            此方法适用于需要同步发送数据并立即获取结果的场景。
            </summary>
            <param name="client">提供发送和接收功能的客户端对象。</param>
            <param name="memory">要发送的数据，以<see cref="T:System.ReadOnlyMemory`1"/>形式表示。</param>
            <param name="token">用于取消操作的取消令牌。</param>
            <typeparam name="TClient">客户端类型，必须实现<see cref="T:TouchSocket.Sockets.IReceiverClient`1"/>、<see cref="T:TouchSocket.Sockets.ISender"/>和<see cref="T:TouchSocket.Sockets.IRequestInfoSender"/>接口。</typeparam>
            <typeparam name="TResult">接收结果类型，必须实现<see cref="T:TouchSocket.Sockets.IReceiverResult"/>接口。</typeparam>
            <returns>返回发送后的结果数据，类型为<see cref="T:System.Byte"/>数组。</returns>
        </member>
        <member name="T:TouchSocket.Sockets.WaitingOptions">
            <summary>
            等待设置
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.WaitingOptions.RemoteIPHost">
            <summary>
            远程地址(仅在Udp模式下生效)
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.WaitingOptions.FilterFunc">
            <summary>
            筛选函数
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.InternalClientCollection`1.GetIds">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.InternalClientCollection`1.TryAdd(`0)">
            <summary>
            添加客户端
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.InternalClientCollection`1.TryGetClient(System.String,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.InternalClientCollection`1.TryRemoveClient(System.String,`0@)">
            <summary>
            移除对应客户端
            </summary>
            <param name="id"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.InternalReceiver">
            <summary>
            Receiver
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiver.#ctor(TouchSocket.Sockets.IReceiverClient{TouchSocket.Sockets.IReceiverResult})">
            <summary>
            Receiver
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiver.ReadAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiver.InputReceive(TouchSocket.Core.ByteBlock,TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.InternalReceiverResult">
            <summary>
            ReceiverResult
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiverResult.#ctor(System.Action)">
            <summary>
            ReceiverResult
            </summary>
            <param name="disAction"></param>
        </member>
        <member name="P:TouchSocket.Sockets.InternalReceiverResult.ByteBlock">
            <summary>
            字节块
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.InternalReceiverResult.RequestInfo">
            <summary>
            数据对象
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiverResult.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.CannotSendRequestInfo">
            <summary>
              查找类似 当前适配器为空或者不支持对象（IRequestInfo）发送。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.ClientNotConnected">
            <summary>
              查找类似 客户端没有连接。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.ClientNotFind">
            <summary>
              查找类似 没有找到Id为‘{0}’的客户端。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.ConnectedMaximum">
            <summary>
              查找类似 已连接的客户端数量已达到设定（{0}）最大值。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.DisposeClose">
            <summary>
              查找类似 调用Dispose主动断开。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.IdAlreadyExists">
            <summary>
              查找类似 Id为‘{0}’的客户端已存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.IncompleteDataTransmission">
            <summary>
              查找类似 发送数据不完全。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.RemoteDisconnects">
            <summary>
              查找类似 远程终端主动断开。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.SocketHaveToConnected">
            <summary>
              查找类似 新的Socket必须在连接状态。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.TimedoutWithoutAll">
            <summary>
              查找类似 超时无数据交互，主动断开连接。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.TimedoutWithoutReceiving">
            <summary>
              查找类似 超时无数据Receive交互，主动断开连接。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.TimedoutWithoutSending">
            <summary>
              查找类似 超时无数据Send交互，主动断开连接。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.UdpStopped">
            <summary>
              查找类似 Udp不在运行状态。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketResource.UnableToObtainEndpoint">
            <summary>
              查找类似 无法获取终结点。 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
