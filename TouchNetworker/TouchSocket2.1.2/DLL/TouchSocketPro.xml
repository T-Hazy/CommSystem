<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocketPro</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.Core.AuthorizedHelper">
            <summary>
            AuthorizedHelper
            </summary>
        </member>
        <member name="M:TouchSocket.Core.AuthorizedHelper.U32u4234u234u5u88ds8sd8hjjrs8djhc">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="T:TouchSocket.Core.Enterprise">
            <summary>
            企业版
            </summary>
        </member>
        <member name="P:TouchSocket.Core.Enterprise.LicenceKey">
            <summary>
            许可密钥
            </summary>
        </member>
        <member name="P:TouchSocket.Core.Enterprise.LicenceInfo">
            <summary>
            许可证信息
            </summary>
        </member>
        <member name="P:TouchSocket.Core.Enterprise.LicenceOwner">
            <summary>
            密钥归属
            </summary>
        </member>
        <member name="M:TouchSocket.Core.Enterprise.ForTest">
            <summary>
            请求测试企业版功能。
            <para>该方法在被调用后，会抛出可控异常，如果坚持使用企业版，请Try拦截即可。</para>
            <para>目前企业版功能暂时免费。并且在后续的使用中，只要您使用的是免费版本，则会一直免费。</para>
            <para>如果想再次使用，请结束进程，重新启动即可。</para>
            </summary>
            <exception cref="T:System.Exception">如果坚持使用企业版，请Try拦截即可。</exception>
        </member>
        <member name="T:TouchSocket.Core.EnterpriseEditionAttribute">
            <summary>
            标识为企业版功能
            </summary>
        </member>
        <member name="P:TouchSocket.Core.EnterpriseEditionAttribute.LicenceInfo">
            <summary>
            许可证信息
            </summary>
        </member>
        <member name="P:TouchSocket.Core.EnterpriseEditionAttribute.LicenceOwner">
            <summary>
            密钥归属
            </summary>
        </member>
        <member name="P:TouchSocket.Core.EnterpriseEditionAttribute.U32u4234u234u5u88ds8sd8hjjrs8djhc">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="M:TouchSocket.Core.EnterpriseEditionAttribute.Inspection">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="T:TouchSocket.Core.LicenceKeyInvalidException">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:TouchSocket.Core.LicenceKeyInvalidException.i">
            <summary>
            7ashd7ashd7ashdahsd77
            </summary>
        </member>
        <member name="M:TouchSocket.Core.LicenceKeyInvalidException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TouchSocket.Core.LicenceKeyInvalidException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TouchSocket.Core.LicenceKeyInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:TouchSocket.Core.T32u4234u234u5u88ds8sd8hjjrs8djhc">
            <summary>
            此u32u4234u234u5u88ds8sd8hjjrs8djhc
            </summary>
        </member>
        <member name="T:TouchSocket.Core.SocketProPluginManagerExtension">
            <summary>
            SocketProPluginManagerExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Core.SocketProPluginManagerExtension.UseTLV(TouchSocket.Core.IPluginManager)">
            <summary>
            使用TLV三元组格式。
            </summary>
            <param name="pluginManager"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketProResource">
            <summary>
            TouchSocketPro资源枚举
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketProResource.LicenceKeyInvalid">
            <summary>
            授权密钥无效，程序将在5秒后退出。请检查密钥，或者不使用企业版功能。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITLVDataFrame">
            <summary>
            ITLVDataFrame
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITLVDataFrame.Length">
            <summary>
            <see cref="P:TouchSocket.Sockets.ITLVDataFrame.Value"/>的有效长度
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITLVDataFrame.Tag">
            <summary>
            Tag标识
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITLVDataFrame.Value">
            <summary>
            有效载荷值
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITLVDataFrame.Build(TouchSocket.Core.FixedHeaderType,TouchSocket.Core.ByteBlock)">
            <summary>
            构建数据
            </summary>
            <param name="lengthType"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="T:TouchSocket.Sockets.TLVClientExtensions">
            <summary>
            TLVClientExtensions
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVClientExtensions.CloseWithTLV(TouchSocket.Sockets.ITcpSession,System.String)">
            <summary>
            使用TLV格式关闭TCP会话
            </summary>
            <param name="client">要关闭的TCP会话客户端</param>
            <param name="msg">关闭连接时可选的消息</param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVClientExtensions.CloseWithTLVAsync(TouchSocket.Sockets.ITcpSession,System.String)">
            <summary>
            发送TLV的Close报文，然后关闭当前客户端
            </summary>
            <param name="client"></param>
            <param name="msg"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVClientExtensions.PingWithTLV(TouchSocket.Sockets.ITcpSession,System.Int32)">
            <summary>
            发送Tag为Ping的报文，然后等待Pong回应。
            <para>当适配器不是<see cref="T:TouchSocket.Sockets.TLVDataHandlingAdapter"/>时，会抛出异常。</para>
            </summary>
            <param name="client"></param>
            <param name="millisecondsTimeout"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:TouchSocket.Sockets.TLVDataFrame">
            <summary>
            TLVDataFrame
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.CloseTag">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.PingTag">
            <summary>
            Ping
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.PongTag">
            <summary>
            Pong
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.Ping">
            <summary>
            Ping数据。Tag=0。
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.Pong">
            <summary>
            Pong数据。Tag=1。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.#ctor">
            <summary>
            初始化一个Ushort的TLVRequestInfo对象。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.#ctor(System.UInt16)">
            <summary>
            初始化一个TLVRequestInfo对象。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.#ctor(System.UInt16,System.Byte[])">
            <summary>
            初始化一个TLVRequestInfo对象。
            </summary>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataFrame.TouchSocket#Core#IFixedHeaderRequestInfo#BodyLength">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataFrame.Length">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataFrame.Tag">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataFrame.Value">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.AppendValue(System.Byte[],System.Int32,System.Int32)">
             <summary>
            追加Value。
             </summary>
             <param name="buffer"></param>
             <param name="offset"></param>
             <param name="length"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.AppendValue(System.Byte[])">
            <summary>
            追加Value。
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.Build(TouchSocket.Core.FixedHeaderType,TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
            <param name="lengthType"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.ClearValue">
            <summary>
            清除所有Value的值
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.TouchSocket#Core#IFixedHeaderRequestInfo#OnParsingBody(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.TouchSocket#Core#IFixedHeaderRequestInfo#OnParsingHeader(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.TLVDataFrameExtensions">
            <summary>
            TLVDataFrameExtensions
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrameExtensions.GetValueString(TouchSocket.Sockets.ITLVDataFrame)">
            <summary>
            获取utf-8编码的由<see cref="P:TouchSocket.Sockets.ITLVDataFrame.Value"/>转义的字符串。
            </summary>
            <param name="requestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrameExtensions.BuildAsBytes(TouchSocket.Sockets.ITLVDataFrame,TouchSocket.Core.FixedHeaderType)">
            <summary>
            构建为对应字节组
            </summary>
            <param name="requestInfo"></param>
            <param name="lengthType"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.TLVDataHandlingAdapter">
            <summary>
            TLVDataHandlingAdapter.
            <para>数据格式如下：
            <list type="bullet">
            <item>Tag，ushort类型，大端序</item>
            <item>Length，byte/ushort/int32类型，大端序</item>
            <item>Value，byte[]类型</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataHandlingAdapter.#ctor(TouchSocket.Core.FixedHeaderType,System.Func{TouchSocket.Sockets.TLVDataFrame,System.Boolean})">
            <summary>
            初始化一个TLV适配器。
            </summary>
            <para>数据格式如下：
            <list type="bullet">
            <item>Tag，ushort类型，大端序</item>
            <item>Length，byte/ushort/int32类型，大端序</item>
            <item>Value，byte[]类型</item>
            </list>
            </para>
            <param name="lengthType"></param>
            <param name="verifyFunc"></param>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataHandlingAdapter.CanSendRequestInfo">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataHandlingAdapter.HeaderLength">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataHandlingAdapter.LengthType">
            <summary>
            表述Value可容纳的最大字节数。
            <see cref="F:TouchSocket.Core.FixedHeaderType.Byte"/>为255字节
            <see cref="F:TouchSocket.Core.FixedHeaderType.Ushort"/>为65535字节
            <see cref="F:TouchSocket.Core.FixedHeaderType.Int"/>为2147483647字节。该值会再次由MaxPackageSize限制。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataHandlingAdapter.GetInstance">
            <inheritdoc/>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataHandlingAdapter.OnReceivingSuccess(TouchSocket.Sockets.TLVDataFrame)">
            <inheritdoc/>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataHandlingAdapter.PreviewSendAsync(TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TLVPlugin">
            <summary>
            TLV插件
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVPlugin.m_lengthType">
            <summary>
            TLV插件
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.#ctor">
            <summary>
            TLV插件
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.OnLoadingConfig(TouchSocket.Core.IConfigObject,TouchSocket.Core.ConfigEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.OnTcpReceived(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.SetLengthType(TouchSocket.Core.FixedHeaderType)">
            <summary>
            设置Value的长度类型。
            </summary>
            <param name="lengthType"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.SetVerifyFunc(System.Func{TouchSocket.Sockets.TLVDataFrame,System.Boolean})">
            <summary>
            设置校验方法。
            </summary>
            <param name="verifyFunc"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.ValueTLVDataFrame">
            <summary>
            以1个字节表示Length的TLV
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.#ctor(System.UInt16,System.Byte[])">
            <summary>
            初始化一个TLVRequestInfo对象。
            </summary>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="P:TouchSocket.Sockets.ValueTLVDataFrame.Length">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.ValueTLVDataFrame.Tag">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.ValueTLVDataFrame.Value">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.AppendValue(System.Byte[],System.Int32,System.Int32)">
             <summary>
            追加Value。
             </summary>
             <param name="buffer"></param>
             <param name="offset"></param>
             <param name="length"></param>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.AppendValue(System.Byte[])">
            <summary>
            追加Value。
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.Build(TouchSocket.Core.FixedHeaderType,TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
            <param name="lengthType"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.ClearValue">
            <summary>
            清除所有Value的值
            </summary>
        </member>
    </members>
</doc>
