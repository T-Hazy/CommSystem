<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocket.Dmtp</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.Dmtp.DmtpActor">
            <summary>
            提供Dmtp协议的最基础功能件
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.Closing">
            <summary>
            请求关闭
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.CreatedChannel">
            <summary>
            当创建通道时
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.FindDmtpActor">
            <summary>
            查找其他IDmtpActor
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.Handshaked">
            <summary>
            在完成握手连接时
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.Handshaking">
            <summary>
            握手
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.IdChanged">
            <summary>
            重设Id
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.Routing">
            <summary>
            当需要路由的时候
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.OutputSendAsync">
            <summary>
            异步发送数据接口
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.AllowRoute">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.Client">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.Id">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.Online">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.IsReliable">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.LastActiveTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.Logger">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpActor.WaitHandlePool">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.#ctor(System.Boolean,System.Boolean)">
            <summary>
            创建一个Dmtp协议的最基础功能件
            </summary>
            <param name="allowRoute">是否允许路由</param>
            <param name="isReliable">是不是基于可靠协议运行的</param>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.#ctor(System.Boolean)">
            <summary>
            创建一个可靠协议的Dmtp协议的最基础功能件
            </summary>
            <param name="allowRoute">指示是否允许路由</param>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.HandshakeAsync(System.String,System.String,System.Int32,TouchSocket.Core.Metadata,System.Threading.CancellationToken)">
            <summary>
            建立对点
            </summary>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:TouchSocket.Dmtp.TokenVerifyException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.OnClosed(System.Boolean,System.String)">
            <summary>
            当关闭后
            </summary>
            <param name="manual"></param>
            <param name="msg"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.OnHandshaking(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            正在握手连接
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.OnHandshaked(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            握手连接完成
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.OnIdChanged(TouchSocket.Sockets.IdChangedEventArgs)">
            <summary>
            当Id修改时
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.OnCreatedChannel(TouchSocket.Dmtp.CreateChannelEventArgs)">
            <summary>
            当完成创建通道时
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P0_Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P1_Handshake_Request">
            <summary>
            Handshake_Request
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P2_Handshake_Response">
            <summary>
            Handshake_Response
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P3_ResetId_Request">
            <summary>
            ResetId_Request
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P4_ResetId_Response">
            <summary>
            ResetId_Response
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P5_Ping_Request">
            <summary>
            Ping_Request
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P6_Ping_Response">
            <summary>
            Ping_Response
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P7_CreateChannel_Request">
            <summary>
            CreateChannel_Request
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P8_CreateChannel_Response">
            <summary>
            CreateChannel_Response
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpActor.P9_ChannelPackage">
            <summary>
            ChannelPackage
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.InputReceivedData(TouchSocket.Dmtp.DmtpMessage)">
            <summary>
            处理接收数据.
            <para>
            <list type="table">
            <item>0：Close</item>
            <item>1：Handshake_Request</item>
            <item>2：Handshake_Response</item>
            <item>3：ResetId_Request</item>
            <item>4：ResetId_Response</item>
            <item>5：Ping_Request</item>
            <item>6：Ping_Response</item>
            <item>7：CreateChannel_Request</item>
            <item>8：CreateChannel_Response</item>
            <item>9：ChannelPackage</item>
            </list>
            </para>
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.PingAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.PingAsync(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.ResetIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.SendPackageAsync(System.UInt16,TouchSocket.Core.IPackage)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.SendStringAsync(System.UInt16,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.TryFindDmtpActor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.TryRouteAsync(TouchSocket.Dmtp.PackageRouterEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.Dispose(System.Boolean)">
            <inheritdoc/>
            <param name="disposing"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.CloseAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.SendCloseAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.SendAsync(System.UInt16,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.ChannelExisted(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.CreateChannelAsync(TouchSocket.Core.Metadata)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.CreateChannelAsync(System.Int32,TouchSocket.Core.Metadata)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.CreateChannelAsync(System.String,System.Int32,TouchSocket.Core.Metadata)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.CreateChannelAsync(System.String,TouchSocket.Core.Metadata)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActor.TrySubscribeChannel(System.Int32,TouchSocket.Dmtp.IDmtpChannel@)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpActor">
            <summary>
            提供Dmtp协议的最基础功能件
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpActor.AllowRoute">
            <summary>
            是否允许支持路由数据。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpActor.Client">
            <summary>
            包含当前功能件的宿主通讯端。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpActor.IsReliable">
            <summary>
            是否基于可靠协议构建。例如：基于Tcp则为<see langword="true"/>，基于Udp则为<see langword="false"/>。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpActor.LastActiveTime">
            <summary>
            最后一次活动时间。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpActor.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpActor.SyncRoot">
            <summary>
             获取可用于同步对当前的访问对象进行锁同步。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpActor.WaitHandlePool">
            <summary>
            等待返回池
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.ChannelExisted(System.Int32)">
            <summary>
            判断指定Id的通道是否已经存在
            </summary>
            <param name="id">要判断的通道Id</param>
            <returns>如果通道存在返回true，否则返回false</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(TouchSocket.Core.Metadata)">
            <summary>
            在当前对点创建一个随机Id的通道
            </summary>
            <param name="metadata">可选的元数据参数，用于传递额外的信息</param>
            <returns>返回一个异步任务，该任务完成后将提供创建的IDmtpChannel对象</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.Int32,TouchSocket.Core.Metadata)">
            <summary>
            在当前对点创建一个指定Id的通道
            </summary>
            <param name="id">要创建的通道的唯一标识符</param>
            <param name="metadata">可选参数，提供有关通道的元数据信息</param>
            <returns>返回创建的通道对象，类型为IDmtpChannel</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.String,System.Int32,TouchSocket.Core.Metadata)">
            <summary>
            在指定路由点创建一个指定Id的通道
            </summary>
            <param name="targetId">目标路由点的标识符</param>
            <param name="id">要创建的通道的唯一标识符</param>
            <param name="metadata">有关通道的元数据，可选，默认为default(Metadata)</param>
            <returns>返回一个异步任务，该任务完成后将包含新创建的IDmtpChannel接口实例</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.String,TouchSocket.Core.Metadata)">
            <summary>
            在指定路由点创建一个随机Id的通道
            </summary>
            <param name="targetId">目标路由点的标识符</param>
            <param name="metadata">可选参数，用于传递附加信息</param>
            <returns>返回一个异步任务，该任务完成后将提供创建的IDmtpChannel对象</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.TrySubscribeChannel(System.Int32,TouchSocket.Dmtp.IDmtpChannel@)">
            <summary>
            尝试订阅已存在的通道。
            </summary>
            <param name="id">要订阅的通道的标识符。</param>
            <param name="channel">订阅的通道对象，成功时返回此参数。</param>
            <returns>如果订阅成功则返回true；如果通道不存在或发生错误则返回false。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.PingAsync(System.Int32)">
            <summary>
            向当前对点发送一个Ping报文，并且等待回应。
            </summary>
            <param name="millisecondsTimeout">超时时间，单位为毫秒，默认为5000毫秒。用于控制等待回应的最大时长。</param>
            <returns>一般的，当返回<see langword="true"/>时，则表明对点一定存在。而其他情况则返回<see langword="false"/>。该方法主要用于检测对端点的可达性。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.PingAsync(System.String,System.Int32)">
            <summary>
            向指定路由点发送一个Ping报文，并且等待回应。
            </summary>
            <param name="targetId">目标路由点的标识符。</param>
            <param name="millisecondsTimeout">等待回应的超时时间，单位为毫秒。默认为5000毫秒。</param>
            <returns>一般的，当返回<see langword="true"/>时，则表明对点一定存在。而其他情况则返回<see langword="false"/></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.SendAsync(System.UInt16,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据。
            </summary>
            <param name="protocol">指定通信协议的标识符。</param>
            <param name="memory">待发送的数据，以只读内存形式提供。</param>
            <remarks>
            此方法用于异步发送数据，通过指定协议标识符和数据内容，实现数据的异步传输。
            </remarks>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.SendPackageAsync(System.UInt16,TouchSocket.Core.IPackage)">
            <summary>
            异步发送小（64K）对象的包。接收方可以通过ReadPackage来接收。
            </summary>
            <param name="protocol">发送包时使用的协议标识。</param>
            <param name="package">要发送的包实例。</param>
            <returns>返回一个Task对象，表示异步操作的完成。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.SendStringAsync(System.UInt16,System.String)">
            <summary>
            异步发送以utf-8编码的字符串。
            </summary>
            <param name="protocol">指定的协议编号。</param>
            <param name="value">要发送的字符串内容。</param>
            <exception cref="T:System.ArgumentNullException">当<paramref name="value"/>为null时抛出异常。</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.TryFindDmtpActor(System.String)">
            <summary>
            尝试获取指定Id的DmtpActor。一般此方法仅在Service下有效。
            </summary>
            <param name="targetId">要查找的DmtpActor的唯一标识符。</param>
            <returns>返回一个包含DmtpActor的任务。如果找不到指定Id的DmtpActor，则返回null。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpActor.TryRouteAsync(TouchSocket.Dmtp.PackageRouterEventArgs)">
            <summary>
            尝试请求路由，触发路由相关插件。并在路由失败时向<see cref="P:TouchSocket.Core.MsgPermitEventArgs.Message"/>中传递消息。
            </summary>
            <param name="e">包含路由信息的事件参数</param>
            <returns>一个Task布尔值，指示路由尝试是否成功</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.SealedDmtpActor">
            <summary>
            密封的<see cref="T:TouchSocket.Dmtp.DmtpActor"/>
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.SealedDmtpActor.#ctor(System.Boolean,System.Boolean)">
            <summary>
            创建一个Dmtp协议的最基础功能件
            </summary>
            <param name="allowRoute">是否允许路由</param>
            <param name="isReliable">是不是基于可靠协议运行的</param>
        </member>
        <member name="M:TouchSocket.Dmtp.SealedDmtpActor.#ctor(System.Boolean)">
            <summary>
            创建一个可靠协议的Dmtp协议的最基础功能件
            </summary>
            <param name="allowRoute"></param>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpAdapter">
            <summary>
            DmtpAdapter 类，继承自 CustomFixedHeaderByteBlockDataHandlingAdapter&lt;DmtpMessage&gt;
            该类用于特定地处理 DmtpMessage，通过自定义的固定头部字节块数据处理适配器实现。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpAdapter.CanSendRequestInfo">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpAdapter.CanSplicingSend">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpAdapter.HeaderLength">
            <inheritdoc/>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpAdapter.MaxSplicing">
            <summary>
            最大拼接
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpAdapter.GetInstance">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpAdapter.OnReceivedSuccess(TouchSocket.Dmtp.DmtpMessage)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpAdapter.PreviewSendAsync(TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpMessage">
            <summary>
            Dmtp协议的消息。
            <para>|*2*|*2*|**4**|***************n***********|</para>
            <para>|dm|ProtocolFlags|Length|Data|</para>
            <para>|head|ushort|int32|bytes|</para>
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpMessage.#ctor">
            <summary>
            Dmtp协议的消息。
            <para>|*2*|*2*|**4**|***************n***********|</para>
            <para>|Head|ProtocolFlags|Length|Data|</para>
            <para>|dm|ushort|int32|bytes|</para>
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpMessage.Head">
            <summary>
            Head
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpMessage.#ctor(System.UInt16)">
            <summary>
            Dmtp协议的消息。
            <para>|*2*|**4**|***************n***********|</para>
            <para>|ProtocolFlags|Length|Data|</para>
            <para>|ushort|int32|bytes|</para>
            <param name="protocolFlags"></param>
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpMessage.BodyByteBlock">
            <summary>
            实际使用的Body数据。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpMessage.ProtocolFlags">
            <summary>
            协议标识
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpMessage.MaxLength">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpMessage.Build``1(``0@)">
            <summary>
            构建数据到<see cref="T:TouchSocket.Core.ByteBlock"/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpMessage.CreateFrom(System.ReadOnlySpan{System.Byte})">
            <summary>
            从当前内存中解析出一个<see cref="T:TouchSocket.Dmtp.DmtpMessage"/>
            <para>注意：
            <list type="number">
            <item>本解析只能解析一个完整消息。所以使用该方法时，请确认是否已经接收完成一个完整的<see cref="T:TouchSocket.Dmtp.DmtpMessage"/>包。</item>
            <item>本解析所得的<see cref="T:TouchSocket.Dmtp.DmtpMessage"/>消息会脱离生命周期管理，所以需要手动释放。</item>
            </list>
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpMessage.GetBodyString">
            <summary>
            将<see cref="P:TouchSocket.Dmtp.DmtpMessage.BodyByteBlock"/>的有效数据转换为utf-8的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpMessage.Dispose(System.Boolean)">
            <inheritdoc/>
            <param name="disposing"></param>
        </member>
        <member name="T:TouchSocket.Dmtp.ChannelStatus">
            <summary>
            通道状态
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.ChannelStatus.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.ChannelStatus.Moving">
            <summary>
            继续下移
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.ChannelStatus.Overtime">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.ChannelStatus.HoldOn">
            <summary>
            继续
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.ChannelStatus.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.ChannelStatus.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.ChannelStatus.Disposed">
            <summary>
            已释放
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpChannelExtension">
            <summary>
            DmtpChannelExtension
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpChannel">
            <summary>
            提供一个基于Dmtp协议的，可以独立读写的通道。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.MaxSpeed">
            <summary>
            通道传输速度限制
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.Available">
            <summary>
            具有可读数据的条目数
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.CanMoveNext">
            <summary>
            判断当前通道能否调用<see cref="M:TouchSocket.Dmtp.IDmtpChannel.MoveNext"/>
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.CanWrite">
            <summary>
            能否写入
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.Id">
            <summary>
            通道Id
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.LastOperationMes">
            <summary>
            最后一次操作时显示消息
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.TargetId">
            <summary>
            目的Id地址。仅当该通道由两个客户端打通时有效。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.Timeout">
            <summary>
            超时时间，默认1000*10ms。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.Using">
            <summary>
            是否被使用
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpChannel.LastOperationTime">
            <summary>
            获取上次操作的时间。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpChannel.CancelAsync(System.String)">
            <summary>
            异步取消操作
            </summary>
            <param name="operationMes">可选参数，用于提供取消操作的详细信息</param>
            <returns>返回一个Task对象，表示异步取消操作的完成</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpChannel.CompleteAsync(System.String)">
            <summary>
            异步完成操作
            </summary>
            <param name="operationMes">操作信息，可选参数，默认为null</param>
            <returns>返回一个Task对象，表示异步操作的完成</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpChannel.GetCurrent">
            <summary>
            获取当前的有效数据。在使用之后，请进行显式的<see cref="M:System.IDisposable.Dispose"/>调用。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpChannel.HoldOnAsync(System.String)">
            <summary>
            异步调用继续
            <para>调用该指令时，接收方会跳出接收，但是通道依然可用，所以接收方需要重新调用<see cref="M:TouchSocket.Dmtp.IDmtpChannel.MoveNext"/></para>
            </summary>
            <param name="operationMes"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpChannel.MoveNext">
            <summary>
            转向下个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpChannel.MoveNextAsync">
            <summary>
            转向下个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpChannel.WriteAsync(System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步写入通道
            </summary>
            <param name="memory">待写入的字节内存块</param>
            <returns>一个代表写入操作的Task对象</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.WaitCreateChannelPackage">
            <summary>
            WaitCreateChannelPackage
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.WaitCreateChannelPackage.ChannelId">
            <summary>
            通道Id
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.WaitCreateChannelPackage.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.WaitCreateChannelPackage.Random">
            <summary>
            随机Id
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpOption">
            <summary>
            针对Dmtp的配置项
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpOption.VerifyToken">
            <summary>
            连接令箭
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpOption.Id">
            <summary>
            连接时指定Id。
            <para>
            使用该功能时，仅在服务器的Handshaking之后生效。且如果id重复，则会连接失败。
            </para>
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpOption.Metadata">
            <summary>
            设置DmtpClient连接时的元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpOption.VerifyTimeout">
            <summary>
            验证连接超时时间。仅用于服务器。意为：当服务器收到基础链接，在指定的时间内如果没有收到握手信息，则直接视为无效链接，直接断开。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpUtility">
            <summary>
            DmtpUtility
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpUtility.Dmtp">
            <summary>
            Dmtp字符串
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpUtility.DmtpProtocol">
            <summary>
            Dmtp协议
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpUtility.IsDmtp(TouchSocket.Sockets.Protocol)">
            <summary>
            是否为Dmtp协议
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FlowOperator">
            <summary>
            关于具有流速的操作器。
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FlowOperator.completedLength">
            <summary>
            已完成长度
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FlowOperator.m_progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.CompletedLength">
            <summary>
            已完成长度
            </summary>
            <returns></returns>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.FlowGate">
            <summary>
            流量控制器。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.IsEnd">
            <summary>
            由<see cref="P:TouchSocket.Dmtp.FlowOperator.Result"/>的结果，判断是否已结束操作。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.Length">
            <summary>
            数据源的全部长度。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.MaxSpeed">
            <summary>
            最大传输速度。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.Result">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.Timeout">
            <summary>
            超时时间，默认10*1000ms。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FlowOperator.Token">
            <summary>
            可取消令箭
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FlowOperator.Speed">
            <summary>
            从上次获取到此次获得的速度
            </summary>
            <returns>返回本次计算得到的速度</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FlowOperator.ProtectedAddFlow(System.Int32)">
            <summary>
            添加流速(线程安全)
            </summary>
            <param name="flow">要添加的流速值</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FlowOperator.ProtectedAddFlowAsync(System.Int32)">
            <summary>
            异步安全地添加流速
            </summary>
            <param name="flow">要添加的流速值</param>
            <returns>一个等待完成的任务</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.WaitPing">
            <summary>
            WaitPing
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.WaitSetId">
            <summary>
            设置Id
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.WaitSetId.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sourceId"></param>
            <param name="targetId"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.WaitSetId.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.WaitSetId.OldId">
            <summary>
            旧Id
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.WaitSetId.NewId">
            <summary>
            新Id
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.WaitVerify">
            <summary>
            验证消息
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.WaitVerify.Token">
            <summary>
            令箭
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.WaitVerify.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.WaitVerify.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.HttpDmtpClient">
            <summary>
            定义了一个部分类HttpDmtpClient，它继承自HttpClientBase，并实现IHttpDmtpClient接口。
            这个类的目的是通过HTTP协议提供DMTP客户端功能，
            允许应用程序以一种标准化的方式发送和接收直接邮件。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.HttpDmtpClient.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.HttpDmtpClient.Id">
            <inheritdoc cref="P:TouchSocket.Sockets.IIdClient.Id"/>
        </member>
        <member name="P:TouchSocket.Dmtp.HttpDmtpClient.Online">
            <inheritdoc cref="P:TouchSocket.Sockets.IOnlineClient.Online"/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步使用基于Http升级的协议，连接Dmtp服务器
            </summary>
            <param name="millisecondsTimeout">连接超时时间，单位为毫秒</param>
            <param name="token">用于取消异步操作的取消令牌</param>
            <returns>异步操作任务</returns>
            <exception cref="T:System.Exception">在连接过程中遇到错误时抛出异常</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.CloseAsync(System.String)">
            <summary>
            发送<see cref="T:TouchSocket.Dmtp.IDmtpActor"/>关闭消息。
            </summary>
            <param name="msg">关闭消息的内容</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnTcpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.ResetIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnCreateChannel(TouchSocket.Dmtp.CreateChannelEventArgs)">
            <summary>
            当创建通道时触发的事件处理程序
            此方法用于在创建通道时执行插件或其他逻辑
            </summary>
            <param name="e">包含创建通道相关事件数据的参数对象</param>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnDmtpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            当Dmtp关闭以后。
            </summary>
            <param name="e">事件参数</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnDmtpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            当Dmtp即将被关闭时触发。
            <para>
            该触发条件有2种：
            <list type="number">
            <item>终端主动调用<see cref="M:TouchSocket.Dmtp.HttpDmtpClient.CloseAsync(System.String)"/>。</item>
            <item>终端收到<see cref="F:TouchSocket.Dmtp.DmtpActor.P0_Close"/>的请求。</item>
            </list>
            </para>
            </summary>
            <param name="e">提供了关闭事件的相关信息。</param>
            <returns>返回一个Task对象，表示异步操作的完成。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnHandshaked(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在完成握手连接时
            </summary>
            <param name="e">包含握手信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnHandshaking(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            即将握手连接时
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpClient.OnRouting(TouchSocket.Dmtp.PackageRouterEventArgs)">
            <summary>
            当需要转发路由包时
            </summary>
            <param name="e">包含路由包相关信息的事件参数</param>
        </member>
        <member name="T:TouchSocket.Dmtp.HttpDmtpService">
            <summary>
            HttpDmtpService 类，继承自<see cref="T:TouchSocket.Dmtp.HttpDmtpService`1"/>，实现<see cref="T:TouchSocket.Dmtp.IHttpDmtpService"/>接口。
            该类提供基于HTTP协议的Dmtp服务，用于处理特定类型的会话客户端。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpService.NewClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.HttpDmtpService`1">
            <summary>
            HttpDmtpService泛型类型
            </summary>
            <typeparam name="TClient">泛型参数，限定为<see cref="T:TouchSocket.Dmtp.HttpDmtpSessionClient"/>的派生类型</typeparam>
        </member>
        <member name="P:TouchSocket.Dmtp.HttpDmtpService`1.VerifyToken">
            <summary>
            连接令箭
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpService`1.ClientInitialized(`0)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpService`1.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.HttpDmtpSessionClient">
            <summary>
            抽象类 HttpDmtpSessionClient 继承自 HttpSessionClient，并实现 IHttpDmtpSessionClient 接口。
            该类提供了与 HTTP DMTP 协议相关的会话客户端功能。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.HttpDmtpSessionClient.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.HttpDmtpSessionClient.Online">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.HttpDmtpSessionClient.VerifyTimeout">
            <summary>
            验证超时时间
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.HttpDmtpSessionClient.VerifyToken">
            <summary>
            连接令箭
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.CloseAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.ResetIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnReceivedHttpRequest(TouchSocket.Http.HttpContext)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnTcpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnCreatedChannel(TouchSocket.Dmtp.CreateChannelEventArgs)">
            <summary>
            当创建通道时触发的事件处理程序
            </summary>
            <param name="e">包含通道创建信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnDmtpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            当Dmtp关闭以后。
            </summary>
            <param name="e">事件参数</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnDmtpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            当Dmtp即将被关闭时触发。
            <para>
            该触发条件有2种：
            <list type="number">
            <item>终端主动调用<see cref="M:TouchSocket.Dmtp.HttpDmtpSessionClient.CloseAsync(System.String)"/>。</item>
            <item>终端收到<see cref="F:TouchSocket.Dmtp.DmtpActor.P0_Close"/>的请求。</item>
            </list>
            </para>
            </summary>
            <param name="e">提供了关闭事件的相关信息。</param>
            <returns>返回一个Task对象，表示异步操作的完成。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnHandshaked(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在完成握手连接时
            </summary>
            <param name="e">包含握手信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnHandshaking(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在验证Token时
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.HttpDmtpSessionClient.OnRouting(TouchSocket.Dmtp.PackageRouterEventArgs)">
            <summary>
            当需要转发路由包时。
            </summary>
            <param name="e">包含路由包相关信息的事件参数。</param>
        </member>
        <member name="T:TouchSocket.Dmtp.IHttpDmtpClient">
            <summary>
            定义了一个HTTP DMTP客户端接口，该接口继承了DMTP客户端、HTTP会话和TCP连接客户端的基本行为。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.IHttpDmtpService`1">
            <summary>
            定义了一个泛型的HTTP DMTP服务接口，用于支持不同类型的HTTP DMTP客户端操作。
            </summary>
            <typeparam name="TClient">HTTP DMTP会话客户端类型，必须实现<see cref="T:TouchSocket.Dmtp.IHttpDmtpSessionClient"/>接口。</typeparam>
        </member>
        <member name="T:TouchSocket.Dmtp.IHttpDmtpService">
            <summary>
            定义了一个非泛型的HTTP DMTP服务接口，使用默认的HTTP DMTP会话客户端类型。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.IHttpDmtpServiceBase">
            <summary>
            定义了一个接口，用于合并HTTP服务和DMTP服务的基本功能。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.IHttpDmtpSessionClient">
            <summary>
            定义了一个接口，用于通过HTTP协议进行会话管理，并支持DMTP（动态消息传输协议）会话操作。
            这个接口扩展了现有的HTTP会话客户端和会话接口，增加了对DMTP协议的支持，使得会话管理更加灵活和高效。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.ITcpDmtpClient">
            <summary>
            基于Dmtp协议的Tcp客户端接口
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.ITcpDmtpService`1">
            <summary>
            定义了一个泛型接口<see cref="T:TouchSocket.Dmtp.ITcpDmtpService`1"/>，它继承自<see cref="T:TouchSocket.Dmtp.ITcpDmtpServiceBase"/>和<see cref="T:TouchSocket.Sockets.ITcpServiceBase`1"/>，
            其中 TClient 必须是 ITcpDmtpSessionClient 的实现。
            该接口用于提供基于 TCP 协议的 Dmtp 服务，支持泛型客户端类型 TClient。
            </summary>
            <typeparam name="TClient">客户端类型，必须实现 ITcpDmtpSessionClient 接口。</typeparam>
        </member>
        <member name="T:TouchSocket.Dmtp.ITcpDmtpService">
            <summary>
            定义了一个非泛型接口 ITcpDmtpService，它是 ITcpDmtpService 的泛型版本，
            其中 TClient 被固定为 TcpDmtpSessionClient 类型。
            该接口用于提供基于 TCP 协议的 Dmtp 服务，使用默认的 TcpDmtpSessionClient 作为客户端类型。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.ITcpDmtpServiceBase">
            <summary>
            定义了一个接口，整合了ITcpServiceBase和IDmtpService的功能。
            该接口用于提供基于TCP协议的DMTP服务支持。
            实现此接口的类应能够处理TCP服务和DMTP服务相关的操作。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.ITcpDmtpSessionClient">
            <summary>
            定义了一个接口，用于通过TCP协议实现的Dmtp会话客户端。
            它扩展了ITcpSession、ITcpListenableClient、IResolverObject、IDmtpActorObject和ISessionClient接口，
            提供了一种机制，使得客户端能够参与基于TCP的Dmtp会话，包括监听、解析和会话管理功能。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.TcpDmtpClient">
            <summary>
            TcpDmtpClient 类是部分类，实现了 ITcpDmtpClient 接口，用于提供基于 TCP 协议的客户端功能。
            继承自 TcpClientBase，复用基础的 TCP 客户端功能。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.#ctor">
            <summary>
            初始化TcpDmtpClient类的新实例
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.TcpDmtpClient.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.TcpDmtpClient.Id">
            <inheritdoc cref="P:TouchSocket.Sockets.IIdClient.Id"/>
        </member>
        <member name="P:TouchSocket.Dmtp.TcpDmtpClient.Online">
            <inheritdoc cref="P:TouchSocket.Sockets.IOnlineClient.Online"/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.CloseAsync(System.String)">
            <summary>
            发送<see cref="T:TouchSocket.Dmtp.IDmtpActor"/>关闭消息。
            </summary>
            <param name="msg">关闭消息的内容</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.ResetIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnDmtpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            当Dmtp关闭以后。
            </summary>
            <param name="e">事件参数</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnDmtpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            当Dmtp即将被关闭时触发。
            <para>
            该触发条件有2种：
            <list type="number">
            <item>终端主动调用<see cref="M:TouchSocket.Dmtp.TcpDmtpClient.CloseAsync(System.String)"/>。</item>
            <item>终端收到<see cref="F:TouchSocket.Dmtp.DmtpActor.P0_Close"/>的请求。</item>
            </list>
            </para>
            </summary>
            <param name="e">提供了关闭事件的相关信息。</param>
            <returns>返回一个Task对象，表示异步操作的完成。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnDmtpCreatedChannel(TouchSocket.Dmtp.CreateChannelEventArgs)">
            <summary>
            当创建通道时触发的事件处理程序
            </summary>
            <param name="e">包含通道创建信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnDmtpHandshaked(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在完成握手连接时
            </summary>
            <param name="e">包含握手信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnDmtpHandshaking(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            即将握手连接时
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnDmtpRouting(TouchSocket.Dmtp.PackageRouterEventArgs)">
            <summary>
            当需要转发路由包时
            </summary>
            <param name="e">包含路由包相关信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnTcpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpClient.OnTcpReceiving(TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.TcpDmtpService">
            <summary>
            TCP分布式消息传输服务类，继承自TcpDmtpService并实现ITcpDmtpService接口。
            该类提供了基于TCP协议的分布式消息传输服务功能。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpService.NewClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.TcpDmtpService`1">
            <summary>
            抽象类<see cref="T:TouchSocket.Dmtp.TcpDmtpService`1"/>;为基于TCP协议的Dmtp服务提供基础实现。
            它扩展了<see cref="T:TouchSocket.Sockets.TcpServiceBase`1"/>;，并实现了<see cref="T:TouchSocket.Dmtp.ITcpDmtpService`1"/>接口。
            TClient必须是<see cref="T:TouchSocket.Dmtp.TcpDmtpSessionClient"/>的派生类。
            </summary>
            <typeparam name="TClient">客户端会话类型，必须继承自<see cref="T:TouchSocket.Dmtp.TcpDmtpSessionClient"/>。</typeparam>
        </member>
        <member name="P:TouchSocket.Dmtp.TcpDmtpService`1.VerifyToken">
            <summary>
            连接令箭
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpService`1.ClientInitialized(`0)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpService`1.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.TcpDmtpSessionClient">
            <summary>
            抽象类TcpDmtpSessionClient定义了基于TCP的Dmtp会话客户端的基本行为。
            它扩展了TcpSessionClientBase类，并实现了ITcpDmtpSessionClient接口。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.#ctor">
            <summary>
            构造函数：初始化TcpDmtpSessionClient实例
            </summary>
            <remarks>
            设置协议属性为DmtpProtocol，这是应用程序通信使用的协议
            </remarks>
        </member>
        <member name="P:TouchSocket.Dmtp.TcpDmtpSessionClient.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.TcpDmtpSessionClient.Online">
            <inheritdoc cref="P:TouchSocket.Sockets.IOnlineClient.Online"/>
        </member>
        <member name="P:TouchSocket.Dmtp.TcpDmtpSessionClient.VerifyTimeout">
            <summary>
            验证超时时间,默认为3000ms
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.TcpDmtpSessionClient.VerifyToken">
            <summary>
            连接令箭
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnCreateChannel(TouchSocket.Dmtp.CreateChannelEventArgs)">
            <summary>
            当创建通道时触发的事件处理方法
            此方法主要用于在创建通道时，触发相关插件的调用
            </summary>
            <param name="e">包含通道创建信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnDmtpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            当Dmtp关闭以后。
            </summary>
            <param name="e">事件参数</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnDmtpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            当Dmtp即将被关闭时触发。
            <para>
            该触发条件有2种：
            <list type="number">
            <item>终端主动调用<see cref="M:TouchSocket.Dmtp.TcpDmtpSessionClient.CloseAsync(System.String)"/>。</item>
            <item>终端收到<see cref="F:TouchSocket.Dmtp.DmtpActor.P0_Close"/>的请求。</item>
            </list>
            </para>
            </summary>
            <param name="e">关闭事件参数，包含关闭的原因等信息。</param>
            <returns>返回一个异步任务，表示事件处理的完成。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnHandshaked(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在完成握手连接时
            </summary>
            <param name="e">包含握手信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnHandshaking(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在验证Token时
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnRouting(TouchSocket.Dmtp.PackageRouterEventArgs)">
            <summary>
            在需要转发路由包时。
            </summary>
            <param name="e">路由事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.CloseAsync(System.String)">
            <summary>
            发送<see cref="T:TouchSocket.Dmtp.IDmtpActor"/>关闭消息。
            </summary>
            <param name="msg">关闭消息的内容</param>
            <returns>异步任务</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.ResetIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnTcpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnTcpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnTcpConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.TcpDmtpSessionClient.OnTcpReceiving(TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.IUdpDmtp">
            <summary>
            定义了一个UdpDmtp接口，它继承自IServiceBase, IClient和IDmtpActorObject接口。
            该接口的目的是为UdpDmtp通信协议提供一个标准的服务接口，使得客户端和服务端可以在分布式系统中进行交互。
            它结合了服务的基本特性、客户端功能以及分布式对象的交互行为。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.IUdpDmtpClient">
            <summary>
            UdpDmtp终端接口
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IUdpDmtpClient.EndPoint">
            <summary>
            默认远程终结点。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IUdpDmtpClient.UdpSession">
            <summary>
            默认通信的udp终端。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.UdpDmtp">
            <summary>
            定义了UDP数据传输协议（DMTP）的实现类。
            该类继承自UdpSessionBase并实现了IUdpDmtp接口，提供了基于UDP协议的数据传输机制。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.UdpDmtp.#ctor">
            <summary>
            UdpDmtp类的构造函数。
            初始化一个定时器，用于定期清理不活跃的客户端连接。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.UdpDmtp.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.UdpDmtp.GetUdpDmtpClientAsync(System.Net.EndPoint)">
            <summary>
            异步地通过终结点获取 <see cref="T:TouchSocket.Dmtp.IUdpDmtpClient"/> 实例。
            </summary>
            <param name="endPoint">指定的终结点，用于创建 <see cref="T:TouchSocket.Dmtp.IUdpDmtpClient"/> 实例。</param>
            <returns>返回一个任务，该任务的结果是 <see cref="T:TouchSocket.Dmtp.IUdpDmtpClient"/> 实例。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.UdpDmtp.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.UdpDmtp.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.UdpDmtp.OnUdpReceived(TouchSocket.Sockets.UdpReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.UdpDmtpClient.#ctor(TouchSocket.Dmtp.UdpDmtp,System.Net.EndPoint,TouchSocket.Core.ILog)">
            <summary>
            UdpDmtp终端客户端
            </summary>
            <param name="udpSession"></param>
            <param name="endPoint"></param>
            <param name="logger"></param>
        </member>
        <member name="P:TouchSocket.Dmtp.UdpDmtpClient.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.UdpDmtpClient.EndPoint">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.UdpDmtpClient.UdpSession">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.UdpDmtpClient.ResetIdAsync(System.String)">
            <summary>
            不支持该操作
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">该客户端的Id为实际通信EndPoint值，所以不支持重置Id的操作。</exception>
        </member>
        <member name="T:TouchSocket.Dmtp.IWebSocketDmtpClient">
            <summary>
            定义WebSocketDmtp客户端接口，继承多个客户端和配置相关接口
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.WebSocketDmtpClient">
            <summary>
            WebSocketDmtpClient 类，继承自 SetupConfigObject 并实现了 IWebSocketDmtpClient 接口。
            该类负责 WebSocket 客户端的配置和管理，提供与 Dmtp 协议相关的功能。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.#ctor">
            <summary>
            初始化WebSocketDmtpClient类的新实例。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.WebSocketDmtpClient.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.WebSocketDmtpClient.Id">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.WebSocketDmtpClient.IsClient">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.WebSocketDmtpClient.LastReceivedTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.WebSocketDmtpClient.LastSentTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.WebSocketDmtpClient.Online">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.WebSocketDmtpClient.Protocol">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.WebSocketDmtpClient.RemoteIPHost">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.CloseAsync(System.String)">
            <summary>
            发送<see cref="T:TouchSocket.Dmtp.IDmtpActor"/>关闭消息。
            </summary>
            <param name="msg">关闭消息的内容</param>
            <returns>异步操作的任务</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.ResetIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.OnDmtpClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            已断开连接。
            </summary>
            <param name="e">包含断开连接信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.OnDmtpClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            当Dmtp即将被关闭时触发。
            <para>
            该触发条件有2种：
            <list type="number">
            <item>终端主动调用<see cref="M:TouchSocket.Dmtp.WebSocketDmtpClient.CloseAsync(System.String)"/>。</item>
            <item>终端收到<see cref="F:TouchSocket.Dmtp.DmtpActor.P0_Close"/>的请求。</item>
            </list>
            </para>
            </summary>
            <param name="e">提供了关闭事件的相关信息。</param>
            <returns>返回一个Task对象，表示异步操作的完成。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.OnCreateChannel(TouchSocket.Dmtp.CreateChannelEventArgs)">
            <summary>
            当创建通道时触发的事件处理程序
            </summary>
            <param name="e">包含通道创建信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.OnHandshaked(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在完成握手连接时
            </summary>
            <param name="e">包含握手信息的事件参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.OnHandshaking(TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            即将握手连接时
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:TouchSocket.Dmtp.WebSocketDmtpClient.OnRouting(TouchSocket.Dmtp.PackageRouterEventArgs)">
            <summary>
            当需要转发路由包时
            </summary>
            <param name="e">包含路由包相关信息的事件参数</param>
        </member>
        <member name="T:TouchSocket.Dmtp.RouteType">
            <summary>
            路由类型
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.RouteType.#ctor(System.String)">
            <summary>
            路由类型的构造函数
            </summary>
            <param name="value">路由类型的字符串表示</param>
            <exception cref="T:System.ArgumentException">当value为null或空时抛出</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.RouteType.op_Equality(TouchSocket.Dmtp.RouteType,TouchSocket.Dmtp.RouteType)">
            <summary>
            判断两个RouteType对象是否相等
            </summary>
            <param name="a">第一个RouteType对象</param>
            <param name="b">第二个RouteType对象</param>
            <returns>如果两个对象相等返回true，否则返回false</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.RouteType.op_Inequality(TouchSocket.Dmtp.RouteType,TouchSocket.Dmtp.RouteType)">
            <summary>
            判断两个RouteType对象是否不相等
            </summary>
            <param name="a">第一个RouteType对象</param>
            <param name="b">第二个RouteType对象</param>
            <returns>如果两个对象不相等返回true，否则返回false</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.RouteType.Equals(System.Object)">
            <summary>
            重写Equals方法，用于比较两个RouteType对象是否相等
            </summary>
            <param name="obj">要比较的对象</param>
            <returns>如果对象相等返回true，否则返回false</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.RouteType.GetHashCode">
            <summary>
            重写GetHashCode方法，返回m_value的哈希码
            </summary>
            <returns>m_value的哈希码</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.RouteType.ToString">
            <summary>
            重写ToString方法，返回m_value的值
            </summary>
            <returns>m_value的值</returns>
        </member>
        <member name="F:TouchSocket.Dmtp.RouteType.Ping">
            <summary>
            一个Ping探测路由包
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.RouteType.CreateChannel">
            <summary>
            创建通道路由包
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.RouteType.Rpc">
            <summary>
            Rpc调用的路由包
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.RouteType.PullFile">
            <summary>
            拉取文件的路由包
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.RouteType.PushFile">
            <summary>
            推送文件的路由包
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.CreateChannelEventArgs">
            <summary>
            创建通道事件类
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.CreateChannelEventArgs.#ctor(System.Int32,TouchSocket.Core.Metadata)">
            <summary>
            初始化创建通道事件类的实例
            </summary>
            <param name="channelId">通道的标识符</param>
            <param name="metadata">与通道相关的元数据</param>
        </member>
        <member name="P:TouchSocket.Dmtp.CreateChannelEventArgs.ChannelId">
            <summary>
            通道Id
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.CreateChannelEventArgs.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpMessageEventArgs">
            <summary>
            Dmtp消息事件参数类，继承自PluginEventArgs
            用于封装Dmtp消息相关的事件数据
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpMessageEventArgs.#ctor(TouchSocket.Dmtp.DmtpMessage)">
            <summary>
            初始化DmtpMessageEventArgs对象
            </summary>
            <param name="message">Dmtp消息实例</param>
            将传入的Dmtp消息对象存储在当前类的DmtpMessage属性中
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpMessageEventArgs.DmtpMessage">
            <summary>
            Dmtp消息
            </summary>
            <value>当前事件相关的Dmtp消息对象</value>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpVerifyEventArgs">
            <summary>
            连接验证
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpVerifyEventArgs.Token">
            <summary>
            令箭
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpVerifyEventArgs.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpVerifyEventArgs.Id">
            <summary>
            设定的初始化Id。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.PackageRouterEventArgs">
            <summary>
            包路由事件参数类，继承自MsgPermitEventArgs
            </summary>
            <remarks>
            该类用于封装路由类型和路由数据包，以便进行路由操作
            </remarks>
        </member>
        <member name="M:TouchSocket.Dmtp.PackageRouterEventArgs.#ctor(TouchSocket.Dmtp.RouteType,TouchSocket.Core.IReadonlyRouterPackage)">
            <summary>
            构造函数，初始化路由类型和路由数据包
            </summary>
            <param name="routerType">路由类型</param>
            <param name="package">路由数据包</param>
        </member>
        <member name="P:TouchSocket.Dmtp.PackageRouterEventArgs.RouterType">
            <summary>
            路由类型
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.PackageRouterEventArgs.Package">
            <summary>
            路由数据包。一般为不完全数据，仅包含基本的路由信息。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.TokenVerifyException">
            <summary>
            Token验证异常
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.TokenVerifyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.TokenVerifyException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:TouchSocket.Dmtp.TokenVerifyException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息</param>
            <param name="inner">内部异常</param>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpActorExtension">
            <summary>
            适用于<see cref="T:TouchSocket.Dmtp.IDmtpActor"/>的扩展。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.Ping(TouchSocket.Dmtp.IDmtpActorObject,System.Int32)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.PingAsync(System.Int32)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.Ping(TouchSocket.Dmtp.IDmtpActorObject,System.String,System.Int32)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.PingAsync(System.String,System.Int32)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.PingAsync(TouchSocket.Dmtp.IDmtpActorObject,System.Int32)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.PingAsync(System.Int32)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.PingAsync(TouchSocket.Dmtp.IDmtpActorObject,System.String,System.Int32)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.PingAsync(System.String,System.Int32)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.ChannelExisted(TouchSocket.Dmtp.IDmtpActorObject,System.Int32)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.ChannelExisted(System.Int32)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.CreateChannel(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Core.Metadata)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(TouchSocket.Core.Metadata)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.CreateChannel(TouchSocket.Dmtp.IDmtpActorObject,System.Int32,TouchSocket.Core.Metadata)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.Int32,TouchSocket.Core.Metadata)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.CreateChannel(TouchSocket.Dmtp.IDmtpActorObject,System.String,System.Int32,TouchSocket.Core.Metadata)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.String,System.Int32,TouchSocket.Core.Metadata)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.CreateChannel(TouchSocket.Dmtp.IDmtpActorObject,System.String,TouchSocket.Core.Metadata)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.String,TouchSocket.Core.Metadata)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.CreateChannelAsync(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Core.Metadata)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(TouchSocket.Core.Metadata)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.CreateChannelAsync(TouchSocket.Dmtp.IDmtpActorObject,System.Int32,TouchSocket.Core.Metadata)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.Int32,TouchSocket.Core.Metadata)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.CreateChannelAsync(TouchSocket.Dmtp.IDmtpActorObject,System.String,System.Int32,TouchSocket.Core.Metadata)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.String,System.Int32,TouchSocket.Core.Metadata)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.CreateChannelAsync(TouchSocket.Dmtp.IDmtpActorObject,System.String,TouchSocket.Core.Metadata)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.CreateChannelAsync(System.String,TouchSocket.Core.Metadata)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.TrySubscribeChannel(TouchSocket.Dmtp.IDmtpActorObject,System.Int32,TouchSocket.Dmtp.IDmtpChannel@)">
            <inheritdoc cref="M:TouchSocket.Dmtp.IDmtpActor.TrySubscribeChannel(System.Int32,TouchSocket.Dmtp.IDmtpChannel@)"/>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.TrySendAsync(TouchSocket.Dmtp.IDmtpActorObject,System.UInt16,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步尝试发送数据。
            </summary>
            <param name="client">发送数据的客户端对象。</param>
            <param name="protocol">发送数据时使用的协议标识。</param>
            <param name="memory">待发送的数据，存储在只读内存中。</param>
            <returns>返回一个布尔任务，表示数据是否发送成功。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.TrySendAsync(TouchSocket.Dmtp.IDmtpActorObject,System.UInt16)">
            <summary>
            异步尝试发送数据给指定的客户端。
            </summary>
            <param name="client">要发送数据的客户端对象。</param>
            <param name="protocol">要发送的数据协议类型。</param>
            <returns>返回一个布尔值，表示是否成功发送数据。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.SendAsync(TouchSocket.Dmtp.IDmtpActorObject,System.UInt16,TouchSocket.Core.IPackage,System.Int32)">
            <summary>
            异步发送数据包。
            此方法扩展了<see cref="T:TouchSocket.Dmtp.IDmtpActorObject"/>接口，使其具有发送数据包的能力。
            </summary>
            <param name="client">要发送数据包的客户端对象。</param>
            <param name="protocol">发送数据包所使用的协议。</param>
            <param name="package">要发送的数据包实例。</param>
            <param name="maxSize">数据包的预估最大大小，用于指导<see cref="T:TouchSocket.Core.ByteBlock"/>内存的分配。</param>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.SendAsync(TouchSocket.Dmtp.IDmtpActorObject,System.UInt16,TouchSocket.Core.IPackage)">
            <summary>
            异步发送估计大小小于64K的<see cref="T:TouchSocket.Core.IPackage"/>。
            此方法重载允许指定自定义最大传输单元大小。
            </summary>
            <param name="client">要发送包的客户端对象。</param>
            <param name="protocol">发送包所使用的协议。</param>
            <param name="package">要发送的包实例。</param>
            <returns>返回一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.TrySendAsync(TouchSocket.Dmtp.IDmtpActorObject,System.UInt16,TouchSocket.Core.IPackage,System.Int32)">
            <summary>
            异步尝试发送数据包。
            此方法通过指定的协议将数据包发送到客户端。
            它使用估计的最大数据包大小来优化内存申请。
            </summary>
            <param name="client">要发送数据包的客户端对象。</param>
            <param name="protocol">发送数据包所使用的协议标识符。</param>
            <param name="package">要发送的数据包实例。</param>
            <param name="maxSize">估计的数据包最大大小，用于优化内存分配。</param>
            <returns>返回一个布尔值，表示发送操作是否成功。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.TrySendAsync(TouchSocket.Dmtp.IDmtpActorObject,System.UInt16,TouchSocket.Core.IPackage)">
            <summary>
            异步尝试发送一个估计大小小于64K的<see cref="T:TouchSocket.Core.IPackage"/>。
            </summary>
            <param name="client">要发送包的客户端。</param>
            <param name="protocol">使用的协议。</param>
            <param name="package">要发送的包。</param>
            <returns>如果发送成功，则返回true；否则返回false。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.SendAsync(TouchSocket.Dmtp.IDmtpActorObject,System.UInt16,System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据
            </summary>
            <param name="client">客户端对象，实现IDmtpActorObject接口</param>
            <param name="protocol">协议标识符</param>
            <param name="memory">待发送的数据，以只读内存块形式提供</param>
            <returns>返回一个Task对象，标识异步操作</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.SendAsync(TouchSocket.Dmtp.IDmtpActorObject,System.UInt16)">
            <summary>
            异步发送空数据
            </summary>
            <param name="client">客户端对象，实现IDmtpActorObject接口</param>
            <param name="protocol">协议标识符</param>
            <returns>返回一个Task对象，标识异步操作</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpActorExtension.ToResultCode(TouchSocket.Dmtp.ChannelStatus)">
            <summary>
            将频道状态转换为结果代码
            </summary>
            <param name="channelStatus">当前频道状态</param>
            <returns>对应的ResultCode枚举值</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpConfigExtension">
            <summary>
            Dmtp配置扩展类
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.DmtpConfigExtension.DmtpOptionProperty">
            <summary>
            设置Dmtp相关配置。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpConfigExtension.SetDmtpOption(TouchSocket.Core.TouchSocketConfig,TouchSocket.Dmtp.DmtpOption)">
            <summary>
            设置Dmtp相关配置。
            </summary>
            <param name="config">待设置的配置对象</param>
            <param name="value">要设置的Dmtp配置值</param>
            <returns>返回更新后的配置对象</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpFeatureExtension">
            <summary>
            DmtpFeatureExtension
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpPluginManagerExtension">
            <summary>
            Dmtp插件管理器扩展类
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpPluginManagerExtension.UseDmtpHeartbeat(TouchSocket.Core.IPluginManager)">
            <summary>
            启用DmtpRpc心跳功能。该功能既可用于客户端，也可用于服务器端，但通常建议仅在客户端使用。
            <para>
            心跳默认每3秒发送一次。当心跳失败次数达到最大值（默认为3次）时，将判定为连接断开。
            </para>
            </summary>
            <param name="pluginManager">插件管理器，用于管理包括心跳插件在内的各种插件。</param>
            <returns>返回新创建并已添加到插件管理器的DmtpHeartbeatPlugin实例。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpPluginManagerExtension.UseDmtpReconnection``1(TouchSocket.Core.IPluginManager)">
            <summary>
            使用<see cref="T:TouchSocket.Dmtp.IDmtpClient"/>断线重连。
            </summary>
            <typeparam name="TClient">要重连的客户端类型，必须实现<see cref="T:TouchSocket.Dmtp.IDmtpClient"/>接口。</typeparam>
            <param name="pluginManager">插件管理器，用于添加重连插件。</param>
            <returns>返回创建的重连插件实例。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpPluginManagerExtension.UseWebSocketReconnection(TouchSocket.Core.IPluginManager)">
            <summary>
            使用<see cref="T:TouchSocket.Dmtp.IDmtpClient"/>断线重连。
            </summary>
            <param name="pluginManager">插件管理器，用于添加重连插件。</param>
            <returns>返回创建的重连插件实例。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor">
            <summary>
            能够基于Dmtp协议提供文件传输功能
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.#ctor(TouchSocket.Dmtp.IDmtpActor)">
            <summary>
            创建一个<see cref="T:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor"/>
            </summary>
            <param name="dmtpActor"></param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.OnFileTransferred">
            <summary>
            当文件传输结束之后。并不意味着完成传输，请通过<see cref="P:TouchSocket.Dmtp.FileTransfer.FileTransferredEventArgs.Result"/>属性值进行判断。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.OnFileTransferring">
            <summary>
            在文件传输即将进行时触发。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.InputReceivedData(TouchSocket.Dmtp.DmtpMessage)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.SetProtocolFlags(System.UInt16)">
            <summary>
            设置处理协议标识的起始标识。默认为30；
            </summary>
            <param name="start"></param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.FileController">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.MaxSmallFileLength">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.RootPath">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.FinishedFileResourceInfoAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceInfo,TouchSocket.Core.ResultCode,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PullFileResourceInfoAsync(System.String,System.String,TouchSocket.Core.Metadata,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PullFileSectionAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileSection,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PushFileResourceInfoAsync(System.String,System.String,TouchSocket.Dmtp.FileTransfer.FileResourceLocator,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PushFileSectionAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceLocator,TouchSocket.Dmtp.FileTransfer.FileSection,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.FinishedFileResourceInfoAsync(TouchSocket.Dmtp.FileTransfer.FileResourceInfo,TouchSocket.Core.ResultCode,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PullFileResourceInfoAsync(System.String,TouchSocket.Core.Metadata,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PullFileSectionAsync(TouchSocket.Dmtp.FileTransfer.FileSection,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PushFileResourceInfoAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceLocator,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PushFileSectionAsync(TouchSocket.Dmtp.FileTransfer.FileResourceLocator,TouchSocket.Dmtp.FileTransfer.FileSection,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.RequestFinishedFileResourceInfo(System.Object)">
            <summary>
            请求完成
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.RequestPullFileResourceInfo(System.Object)">
            <summary>
            请求拉取文件信息
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.RequestPullFileSection(System.Object)">
            <summary>
            请求拉取文件块
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.RequestPushFileResourceInfo(System.Object)">
            <summary>
            请求推送文件信息
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.RequestPushFileSection(System.Object)">
            <summary>
            请求推送文件块
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PullSmallFileAsync(System.String,System.String,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PullSmallFileAsync(System.String,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PushSmallFileAsync(System.String,System.String,System.IO.FileInfo,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor.PushSmallFileAsync(System.String,System.IO.FileInfo,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor">
            <summary>
            能够基于Dmtp协议提供文件传输功能的接口
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.RootPath">
            <summary>
            文件传输的根路径
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.MaxSmallFileLength">
            <summary>
            允许传输的小文件的最大长度。默认1024*1024个字节。
            <para>注意，当调整该值时，应该和对端保持一致。</para>
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.FileController">
            <summary>
            文件资源访问接口。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PullSmallFileAsync(System.String,System.String,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <summary>
            拉取小文件。默认设置1024*1024字节大小。
            </summary>
            <param name="targetId">目标客户端Id</param>
            <param name="path">请求路径</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PushSmallFileAsync(System.String,System.String,System.IO.FileInfo,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <summary>
            推送小文件。默认设置1024*1024字节大小。
            </summary>
            <param name="targetId"></param>
            <param name="savePath">保存路径</param>
            <param name="fileInfo">推送的文件信息</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PullSmallFileAsync(System.String,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <summary>
            拉取小文件。默认设置1024*1024字节大小。
            </summary>
            <param name="path">请求路径</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PushSmallFileAsync(System.String,System.IO.FileInfo,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <summary>
            推送小文件。默认设置1024*1024字节大小。
            </summary>
            <param name="savePath">保存路径</param>
            <param name="fileInfo">推送的文件信息</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.FinishedFileResourceInfoAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceInfo,TouchSocket.Core.ResultCode,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <summary>
            请求完成一个资源。
            <para>如果是Push，当正常返回时，则说明整个过程已完成。</para>
            <para>如果是Pull，当正常返回时，则说明服务器对于这个过程已完成，后续还需要再<see cref="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.TryFinished"/>。</para>
            </summary>
            <param name="targetId">目标客户端Id</param>
            <param name="fileResourceInfo">文件资源信息</param>
            <param name="code">状态代码</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PullFileResourceInfoAsync(System.String,System.String,TouchSocket.Core.Metadata,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            拉取文件信息。
            <para>注意：</para>
            <list type="number">
            <item>完成该操作后，必须在设定时间（60秒）内至少完成一次文件块访问，不然该信息将变得无效，</item>
            <item>每次该操作，都应该对应一次<see cref="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.FinishedFileResourceInfoAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceInfo,TouchSocket.Core.ResultCode,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)"/></item>
            </list>
            </summary>
            <param name="targetId">目标客户端Id</param>
            <param name="path">资源路径</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="fileSectionSize">文件分块尺寸。</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PullFileSectionAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileSection,System.Int32,System.Threading.CancellationToken)">
            <summary>
            拉取文件块。
            <para>注意：拉取文件块时，两个成功块之间的时间应该在设定时间（60秒）内完成。</para>
            </summary>
            <param name="targetId">目标客户端Id</param>
            <param name="fileSection">文件块</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PushFileResourceInfoAsync(System.String,System.String,TouchSocket.Dmtp.FileTransfer.FileResourceLocator,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <summary>
            推送文件信息。
            <para>注意：</para>
            <list type="number">
            <item>完成该操作后，必须在设定时间（60秒）内至少完成一次文件块访问，不然该信息将变得无效，</item>
            <item>每次该操作，都必须对应一次<see cref="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.FinishedFileResourceInfoAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceInfo,TouchSocket.Core.ResultCode,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)"/></item>
            </list>
            </summary>
            <param name="targetId">目标客户端Id</param>
            <param name="savePath">保存路径</param>
            <param name="fileResourceLocator">文件资源定位器</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PushFileSectionAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceLocator,TouchSocket.Dmtp.FileTransfer.FileSection,System.Int32,System.Threading.CancellationToken)">
            <summary>
            推送文件块。
            <para>注意：推送文件块时，两个成功块之间的时间应该在设定时间（60秒）内完成。</para>
            </summary>
            <param name="targetId">目标客户端Id</param>
            <param name="fileResourceLocator">文件资源定位器</param>
            <param name="fileSection">文件块</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.FinishedFileResourceInfoAsync(TouchSocket.Dmtp.FileTransfer.FileResourceInfo,TouchSocket.Core.ResultCode,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <summary>
            请求完成一个资源。
            <para>如果是Push，当正常返回时，则说明整个过程已完成。</para>
            <para>如果是Pull，当正常返回时，则说明服务器对于这个过程已完成，后续还需要再<see cref="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.TryFinished"/>。</para>
            </summary>
            <param name="fileResourceInfo">文件资源信息</param>
            <param name="code">状态代码</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PullFileResourceInfoAsync(System.String,TouchSocket.Core.Metadata,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            拉取文件信息。
            <para>注意：</para>
            <list type="number">
            <item>完成该操作后，必须在设定时间（60秒）内至少完成一次文件块访问，不然该信息将变得无效，</item>
            <item>每次该操作，都应该对应一次<see cref="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.FinishedFileResourceInfoAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceInfo,TouchSocket.Core.ResultCode,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)"/></item>
            </list>
            </summary>
            <param name="path">资源路径</param>
            <param name="metadata">元数据</param>
            <param name="fileSectionSize">文件分块尺寸</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PullFileSectionAsync(TouchSocket.Dmtp.FileTransfer.FileSection,System.Int32,System.Threading.CancellationToken)">
            <summary>
            拉取文件块。
            <para>注意：拉取文件块时，两个成功块之间的时间应该在设定时间（60秒）内完成。</para>
            </summary>
            <param name="fileSection">文件块</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PushFileResourceInfoAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceLocator,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)">
            <summary>
            推送文件信息。
            <para>注意：</para>
            <list type="number">
            <item>完成该操作后，必须在设定时间（60秒）内至少完成一次文件块访问，不然该信息将变得无效，</item>
            <item>每次该操作，都必须对应一次<see cref="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.FinishedFileResourceInfoAsync(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceInfo,TouchSocket.Core.ResultCode,TouchSocket.Core.Metadata,System.Int32,System.Threading.CancellationToken)"/></item>
            </list>
            </summary>
            <param name="savePath">保存路径</param>
            <param name="fileResourceLocator">文件资源定位器</param>
            <param name="metadata">元数据</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.PushFileSectionAsync(TouchSocket.Dmtp.FileTransfer.FileResourceLocator,TouchSocket.Dmtp.FileTransfer.FileSection,System.Int32,System.Threading.CancellationToken)">
            <summary>
            推送文件块。
            <para>注意：推送文件块时，两个成功块之间的时间应该在设定时间（60秒）内完成。</para>
            </summary>
            <param name="fileResourceLocator">文件资源定位器</param>
            <param name="fileSection">文件块</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="token">可取消令箭</param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.CancellationFileOperator">
            <summary>
            可取消文件传输操作器
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.CancellationFileOperator.Token">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.CancellationFileOperator.Cancel">
            <summary>
            取消传输
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.CancellationFileOperator.CancelAfter(System.TimeSpan)">
            <summary>
            在指定的时间之后取消传输。
            </summary>
            <param name="delay">延迟时间，在该时间之后取消传输</param>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileOperator">
            <summary>
            文件传输操作器。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileOperator.FileSectionSize">
            <summary>
            文件分块大小，默认512*1024字节。
            不要超过1024*1024字节。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileOperator.ResourceInfo">
            <summary>
            文件资源信息。此值不为空时复用，可能会尝试断点续传。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileOperator.ResourcePath">
            <summary>
            资源文件路径，
            可输入绝对路径，也可以输入相对路径。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileOperator.SavePath">
            <summary>
            存放路径，
            可输入绝对路径，也可以输入相对路径。
            但是必须包含文件名及扩展名。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileOperator.TryCount">
            <summary>
            失败重试次数。默认10。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileOperator.SetLength(System.Int64)">
            <summary>
            设置流长度
            </summary>
            <param name="len"></param>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileResourceInfo">
            <summary>
            文件资源信息
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.#ctor(System.IO.FileInfo,System.Int32)">
            <summary>
            初始化FileResourceInfo对象的新实例。
            </summary>
            <param name="fileInfo">要操作的文件信息。</param>
            <param name="fileSectionSize">文件的分段大小。</param>
            <exception cref="T:System.IO.FileNotFoundException">如果指定的文件不存在，则抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.#ctor(System.String,System.Int32)">
            <summary>
            初始化一个本地资源
            </summary>
            <param name="filePath">文件路径</param>
            <param name="fileSectionSize">文件分区大小</param>
            <exception cref="T:System.IO.FileNotFoundException">当指定路径的文件不存在时，抛出此异常</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.#ctor(TouchSocket.Dmtp.FileTransfer.RemoteFileInfo,System.Int32)">
            <summary>
            初始化一个远程资源
            </summary>
            <param name="fileInfo">远程文件信息对象，包含远程文件的详细信息</param>
            <param name="fileSectionSize">文件分段大小，用于指定处理文件时的分段策略</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.#ctor(TouchSocket.Core.IByteBlock@)">
            <summary>
            从内存初始化资源
            </summary>
            <param name="byteBlock">包含资源信息的字节块</param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.FileInfo">
            <summary>
            资源文件信息
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.FileSections">
            <summary>
            资源分块集合。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.FileSectionSize">
            <summary>
            文件分块尺寸。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.ResourceHandle">
            <summary>
            资源句柄唯一标识
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.GetContinuationIndex">
            <summary>
            获取尝试续传时的索引。
            </summary>
            <returns>返回续传索引，如果所有分段都已完成，则返回分段总数。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.GetFileSections(TouchSocket.Dmtp.FileTransfer.FileSectionStatus)">
            <summary>
            按文件块状态，获取块集合，如果没用找到任何元素，则返回空数组。
            </summary>
            <param name="fileSectionStatus">文件块的状态，用于筛选特定状态的文件块。</param>
            <returns>返回筛选后的文件块集合，如果没有找到任何元素，则返回空数组。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.Package``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.ResetResourceHandle(System.Int32)">
            <summary>
            重新设置资源标识。
            </summary>
            <param name="handle">要设置的资源标识。</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.Unpackage``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfo.Save``1(``0@)">
            <summary>
            将<see cref="T:TouchSocket.Dmtp.FileTransfer.FileResourceInfo"/>对象保存到内存。
            </summary>
            <param name="byteBlock">用于存储文件资源信息的字节块参数。</param>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileResourceInfoResult">
            <summary>
            文件资源信息结果类，继承自 ResultBase
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfoResult.#ctor(TouchSocket.Dmtp.FileTransfer.FileResourceInfo)">
            <summary>
            创建成功的资源结果
            </summary>
            <param name="fileResourceInfo">文件资源信息</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfoResult.#ctor(TouchSocket.Core.Result)">
            <summary>
            创建失败的资源结果
            </summary>
            <param name="result">结果状态</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceInfoResult.#ctor(System.String,TouchSocket.Core.ResultCode)">
            <summary>
            创建失败的资源结果
            </summary>
            <param name="message">错误消息</param>
            <param name="code">结果代码</param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceInfoResult.FileResourceInfo">
            <summary>
            文件资源信息
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileResourceLocator">
            <summary>
            文件资源定位器。
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.ExtensionName">
            <summary>
            缓存文件的扩展名。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.#ctor(TouchSocket.Dmtp.FileTransfer.FileResourceInfo)">
            <summary>
            根据资源信息，初始化一个仅读的定位器。
            </summary>
            <param name="fileResourceInfo">资源信息对象，包含文件资源的详细信息。</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.#ctor(TouchSocket.Dmtp.FileTransfer.FileResourceInfo,System.String,System.Boolean)">
            <summary>
            根据资源信息和保存目录，初始化一个可写入的定位器。
            </summary>
            <param name="fileResourceInfo">资源信息对象，包含文件资源的详细信息。</param>
            <param name="locatorPath">定位器路径，即文件资源的保存目录。</param>
            <param name="overwrite">是否覆盖现有文件，默认为 true。</param>
            <exception cref="T:System.ArgumentException">当 locatorPath 为 null 或空字符串时抛出。</exception>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.FileAccess">
            <summary>
            文件访问类型。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.FileResourceInfo">
            <summary>
            资源信息。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.FileStorage">
            <summary>
            文件访问存储器。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.LastActiveTime">
            <summary>
            最后活动时间
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.LocatorPath">
            <summary>
            定位器指向的实际文件的全名称。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.GetDefaultOrFailFileSection">
            <summary>
            获取一个默认状态，或者失败状态的文件片段
            </summary>
            <returns>返回默认状态或者失败状态的文件片段</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.GetUnfinishedFileSection">
            <summary>
            获取没有完成的文件块集合
            </summary>
            <returns>返回未完成的文件块集合</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.ReadBytes(System.Int64,System.Span{System.Byte})">
            <summary>
            从指定位置读取字节并存储到指定的字节跨度中。
            </summary>
            <param name="pos">要开始读取的文件位置。</param>
            <param name="span">用于存储读取的字节的跨度。</param>
            <returns>读取的字节数。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.ReadFileSection(TouchSocket.Dmtp.FileTransfer.FileSection)">
            <summary>
            按文件块读取。
            </summary>
            <param name="fileSection">要读取的文件块信息。</param>
            <returns>包含读取结果的FileSectionResult对象。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.ReloadFileResourceInfo(TouchSocket.Dmtp.FileTransfer.FileResourceInfo)">
            <summary>
            重新载入资源信息，并覆盖现有的分块的所有信息。要求资源路径必须一致。
            </summary>
            <param name="fileResourceInfo">要重新加载的文件资源信息对象</param>
            <exception cref="T:System.Exception">如果资源路径不一致，则抛出异常</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.TryFinished">
            <summary>
            尝试完成该资源。
            </summary>
            <returns>返回结果，成功或失败的原因。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.WriteFileSection(TouchSocket.Dmtp.FileTransfer.FileSection,System.ArraySegment{System.Byte})">
            <summary>
            写入文件块
            </summary>
            <param name="fileSection">要写入的文件块信息</param>
            <param name="value">要写入的字节数据</param>
            <returns>写入操作的结果</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.WriteFileSection(TouchSocket.Dmtp.FileTransfer.FileSectionResult)">
            <summary>
            写入文件块
            </summary>
            <param name="fileSectionResult">包含文件部分和值的结果对象</param>
            <returns>写入操作的结果</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceLocator.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileSection">
            <summary>
            文件片段句柄。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileSection.ResourceHandle">
            <summary>
            文件句柄唯一标识
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileSection.Status">
            <summary>
            分块状态。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileSection.Offset">
            <summary>
            片段的流偏移量。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileSection.Index">
            <summary>
            存于集合的索引。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileSection.Length">
            <summary>
            片段长度
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileSection.Package``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileSection.Unpackage``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileSection.Equals(TouchSocket.Dmtp.FileTransfer.FileSection)">
            <summary>
            判断基本信息是否一致。
            </summary>
            <param name="fileSection">待比较的文件段对象。</param>
            <returns>如果待比较的文件段对象的基本信息与当前对象一致，则返回true；否则返回false。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileSectionResult">
            <summary>
            文件分段上传结果类，继承自ResultBase，实现IDisposable接口
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileSectionResult.#ctor(TouchSocket.Core.ResultCode,TouchSocket.Core.ByteBlock,TouchSocket.Dmtp.FileTransfer.FileSection)">
            <summary>
            构造函数：初始化FileSectionResult对象，用于处理文件段结果。
            </summary>
            <param name="resultCode">结果代码，表示操作的执行情况。</param>
            <param name="value">字节块数据，表示处理的结果值。</param>
            <param name="fileSection">文件段信息，表示操作涉及的文件段。</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileSectionResult.#ctor(TouchSocket.Core.ResultCode,System.String,TouchSocket.Core.ByteBlock,TouchSocket.Dmtp.FileTransfer.FileSection)">
            <summary>
            构造函数：初始化FileSectionResult对象，用于处理文件段结果，包括错误信息。
            </summary>
            <param name="resultCode">结果代码，表示操作的执行情况。</param>
            <param name="message">错误消息，提供操作失败的详细信息。</param>
            <param name="value">字节块数据，表示处理的结果值。</param>
            <param name="fileSection">文件段信息，表示操作涉及的文件段。</param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileSectionResult.FileSection">
            <summary>
            文件块
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileSectionResult.Value">
            <summary>
            实际数据
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileSectionResult.Dispose">
            <summary>
            释放当前对象持有的资源。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileSectionStatus">
            <summary>
            文件片段状态
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.FileSectionStatus.Default">
            <summary>
            默认状态
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.FileSectionStatus.Transferring">
            <summary>
            正在传输状态
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.FileSectionStatus.Transferred">
            <summary>
            传输结束状态
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.FileSectionStatus.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.FileSectionStatus.Finished">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FinishedResult">
            <summary>
            完成的请求结果
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FinishedResult.#ctor(TouchSocket.Core.ResultCode,System.String,System.Int32)">
            <summary>
            构造函数：初始化失败请求的结果
            </summary>
            <param name="resultCode">结果代码，表示失败的类型</param>
            <param name="message">错误消息，提供失败的详细信息</param>
            <param name="resourceHandle">资源句柄，标识与失败请求相关的资源</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FinishedResult.#ctor(TouchSocket.Core.ResultCode,System.Int32)">
            <summary>
            完成的请求结果
            </summary>
            <param name="resultCode">结果代码，表示请求处理的结果</param>
            <param name="resourceHandle">资源句柄，用于标识处理的资源</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FinishedResult.#ctor(TouchSocket.Core.Result,System.Int32)">
            <summary>
            构造函数：处理失败的请求结果
            </summary>
            <param name="result">结果对象，包含错误信息</param>
            <param name="resourceHandle">资源句柄，用于后续对资源的操作或追踪</param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FinishedResult.ResourceHandle">
            <summary>
            资源句柄
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.PullSmallFileResult">
            <summary>
            表示拉取小文件操作的结果，继承自结果基类
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.PullSmallFileResult.#ctor(TouchSocket.Core.ResultCode,System.String)">
            <summary>
            初始化PullSmallFileResult对象。
            该构造函数用于创建PullSmallFileResult实例，根据结果代码和消息初始化对象。
            </summary>
            <param name="resultCode">结果代码，表示操作的执行结果。</param>
            <param name="message">伴随结果的详细信息或错误消息。</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.PullSmallFileResult.#ctor(System.Byte[])">
            <summary>
            初始化PullSmallFileResult对象。
            该构造函数用于创建一个表示文件拉取结果的实例，特别针对小型文件。
            </summary>
            <param name="bytes">byte数组，包含被拉取文件的内容。</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.PullSmallFileResult.#ctor(TouchSocket.Core.ResultCode)">
            <summary>
            初始化PullSmallFileResult对象。
            此构造函数用于为PullSmallFileResult对象设置初始的状态码。
            </summary>
            <param name="resultCode">结果码，用于指示文件拉取操作的结果。</param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.PullSmallFileResult.Value">
            <summary>
            实际的文件数据
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.PullSmallFileResult.Save(System.String,System.Boolean)">
            <summary>
            将拉取的数据保存为文件。
            </summary>
            <param name="path">要保存文件的路径。</param>
            <param name="overwrite">是否覆盖同名文件，默认为true。</param>
            <returns>返回保存结果。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.RemoteFileInfo">
            <summary>
            表示远程文件系统中文件的信息。
            继承自RemoteFileSystemInfo类，提供了关于远程文件或文件夹的详细信息。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.RemoteFileInfo.#ctor">
            <summary>
            初始化一个RemoteFileInfo
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.RemoteFileInfo.#ctor(System.IO.FileInfo)">
            <summary>
            从FileInfo初始化一个RemoteFileInfo
            </summary>
            <param name="fileInfo">用于初始化RemoteFileInfo的FileInfo对象</param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileInfo.Length">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileInfo.MD5">
            <summary>
            文件MD5
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.RemoteFileInfo.Package``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.RemoteFileInfo.Unpackage``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.RemoteFileInfoResult">
            <summary>
            远程访问结果
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.RemoteFileInfoResult.#ctor(TouchSocket.Dmtp.FileTransfer.RemoteFileInfo,TouchSocket.Core.ResultCode,System.String)">
            <summary>
            构造函数：初始化远程访问结果对象
            </summary>
            <param name="fileInfo">远程文件信息</param>
            <param name="resultCode">操作结果代码</param>
            <param name="message">结果描述信息</param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileInfoResult.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileInfoResult.ResultCode">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileInfoResult.Message">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileInfoResult.IsSuccess">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo">
            <summary>
            远程文件系统信息
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo.Attributes">
            <summary>
            当前文件或目录的特性
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo.CreationTime">
            <summary>
            当前文件或目录的创建时间
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo.FullName">
            <summary>
            目录或文件的完整目录。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo.LastAccessTime">
            <summary>
            上次访问当前文件或目录的时间
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo.LastWriteTime">
            <summary>
            上次写入当前文件或目录的时间
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo.Name">
            <summary>
            目录或文件的名称。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo.Package``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.RemoteFileSystemInfo.Unpackage``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature">
            <summary>
            能够基于Dmtp协议，提供文件传输的能力
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.#ctor(TouchSocket.Core.IResolver)">
            <summary>
            能够基于Dmtp协议，提供文件传输的能力
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.Loaded(TouchSocket.Core.IPluginManager)">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.MaxSmallFileLength">
            <inheritdoc cref="P:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.MaxSmallFileLength"/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.ReserveProtocolSize">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.RootPath">
            <inheritdoc cref="P:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.RootPath"/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.StartProtocol">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.OnDmtpHandshaking(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.OnDmtpReceived(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.DmtpMessageEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.SetMaxSmallFileLength(System.Int32)">
            <inheritdoc cref="P:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.MaxSmallFileLength"/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.SetProtocolFlags(System.UInt16)">
            <summary>
            设置<see cref="T:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature"/>的起始协议。
            <para>
            默认起始为：30，保留20个协议长度。
            </para>
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferFeature.SetRootPath(System.String)">
            <inheritdoc cref="P:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor.RootPath"/>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.TransferType">
            <summary>
            传输类型
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.TransferType.Push">
            <summary>
            推送
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.TransferType.Pull">
            <summary>
            拉取
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.TransferType.SmallPush">
            <summary>
            小文件推送
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.TransferType.SmallPull">
            <summary>
            小文件拉取
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileTransferredEventArgs">
            <summary>
            FileTransferedEventArgs
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileTransferredEventArgs.#ctor(TouchSocket.Dmtp.FileTransfer.TransferType,TouchSocket.Core.Metadata,TouchSocket.Dmtp.FileTransfer.RemoteFileInfo,TouchSocket.Core.Result)">
            <summary>
            FileTransferedEventArgs
            </summary>
            <param name="transferType"></param>
            <param name="result"></param>
            <param name="metadata"></param>
            <param name="fileInfo"></param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferredEventArgs.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileTransferringEventArgs">
            <summary>
            文件传输事件参数类，继承自 MsgPermitEventArgs
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileTransferringEventArgs.#ctor(TouchSocket.Dmtp.FileTransfer.TransferType,TouchSocket.Core.Metadata,TouchSocket.Dmtp.FileTransfer.RemoteFileInfo)">
            <summary>
            构造函数，用于初始化 FileTransferringEventArgs 对象。
            </summary>
            <param name="transferType">传输类型，表示文件传输的操作类型（例如上传或下载）。</param>
            <param name="metadata">文件的元数据信息。</param>
            <param name="fileInfo">远程文件的信息，包含了文件传输过程中所需的具体信息。</param>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferringEventArgs.SavePath">
            <summary>
            存放路径，
            可输入绝对路径，也可以输入相对路径。
            但是必须包含文件名及扩展名。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferringEventArgs.ResourcePath">
            <summary>
            请求文件路径，
            可输入绝对路径，也可以输入相对路径。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferringEventArgs.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferringEventArgs.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferringEventArgs.TransferType">
            <summary>
            传输类型
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension">
            <summary>
            定义一个静态类，用于扩展Dmtp文件传输的功能
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.UseDmtpFileTransfer(TouchSocket.Core.IPluginManager)">
            <summary>
            使用DmtpFileTransfer插件
            </summary>
            <param name="pluginManager">插件管理器实例，用于管理插件的加载和执行</param>
            <returns>返回DmtpFileTransferFeature实例，以便进一步操作或配置</returns>
        </member>
        <member name="F:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.DmtpFileTransferActorProperty">
            <summary>
            DmtpFileTransferActor
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.GetDmtpFileTransferActor(TouchSocket.Dmtp.IDmtpActor)">
            <summary>
            从<see cref="T:TouchSocket.Dmtp.DmtpActor"/>中获取<see cref="T:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor"/>
            </summary>
            <param name="dmtpActor">要从中获取文件传输演员的<see cref="T:TouchSocket.Dmtp.IDmtpActor"/>实例。</param>
            <returns>返回一个<see cref="T:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor"/>实例。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.SetDmtpFileTransferActor(TouchSocket.Dmtp.IDmtpActor,TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor)">
            <summary>
            向<see cref="T:TouchSocket.Dmtp.DmtpActor"/>中设置<see cref="T:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor"/>
            </summary>
            <param name="dmtpActor">要设置<see cref="T:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor"/>的<see cref="T:TouchSocket.Dmtp.IDmtpActor"/>对象</param>
            <param name="dmtpRpcActor">要设置的<see cref="T:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActor"/>实例</param>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.GetDmtpFileTransferActor(TouchSocket.Dmtp.IDmtpActorObject)">
            <summary>
            从<see cref="T:TouchSocket.Dmtp.IDmtpActorObject"/>中获取能实现文件传输的<see cref="T:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor"/>
            </summary>
            <param name="client">实现文件传输功能的对象</param>
            <returns>返回一个可进行文件传输的演员对象</returns>
            <exception cref="T:System.ArgumentNullException">如果内部演员对象为空，则抛出此异常</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.PullFile(TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor,System.String,TouchSocket.Dmtp.FileTransfer.FileOperator)">
            <summary>
            同步拉取文件操作的同步封装方法。
            </summary>
            <param name="actor">参与文件传输操作的角色。</param>
            <param name="targetId">目标文件的标识。</param>
            <param name="fileOperator">文件操作对象，用于处理文件传输过程中的具体操作。</param>
            <returns>返回文件拉取操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.PullFileAsync(TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor,System.String,TouchSocket.Dmtp.FileTransfer.FileOperator)">
            <summary>
            异步拉取文件
            </summary>
            <param name="actor">文件传输行为者</param>
            <param name="targetId">目标ID，标识需要拉取的文件</param>
            <param name="fileOperator">文件操作器，用于处理文件操作</param>
            <returns>返回一个异步任务，包含操作结果</returns>
            <remarks>
            该方法为文件传输行为者提供了一种异步拉取文件的方式，通过指定目标ID和文件操作器来完成文件的拉取操作。
            </remarks>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.PushFile(TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor,System.String,TouchSocket.Dmtp.FileTransfer.FileOperator)">
            <summary>
            异步推送文件到指定目标
            </summary>
            <param name="actor">执行文件推送操作的演员</param>
            <param name="targetId">目标标识符，标识文件推送的目的地</param>
            <param name="fileOperator">文件操作对象，包含待推送的文件信息和操作方法</param>
            <returns>返回文件推送操作的结果</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.PushFileAsync(TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor,System.String,TouchSocket.Dmtp.FileTransfer.FileOperator)">
            <summary>
            异步推送文件到指定目标。
            </summary>
            <param name="actor">参与文件传输的行为者。</param>
            <param name="targetId">目标设备的唯一标识符。</param>
            <param name="fileOperator">用于操作文件的对象。</param>
            <returns>返回一个异步任务，该任务完成后会提供推送操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.PullFile(TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor,TouchSocket.Dmtp.FileTransfer.FileOperator)">
            <summary>
            从远程服务器拉取文件。
            </summary>
            <param name="actor">提供文件传输功能的actor。</param>
            <param name="fileOperator">用于处理文件的文件操作器。</param>
            <returns>返回一个<see cref="T:TouchSocket.Core.Result"/>类型的值，包含操作的结果信息。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.PullFileAsync(TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor,TouchSocket.Dmtp.FileTransfer.FileOperator)">
            <summary>
            异步拉取文件
            </summary>
            <param name="actor">文件传输行为者</param>
            <param name="fileOperator">文件操作对象，用于处理文件操作</param>
            <returns>返回一个异步任务，任务完成后返回操作结果</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.PushFile(TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor,TouchSocket.Dmtp.FileTransfer.FileOperator)">
            <summary>
            扩展方法，用于推送文件。
            </summary>
            <param name="actor">实现文件传输操作的演员。</param>
            <param name="fileOperator">文件操作对象，用于指定文件操作。</param>
            <returns>返回文件推送操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.DmtpFileTransferActorExtension.PushFileAsync(TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferActor,TouchSocket.Dmtp.FileTransfer.FileOperator)">
            <summary>
            异步推送文件方法
            </summary>
            <param name="actor">文件传输行为者</param>
            <param name="fileOperator">文件操作器，用于处理文件操作</param>
            <returns>返回一个异步任务，该任务表示文件推送操作的结果</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.TransferTypeExtension">
            <summary>
            提供有关传输类型是否为拉取类型的扩展方法。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.TransferTypeExtension.IsPull(TouchSocket.Dmtp.FileTransfer.TransferType)">
            <summary>
            表示当前传输类型是否属于<see cref="F:TouchSocket.Dmtp.FileTransfer.TransferType.Pull"/>、<see cref="F:TouchSocket.Dmtp.FileTransfer.TransferType.SmallPull"/>其中的一种。
            </summary>
            <param name="transferType">要检查的传输类型。</param>
            <returns>如果传输类型是<see cref="F:TouchSocket.Dmtp.FileTransfer.TransferType.Pull"/>或<see cref="F:TouchSocket.Dmtp.FileTransfer.TransferType.SmallPull"/>，则返回true；否则返回false。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferringPlugin">
            <summary>
            定义了一个接口，用于处理文件传输过程中的插件操作。
            该接口继承自通用插件接口IPlugin，专门用于文件传输过程中的操作。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferringPlugin.OnDmtpFileTransferring(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.FileTransfer.FileTransferringEventArgs)">
            <summary>
            当文件传输发生时调用的方法。
            该方法允许插件在文件传输过程中执行自定义逻辑。
            </summary>
            <param name="client">发起文件传输的客户端对象。</param>
            <param name="e">包含文件传输详细信息的事件参数。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferredPlugin">
            <summary>
            定义了一个插件接口，用于处理文件传输完成时的通知。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IDmtpFileTransferredPlugin.OnDmtpFileTransferred(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.FileTransfer.FileTransferredEventArgs)">
            <summary>
            当文件通过Dmtp协议传输完成时触发的事件处理程序。
            </summary>
            <param name="client">发起文件传输的客户端对象。</param>
            <param name="e">包含文件传输相关信息的事件参数。</param>
            <returns>一个Task对象，标识异步操作的完成。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage">
            <summary>
            文件传输请求包
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.ContinuationIndex">
            <summary>
            续传索引
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.FileSectionSize">
            <summary>
            分块大小
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.ResourceHandle">
            <summary>
            资源句柄
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.IncludedRouter">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.PackageBody``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileTransferRouterPackage.UnpackageBody``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.FileResourceController">
            <summary>
            文件资源控制器。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.#ctor">
            <summary>
            文件资源控制器
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.Finalize">
            <summary>
            文件资源控制器析构函数
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceController.FileResourceStore">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.FileTransfer.FileResourceController.Timeout">
            <summary>
            超时时间。默认60秒。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.GetFullPath(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.LoadFileResourceLocatorForRead(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.LoadFileResourceLocatorForWrite(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.ReadAllBytes(System.IO.FileInfo,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.TryGetFileResourceLocator(System.Int32,TouchSocket.Dmtp.FileTransfer.FileResourceLocator@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.TryReleaseFileResourceLocator(System.Int32,TouchSocket.Dmtp.FileTransfer.FileResourceLocator@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.WriteAllBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.FileResourceController.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.FileTransfer.IFileResourceController">
            <summary>
            文件资源控制器。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IFileResourceController.GetFullPath(System.String,System.String)">
            <summary>
            获取全路径
            </summary>
            <param name="root">根目录路径</param>
            <param name="path">相对路径或部分路径</param>
            <returns>组合后的全路径</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IFileResourceController.LoadFileResourceLocatorForRead(System.String,System.Int32)">
            <summary>
            加载读取的文件资源定位器。
            </summary>
            <param name="path">文件路径。</param>
            <param name="fileSectionSize">文件分区大小。</param>
            <returns>返回加载的文件资源定位器。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IFileResourceController.LoadFileResourceLocatorForWrite(System.String,TouchSocket.Dmtp.FileTransfer.FileResourceInfo)">
            <summary>
            加载写入的文件资源定位器。
            </summary>
            <param name="savePath">保存路径，指示文件将被写入的位置。</param>
            <param name="fileResourceInfo">文件资源信息，包含文件的元数据和属性。</param>
            <returns>返回一个 <see cref="T:TouchSocket.Dmtp.FileTransfer.FileResourceLocator"/> 对象，该对象用于定位和访问文件资源。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IFileResourceController.TryReleaseFileResourceLocator(System.Int32,TouchSocket.Dmtp.FileTransfer.FileResourceLocator@)">
            <summary>
            释放文件资源定位器
            </summary>
            <param name="resourceHandle">资源句柄，标识需要释放的文件资源定位器</param>
            <param name="locator">输出参数，返回被释放的文件资源定位器</param>
            <returns>如果成功释放文件资源定位器，则返回true；否则返回false</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IFileResourceController.TryGetFileResourceLocator(System.Int32,TouchSocket.Dmtp.FileTransfer.FileResourceLocator@)">
            <summary>
            通过文件句柄，获取资源定位器。
            </summary>
            <param name="resourceHandle">文件句柄，用于标识特定的文件资源。</param>
            <param name="fileResourceLocator">输出参数，返回文件的资源定位器。</param>
            <returns>如果成功获取资源定位器，返回true；否则返回false。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IFileResourceController.ReadAllBytes(System.IO.FileInfo,System.Byte[])">
            <summary>
            读取文件的所有数据
            </summary>
            <param name="fileInfo">要读取的文件信息</param>
            <param name="buffer">用于存储文件内容的字节数组</param>
            <returns>读取到的字节数</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.FileTransfer.IFileResourceController.WriteAllBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入数据到文件
            </summary>
            <param name="path">文件路径</param>
            <param name="buffer">包含要写入的数据的字节数组</param>
            <param name="offset">字节数组中要开始写入数据的索引</param>
            <param name="length">要写入的字节数</param>
        </member>
        <member name="T:TouchSocket.Dmtp.Redis.DmtpRedisActor">
            <summary>
            DmtpRedisActor 类，实现了 IDmtpRedisActor 接口。
            该类通过 Redis 操作，为分布式消息传输协议（Dmtp）提供演员（Actor）模型的实现。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.#ctor(TouchSocket.Dmtp.IDmtpActor)">
            <summary>
            初始化DmtpRedisActor类的新实例。
            </summary>
            <param name="dmtpActor">一个IDmtpActor接口的实现，用于处理actor的具体逻辑。</param>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.DmtpRedisActor.Converter">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.DmtpRedisActor.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.DmtpRedisActor.ICache">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.DmtpRedisActor.Timeout">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.AddAsync``1(System.String,``0,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.AddCacheAsync(TouchSocket.Core.ICacheEntry{System.String,System.Byte[]})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.ClearCacheAsync">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.ContainsCacheAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.GetAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.GetCacheAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.InputReceivedData(TouchSocket.Dmtp.DmtpMessage)">
            <summary>
            处理收到的消息
            </summary>
            <param name="message">接收到的消息对象</param>
            <returns>返回一个异步任务，指示处理是否成功</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.RemoveCacheAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.SetAsync``1(System.String,``0,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.SetCacheAsync(TouchSocket.Core.ICacheEntry{System.String,System.Byte[]})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActor.SetProtocolFlags(System.UInt16)">
            <summary>
            设置处理协议标识的起始标识。
            </summary>
            <param name="start"></param>
        </member>
        <member name="T:TouchSocket.Dmtp.Redis.IDmtpRedisActor">
            <summary>
            具有远程键值存贮的操作端。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.IDmtpRedisActor.Converter">
            <summary>
            序列化转换器。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.IDmtpRedisActor.ICache">
            <summary>
            实际储存缓存。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.IDmtpRedisActor.Timeout">
            <summary>
            超时设定。默认30000ms
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.IDmtpRedisActor.AddAsync``1(System.String,``0,System.Int32)">
            <summary>
            添加一个缓存项到缓存中，如果键已经存在，则不进行任何操作。
            该方法用于异步地添加缓存项。
            </summary>
            <typeparam name="TValue">缓存值的类型。</typeparam>
            <param name="key">缓存项的键。</param>
            <param name="value">缓存项的值。</param>
            <param name="duration">缓存项的过期时间，单位为毫秒。默认为60000毫秒（1分钟）。</param>
            <returns>一个Task对象，表示异步操作的结果。结果为true表示添加成功，false表示失败（例如，键已经存在）。</returns>
            <exception cref="T:System.ArgumentNullException">如果键或值为null，则抛出该异常。</exception>
            <exception cref="T:System.TimeoutException">如果异步操作超时，则抛出该异常。</exception>
            <exception cref="T:System.Exception">如果发生其他异常，则抛出该异常。</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.IDmtpRedisActor.GetAsync``1(System.String)">
            <summary>
            异步获取缓存的键值对。
            </summary>
            <typeparam name="TValue">缓存值的类型</typeparam>
            <param name="key">缓存的键</param>
            <returns>缓存的值</returns>
            <exception cref="T:System.ArgumentNullException">如果 <paramref name="key"/> 为空或为 null，则抛出此异常。</exception>
            <exception cref="T:System.TimeoutException">如果获取操作超时，则抛出此异常。</exception>
            <exception cref="T:System.Exception">如果发生其他异常，则抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.IDmtpRedisActor.SetAsync``1(System.String,``0,System.Int32)">
            <summary>
            设置缓存值
            <inheritdoc cref="M:TouchSocket.Core.ICache`2.SetCache(TouchSocket.Core.ICacheEntry{`0,`1})"/>
            </summary>
            <typeparam name="TValue">缓存值的类型</typeparam>
            <param name="key">缓存的键</param>
            <param name="value">缓存的值</param>
            <param name="duration">缓存的持续时间</param>
            <returns>操作是否成功</returns>
            <exception cref="T:System.ArgumentNullException">当参数为空时抛出</exception>
            <exception cref="T:System.TimeoutException">当操作超时时抛出</exception>
            <exception cref="T:System.Exception">当发生其他异常时抛出</exception>
        </member>
        <member name="T:TouchSocket.Dmtp.Redis.DmtpRedisActorExtensions">
            <summary>
            定义一个静态类，用于扩展DmtpRedisActor的功能
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.Redis.DmtpRedisActorExtensions.DmtpRedisActorProperty">
            <summary>
            获取或设置RedisActor的注入键。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActorExtensions.GetDmtpRedisActor(TouchSocket.Dmtp.IDmtpActorObject)">
            <summary>
            获取<see cref="T:TouchSocket.Dmtp.Redis.IDmtpRedisActor"/>
            </summary>
            <param name="client">要获取<see cref="T:TouchSocket.Dmtp.Redis.IDmtpRedisActor"/>的<see cref="T:TouchSocket.Dmtp.IDmtpActorObject"/>实例</param>
            <returns><see cref="T:TouchSocket.Dmtp.Redis.IDmtpRedisActor"/>实例</returns>
            <exception cref="T:System.Exception">当<see cref="T:TouchSocket.Dmtp.Redis.IDmtpRedisActor"/>为null时抛出<see cref="T:System.ArgumentException"/></exception>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActorExtensions.GetDmtpRedisActor(TouchSocket.Dmtp.IDmtpActor)">
            <summary>
            从<see cref="T:TouchSocket.Dmtp.DmtpActor"/>中获得<see cref="T:TouchSocket.Dmtp.Redis.IDmtpRedisActor"/>
            </summary>
            <param name="dmtpActor">要从中获取<see cref="T:TouchSocket.Dmtp.Redis.IDmtpRedisActor"/>的<see cref="T:TouchSocket.Dmtp.DmtpActor"/>实例</param>
            <returns>返回从<see cref="T:TouchSocket.Dmtp.DmtpActor"/>中获取的<see cref="T:TouchSocket.Dmtp.Redis.IDmtpRedisActor"/>实例</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.DmtpRedisActorExtensions.UseDmtpRedis(TouchSocket.Core.IPluginManager)">
            <summary>
            使用Redis插件。仅：Dmtp端会生效。
            </summary>
            <param name="pluginManager">插件管理器，用于管理插件。</param>
            <returns>返回Redis功能插件。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.Redis.RedisFeature">
            <summary>
            RedisFeature
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.RedisFeature.#ctor">
            <summary>
            RedisFeature
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.RedisFeature.Converter">
            <summary>
            定义元素的序列化和反序列化。
            <para>注意：Byte[]类型不用考虑。内部单独会做处理。</para>
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.RedisFeature.ICache">
            <summary>
            实际储存缓存。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.RedisFeature.ReserveProtocolSize">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Redis.RedisFeature.StartProtocol">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.RedisFeature.OnDmtpHandshaking(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.RedisFeature.OnDmtpReceived(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.DmtpMessageEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.RedisFeature.SetCache(TouchSocket.Core.ICache{System.String,System.Byte[]})">
            <summary>
            设置实际储存缓存。默认使用<see cref="T:TouchSocket.Core.MemoryCache`2"/>
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.RedisFeature.ConfigureConverter(System.Action{TouchSocket.Core.BytesSerializerConverter})">
            <summary>
            定义元素的序列化和反序列化。
            <para>注意：Byte[]类型不用考虑。内部单独会做处理。</para>
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.Redis.RedisFeature.SetProtocolFlags(System.UInt16)">
            <summary>
            设置<see cref="T:TouchSocket.Dmtp.Redis.RedisFeature"/>的起始协议。
            <para>
            默认起始为：25，保留5个协议长度。
            </para>
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpRpcActor">
            <summary>
            DmtpRpcActor 类，继承自 ConcurrentDictionary，并实现 IDmtpRpcActor 接口。
            该类用于管理远程过程调用(RPC)的上下文，通过关联任务和超时逻辑来实现。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActor.#ctor(TouchSocket.Dmtp.IDmtpActor,TouchSocket.Rpc.IRpcServerProvider,TouchSocket.Core.IResolver)">
            <summary>
            初始化DmtpRpcActor类的实例。
            </summary>
            <param name="dmtpActor">IDmtpActor接口的实现，提供Dmtp通信能力。</param>
            <param name="rpcServerProvider">IRpcServerProvider接口的实现，用于提供RPC服务。</param>
            <param name="m_resolver">IResolver接口的实现，用于解析服务提供者。</param>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcActor.DmtpActor">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcActor.GetInvokeMethod">
            <summary>
            获取调用的函数
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcActor.SerializationSelector">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActor.InputReceivedData(TouchSocket.Dmtp.DmtpMessage)">
            <summary>
            处理收到的消息
            </summary>
            <param name="message">接收到的消息对象</param>
            <returns>返回一个异步任务，指示处理是否成功</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActor.SetProtocolFlags(System.UInt16)">
            <summary>
            设置处理协议标识的起始标识。
            </summary>
            <param name="start">起始标识值，将以此值为基准递增分配协议标识。</param>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActor.InvokeAsync(System.String,System.Type,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActor.InvokeAsync(System.String,System.String,System.Type,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor">
            <summary>
            能够基于Dmtp协议提供Rpc功能的接口
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.TargetDmtpRpcActor">
            <summary>
            TargetDmtpRpcActor
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.TargetDmtpRpcActor.#ctor(System.String,TouchSocket.Dmtp.Rpc.IDmtpRpcActor)">
            <summary>
            构造函数
            </summary>
            <param name="targetId">目标标识符</param>
            <param name="rpcActor">远程过程调用（RPC）行为接口</param>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpRpcAttribute">
            <summary>
            DmtpRpc方法标记属性类
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcAttribute.#ctor(System.Boolean)">
            <summary>
             适用于DmtpRpc的标记.
             <para>是否仅以函数名调用，当为True是，调用时仅需要传入方法名即可。</para>
            </summary>
            <param name="methodInvoke">指示是否仅通过方法名进行调用的布尔值。</param>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcAttribute.#ctor">
            <summary>
            适用于DmtpRpc的标记
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcAttribute.#ctor(System.String)">
            <summary>
            适用于DmtpRpc的标记.
            </summary>
            <param name="invokeKey">用于指定DmtpRpc调用的关键字</param>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpInvokeOption">
            <summary>
            Rpc调用设置
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpInvokeOption.#ctor">
            <summary>
            构造函数：初始化DmtpInvokeOption对象
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpInvokeOption.#ctor(System.Int32)">
            <summary>
            初始化 DmtpInvokeOption 类的新实例，并设置超时时间。
            </summary>
            <param name="millisecondsTimeout">执行操作的超时时间，以毫秒为单位。</param>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpInvokeOption.SerializationType">
            <summary>
            DmtpRpc序列化类型
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpInvokeOption.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension">
            <summary>
            定义了用于简化DMTP RPC Actor操作的扩展方法。
            </summary>
        </member>
        <member name="F:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension.DmtpRpcActorProperty">
            <summary>
            DmtpRpcActor
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension.CreateTargetDmtpRpcActor(TouchSocket.Dmtp.IDmtpActorObject,System.String)">
            <summary>
            新创建一个直接向目标地址请求的<see cref="T:TouchSocket.Rpc.IRpcClient"/>客户端。
            </summary>
            <param name="client">要为其创建目标DMTP RPC演员的客户端。</param>
            <param name="targetId">目标地址的标识符。</param>
            <returns>返回一个新的<see cref="T:TouchSocket.Rpc.IRpcClient"/>实例，该实例能够直接向指定目标地址发起请求。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension.GetDmtpRpcActor(TouchSocket.Dmtp.IDmtpActor)">
            <summary>
            从<see cref="T:TouchSocket.Dmtp.DmtpActor"/>中获取<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>
            </summary>
            <param name="dmtpActor">要从中获取<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>的<see cref="T:TouchSocket.Dmtp.DmtpActor"/></param>
            <returns>返回获取到的<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension.GetDmtpRpcActor(TouchSocket.Dmtp.IDmtpActorObject)">
            <summary>
            从<see cref="T:TouchSocket.Dmtp.IDmtpActorObject"/>中获取<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>，以实现Rpc调用功能。
            </summary>
            <param name="client">要获取<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>的<see cref="T:TouchSocket.Dmtp.IDmtpActorObject"/>对象。</param>
            <returns>返回<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>对象。</returns>
            <exception cref="T:System.ArgumentNullException">如果<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>对象为null，则抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension.GetDmtpRpcActor``1(TouchSocket.Dmtp.IDmtpActorObject)">
            <summary>
            从<see cref="T:TouchSocket.Dmtp.IDmtpActorObject"/>中获取继承实现<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>的功能件，以实现Rpc调用功能。
            </summary>
            <param name="client">一个实现了<see cref="T:TouchSocket.Dmtp.IDmtpActorObject"/>接口的对象，该对象中包含了需要获取的RpcActor。</param>
            <returns>返回一个继承自<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>接口的实例，类型为TDmtpRpcActor。</returns>
            <exception cref="T:System.ArgumentNullException">当无法从<paramref name="client"/>中获取到DmtpRpcActor时抛出。</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension.SetDmtpRpcActor(TouchSocket.Dmtp.IDmtpActor,TouchSocket.Dmtp.Rpc.IDmtpRpcActor)">
            <summary>
            向<see cref="T:TouchSocket.Dmtp.DmtpActor"/>中设置<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>
            </summary>
            <param name="dmtpActor">要设置的<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>所在的<see cref="T:TouchSocket.Dmtp.DmtpActor"/></param>
            <param name="dmtpRpcActor">要设置的<see cref="T:TouchSocket.Dmtp.Rpc.IDmtpRpcActor"/>实例</param>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension.UseDmtpRpc(TouchSocket.Core.IPluginManager)">
            <summary>
            使用DmtpRpc插件
            </summary>
            <param name="pluginManager">插件管理器实例</param>
            <returns>返回DmtpRpcFeature实例</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcActorExtension.UseDmtpRpc``1(TouchSocket.Core.IPluginManager)">
            <summary>
            使用自定义的DmtpRpc插件。
            </summary>
            <param name="pluginManager">插件管理器，用于管理插件。</param>
            <returns>返回配置的DmtpRpcFeature实例。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpRpcCallContext">
            <summary>
            DmtpRpcCallContext
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcCallContext.#ctor(System.Object,TouchSocket.Rpc.RpcMethod,TouchSocket.Dmtp.Rpc.IDmtpRpcRequestPackage,TouchSocket.Core.IResolver)">
            <summary>
            DmtpRpcCallContext
            </summary>
            <param name="caller"></param>
            <param name="rpcMethod"></param>
            <param name="dmtpRpcPackage"></param>
            <param name="resolver"></param>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcCallContext.DmtpRpcPackage">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcCallContext.Metadata">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcCallContext.SerializationType">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpRpcFeature">
            <summary>
            能够基于Dmtp协议，提供Rpc的功能
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.#ctor(TouchSocket.Core.IResolver)">
            <summary>
            能够基于Dmtp协议，提供Rpc的功能
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.ActionMap">
            <summary>
            方法映射表
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.CreateDmtpRpcActor">
            <summary>
            创建DmtpRpc实例
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.ReserveProtocolSize">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.SerializationSelector">
            <summary>
            序列化选择器
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.StartProtocol">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.SetCreateDmtpRpcActor(System.Func{TouchSocket.Dmtp.IDmtpActor,TouchSocket.Rpc.IRpcServerProvider,TouchSocket.Core.IResolver,TouchSocket.Dmtp.Rpc.DmtpRpcActor})">
            <summary>
            设置创建DmtpRpc实例
            </summary>
            <param name="createDmtpRpcActor"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.SetProtocolFlags(System.UInt16)">
            <summary>
            设置<see cref="T:TouchSocket.Dmtp.Rpc.DmtpRpcFeature"/>的起始协议。
            <para>
            默认起始为：20，保留5个协议长度。
            </para>
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.SetSerializationSelector(TouchSocket.Dmtp.Rpc.ISerializationSelector)">
            <summary>
            设置序列化选择器。默认使用<see cref="T:TouchSocket.Dmtp.Rpc.DefaultSerializationSelector"/>
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcFeature.Loaded(TouchSocket.Core.IPluginManager)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.RpcNoRegisterException">
            <summary>
            Rpc无注册异常
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.RpcNoRegisterException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.RpcNoRegisterException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.RpcNoRegisterException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.RpcSerializationException">
            <summary>
            序列化异常类
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.RpcSerializationException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.RpcSerializationException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.RpcSerializationException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.IDmtpRpcCallContext">
            <summary>
            IDmtpRpcCallContext
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.IDmtpRpcCallContext.DmtpRpcPackage">
            <summary>
            DmtpRpcPackage
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.IDmtpRpcCallContext.SerializationType">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.IDmtpRpcCallContext.Metadata">
            <summary>
            调用元数据
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpRpcRealityProxy`3">
            <summary>
            DmtpRpcRealityProxy
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TClient"></typeparam>
            <typeparam name="TAttribute"></typeparam>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpRpcRealityProxy`2">
            <summary>
            DmtpRpcRealityProxy
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DmtpRpcRealityProxy`1">
            <summary>
            DmtpRpcRealityProxy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.DefaultSerializationSelector">
            <summary>
            默认序列化选择器，实现了ISerializationSelector接口
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DefaultSerializationSelector.#ctor">
            <summary>
            默认序列化选择器的构造函数。
            </summary>
            <remarks>
            初始化默认的序列化选择器，并设置快速序列化上下文为默认上下文。
            </remarks>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DefaultSerializationSelector.FastSerializerContext">
            <summary>
            快速序列化上下文属性
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DefaultSerializationSelector.SerializationBinder">
            <summary>
            序列化绑定器属性
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DefaultSerializationSelector.DeserializeParameter``1(``0@,TouchSocket.Core.SerializationType,System.Type)">
            <summary>
            根据指定的序列化类型反序列化字节块中的数据。
            </summary>
            <param name="byteBlock">包含序列化数据的字节块。</param>
            <param name="serializationType">指定的序列化类型。</param>
            <param name="parameterType">预期反序列化出的对象类型。</param>
            <returns>反序列化后的对象。</returns>
            <exception cref="T:TouchSocket.Rpc.RpcException">抛出当未识别序列化类型时。</exception>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DefaultSerializationSelector.SerializeParameter``1(``0@,TouchSocket.Core.SerializationType,System.Object@)">
            <summary>
            序列化参数
            </summary>
            <param name="byteBlock">字节块引用，用于存储序列化后的数据</param>
            <param name="serializationType">序列化类型，决定了使用哪种方式序列化</param>
            <param name="parameter">待序列化的参数对象</param>
            <typeparam name="TByteBlock">字节块类型，必须实现IByteBlock接口</typeparam>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.ISerializationSelector">
            <summary>
            序列化选择器接口，用于定义如何根据不同的序列化类型来序列化和反序列化参数。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.ISerializationSelector.DeserializeParameter``1(``0@,TouchSocket.Core.SerializationType,System.Type)">
            <summary>
            反序列化字节块中的参数。
            </summary>
            <typeparam name="TByteBlock">字节块的类型，必须实现IByteBlock接口。</typeparam>
            <param name="byteBlock">包含序列化参数的字节块。</param>
            <param name="serializationType">指定的序列化类型。</param>
            <param name="parameterType">预期反序列化参数的类型。</param>
            <returns>反序列化后的参数对象。</returns>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.ISerializationSelector.SerializeParameter``1(``0@,TouchSocket.Core.SerializationType,System.Object@)">
            <summary>
            序列化参数并将其添加到字节块中。
            </summary>
            <typeparam name="TByteBlock">字节块的类型，必须实现IByteBlock接口。</typeparam>
            <param name="byteBlock">将要包含序列化参数的字节块。</param>
            <param name="serializationType">要使用的序列化类型。</param>
            <param name="parameter">要序列化的参数对象。</param>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.Feedback">
            <summary>
            反馈类型
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.InvokeKey">
            <summary>
            函数名
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.SerializationType">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.IncludedRouter">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.PackageBody``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.PackageRouter``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.UnpackageBody``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcRequestPackage.UnpackageRouter``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcResponsePackage.ReturnParameter">
            <summary>
            返回参数数据
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.DmtpRpcResponsePackage.IncludedRouter">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcResponsePackage.PackageBody``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcResponsePackage.PackageRouter``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcResponsePackage.UnpackageBody``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Dmtp.Rpc.DmtpRpcResponsePackage.UnpackageRouter``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.Rpc.IDmtpRpcRequestPackage">
            <summary>
            IDmtpRpcRequestPackage接口定义了远程过程调用请求包的结构和行为。
            它继承自IReadonlyRouterPackage，提供额外的属性和方法来支持远程过程调用机制。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.IDmtpRpcRequestPackage.SerializationType">
            <summary>
            获取序列化类型。
            序列化类型指示了用于序列化包内容的方法或格式。
            </summary>
            <value>序列化类型</value>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.IDmtpRpcRequestPackage.Metadata">
            <summary>
            获取元数据。
            元数据提供了关于包的附加信息，如发送者、接收者等。
            </summary>
            <value>元数据对象</value>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.IDmtpRpcRequestPackage.Feedback">
            <summary>
            获取反馈类型。
            反馈类型指示了调用方期望的反馈方式，如无反馈、单向反馈等。
            </summary>
            <value>反馈类型</value>
        </member>
        <member name="P:TouchSocket.Dmtp.Rpc.IDmtpRpcRequestPackage.InvokeKey">
            <summary>
            获取调用键。
            调用键是用于标识和跟踪特定远程过程调用的唯一标识符。
            </summary>
            <value>调用键字符串</value>
        </member>
        <member name="T:TouchSocket.Dmtp.IActor">
            <summary>
            定义了Actor接口，用于规范Actor的行为。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IActor.DmtpActor">
            <summary>
            包含当前Actor的父容器。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IActor.InputReceivedData(TouchSocket.Dmtp.DmtpMessage)">
            <summary>
            处理收到的消息。
            </summary>
            <param name="message">接收到的消息。</param>
            <returns>当满足本协议时，应当返回<see langword="true"/>，其他时候应该返回<see langword="false"/>.</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpActorObject">
            <summary>
            定义包含<see cref="T:TouchSocket.Dmtp.IDmtpActor"/>成员的接口对象。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpActorObject.DmtpActor">
            <summary>
            提供Dmtp协议的最基础功能件
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpClient">
            <summary>
            定义了IDmtpClient接口，它继承了多个与DMTP客户端行为相关的接口。
            这些接口共同定义了客户端在系统中的行为和职责，包括但不限于客户端的连接、配置、状态管理等。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpFeature">
            <summary>
            Dmtp功能性组件接口
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpFeature.StartProtocol">
            <summary>
            起始协议
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpFeature.ReserveProtocolSize">
            <summary>
            保留协议长度
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpService">
            <summary>
            IDmtpService
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.TcpDmtpSocketClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.ITcpDmtpSocketClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.HttpDmtpSocketClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.IHttpDmtpSocketClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpCreateChannelPlugin">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpHeartbeatPlugin">
            <summary>
            基于Dmtp的心跳插件。服务器和客户端均适用
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpHeartbeatPlugin.OnDmtpHandshaked(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpClosedPlugin">
            <summary>
            定义了一个插件接口，用于处理会话关闭后的操作
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpClosedPlugin.OnDmtpClosed(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            会话断开后触发
            </summary>
            <param name="client">触发事件的客户端对象</param>
            <param name="e">断开事件的参数</param>
            <returns>一个异步任务，表示操作的完成</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpClosingPlugin">
            <summary>
            定义即将断开连接时的插件行为（仅主动断开时有效）。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpClosingPlugin.OnDmtpClosing(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            在即将断开连接时执行（仅主动断开时有效）。
            </summary>
            <param name="client">正在断开连接的客户端对象。</param>
            <param name="e">断开连接事件的相关参数。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpCreatedChannelPlugin">
            <summary>
            定义了一个插件接口，用于在成功创建频道后执行特定操作。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpCreatedChannelPlugin.OnDmtpCreatedChannel(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.CreateChannelEventArgs)">
            <summary>
            在完成握手连接时被调用。
            此方法允许插件在DMTP通道创建后执行自定义逻辑。
            </summary>
            <param name="client">发起创建通道的客户端对象。</param>
            <param name="e">包含创建通道事件相关信息的参数。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpHandshakedPlugin">
            <summary>
            定义了一个插件接口，该插件在完成与Dmtp的握手连接后需要被调用。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpHandshakedPlugin.OnDmtpHandshaked(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在完成握手连接时被调用的方法。
            </summary>
            <param name="client">参与握手的Dmtp客户端对象。</param>
            <param name="e">握手验证事件参数。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpHandshakingPlugin">
            <summary>
            IDmtpHandshakingPlugin接口定义了插件在Dmtp握手过程中需要实现的方法。
            它继承自IPlugin接口。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpHandshakingPlugin.OnDmtpHandshaking(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.DmtpVerifyEventArgs)">
            <summary>
            在Dmtp建立握手连接之前执行的操作。
            此方法允许插件在握手过程中进行自定义的验证或处理。
            </summary>
            <param name="client">正在与之建立握手连接的客户端对象。</param>
            <param name="e">包含验证过程中需要的信息的事件参数。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpReceivedPlugin">
            <summary>
            定义了一个插件接口，该插件用于处理接收到的Dmtp消息。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpReceivedPlugin.OnDmtpReceived(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.DmtpMessageEventArgs)">
            <summary>
            当接收到DmtpMessage数据时触发。
            此方法允许插件处理通过Dmtp协议收到的消息。
            </summary>
            <param name="client">发送消息的客户端对象，实现了IDmtpActorObject接口。</param>
            <param name="e">包含收到消息的详细信息的事件参数。</param>
            <returns>一个Task对象，表明该方法是一个异步操作。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpRoutingPlugin">
            <summary>
            定义了IDmtpRoutingPlugin接口，它是IPlugin接口的子接口，用于处理DMTP路由插件的转发逻辑。
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.IDmtpRoutingPlugin.OnDmtpRouting(TouchSocket.Dmtp.IDmtpActorObject,TouchSocket.Dmtp.PackageRouterEventArgs)">
            <summary>
            当需要转发路由包时调用的方法。
            该方法详细描述了在路由包需要被转发时所采取的行动。
            </summary>
            <param name="client">一个IDmtpActorObject类型的参数，表示与当前会话相关的客户端信息。</param>
            <param name="e">一个PackageRouterEventArgs类型的参数，包含了需要被路由的包的相关信息。</param>
            <returns>返回一个Task对象，表明该方法是一个异步方法。</returns>
        </member>
        <member name="T:TouchSocket.Dmtp.IProtocolSecureService">
            <summary>
            协议安全服务，主要用于检测协议冲突的问题。
            </summary>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpRouteService">
            <summary>
            路由服务实现。
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.DmtpRouteService.FindDmtpActor">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Dmtp.DmtpRouteServiceExtension">
            <summary>
            DmtpRouteServiceExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpRouteServiceExtension.AddDmtpRouteService(TouchSocket.Core.IRegistrator)">
            <summary>
            添加Dmtp路由服务。
            </summary>
            <param name="registrator"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpRouteServiceExtension.AddDmtpRouteService(TouchSocket.Core.IRegistrator,System.Func{System.String,System.Threading.Tasks.Task{TouchSocket.Dmtp.IDmtpActor}})">
            <summary>
            添加基于设定委托的Dmtp路由服务。
            </summary>
            <param name="registrator"></param>
            <param name="func"></param>
        </member>
        <member name="M:TouchSocket.Dmtp.DmtpRouteServiceExtension.AddDmtpRouteService(TouchSocket.Core.IRegistrator,System.Func{System.String,TouchSocket.Dmtp.IDmtpActor})">
            <summary>
            添加基于设定委托的Dmtp路由服务。
            </summary>
            <param name="registrator"></param>
            <param name="action"></param>
        </member>
        <member name="T:TouchSocket.Dmtp.IDmtpRouteService">
            <summary>
            用于路由的服务接口
            </summary>
        </member>
        <member name="P:TouchSocket.Dmtp.IDmtpRouteService.FindDmtpActor">
            <summary>
            查找其他IDmtpActor
            </summary>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketDmtpResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.ChannelExisted">
            <summary>
              查找类似 Id为{0}的通道已存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.CreateWriteStreamFail">
            <summary>
              查找类似 从‘{0}’创建写入流失败，信息：{1}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.DirectoryExisted">
            <summary>
              查找类似 目录‘{0}’已存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.DirectoryNotExists">
            <summary>
              查找类似 目录‘{0}’不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.DmtpFileTransferActorNull">
            <summary>
              查找类似 DmtpFileTransferActor为空，可能需要启用DmtpFileTransfer插件。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.DmtpRpcActorArgumentNull">
            <summary>
              查找类似 DmtpRpcActor为空，可能需要启用DmtpRpc插件。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.FileExisted">
            <summary>
              查找类似 文件‘{0}’已存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.FileLengthTooLong">
            <summary>
              查找类似 文件长度太长。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.FileNotExists">
            <summary>
              查找类似 文件‘{0}’不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.GetEventArgsFail">
            <summary>
              查找类似 事件操作器异常。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.HasUnFinished">
            <summary>
              查找类似 还有{0}个资源没有完成。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.LengthErrorWhenRead">
            <summary>
              查找类似 读取文件长度错误。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.RedisActorNull">
            <summary>
              查找类似 RedisActor为空，可能需要启用RedisActor插件。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.RemoteAccessActorNull">
            <summary>
              查找类似 RemoteAccessActor为空，可能需要启用RemoteAccess插件。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.RemoteRefuse">
            <summary>
              查找类似 远程终端拒绝该操作，反馈信息：{0}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.RemoteStreamActorNull">
            <summary>
              查找类似 RemoteStreamActor为空，可能需要启用RemoteStream插件。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.ResourceHandleNotFind">
            <summary>
              查找类似 资源句柄{0}对应的资源没有找到，可能操作已超时。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.RoutingNotAllowed">
            <summary>
              查找类似 不允许路由该包，信息：{0}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.RpcInvokeException">
            <summary>
              查找类似 函数执行异常，详细信息：{0}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.RpcMethodDisable">
            <summary>
              查找类似 方法已被禁用。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.RpcMethodNotFind">
            <summary>
              查找类似 未找到该公共方法，或该方法未标记为Rpc。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.SetChannelFail">
            <summary>
              查找类似 通道设置失败。 的本地化字符串。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketDmtpResource.StreamBucketNull">
            <summary>
              查找类似 流容器为空。 的本地化字符串。
            </summary>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketDmtpStatus">
            <summary>
            TouchSocketDmtpStatus
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.UnknownError">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.Success">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.Overtime">
            <summary>
            操作超时
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.Canceled">
            <summary>
            用户主动取消操作。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.Exception">
             <summary>
            发生异常，信息：{0}。
             </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.RoutingNotAllowed">
            <summary>
            不允许路由该包，信息：{0}。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.RpcMethodNotFind">
            <summary>
            未找到该公共方法，或该方法未标记为Rpc
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.RpcMethodDisable">
            <summary>
            方法已被禁用
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.RpcInvokeException">
            <summary>
            函数执行异常，详细信息：{0}
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.GetEventArgsFail">
            <summary>
            事件操作器异常
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.SetChannelFail">
            <summary>
            通道设置失败。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.ChannelExisted">
            <summary>
            Id为{0}的通道已存在。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.RemoteRefuse">
            <summary>
            远程终端拒绝该操作，反馈信息：{0}。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.CreateWriteStreamFail">
            <summary>
            从‘{0}’创建写入流失败，信息：{1}。"
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.StreamNotFind">
             <summary>
            没有找到路径‘{0}’对应的流文件。
             </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.ClientNotFind">
            <summary>
            没有找到Id为{0}的客户端。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.StreamReferencing">
            <summary>
            路径‘{0}’对应的流文件，仍然被‘{1}’对象应用。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.LoadStreamFail">
            <summary>
            从‘{0}’路径加载流异常，信息：‘{1}’。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.DirectoryExisted">
            <summary>
            目录‘{0}’已存在。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.FileExisted">
            <summary>
            文件‘{0}’已存在。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.FileNotExists">
            <summary>
            文件‘{0}’不存在。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.DirectoryNotExists">
            <summary>
            目录‘{0}’不存在。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.EventExisted">
            <summary>
            名称为“{0}”的事件已存在
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.EventNotExist">
            <summary>
            名称为“{0}”的事件不存在
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.ResourceHandleNotFind">
            <summary>
            资源句柄{0}对应的资源没有找到，可能操作已超时。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.HasUnFinished">
            <summary>
            还有多个资源没有完成。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.FileLengthTooLong">
            <summary>
            文件长度太长。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.LengthErrorWhenRead">
            <summary>
            读取文件长度错误。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.NotFindAnyTargetId">
            <summary>
            没有找到任何可用的目标Id。
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketDmtpStatus.RoutingNotSupported">
            <summary>
            响应方不支持路由操作。
            </summary>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketDmtpStatusExtension">
            <summary>
            TouchSocketDmtpResourceExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Resources.TouchSocketDmtpStatusExtension.ToStatus(System.Byte)">
            <summary>
            转为状态字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Resources.TouchSocketDmtpStatusExtension.ToValue(TouchSocket.Resources.TouchSocketDmtpStatus)">
            <summary>
            转为数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
