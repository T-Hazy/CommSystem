<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocket.Hosting</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            ServiceCollectionExtensions
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.DynamicallyAccessed">
            <summary>
            DynamicallyAccessed
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSingletonSetupConfigObject``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加SingletonSetupConfigObject服务。
            </summary>
            <typeparam name="TObjectService"></typeparam>
            <typeparam name="TObjectImpService"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTransientSetupConfigObject``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加TransientSetupConfigObject服务。
            </summary>
            <typeparam name="TObjectService"></typeparam>
            <typeparam name="TObjectImpService"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddScopedSetupConfigObject``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加ScopedSetupConfigObject服务。
            </summary>
            <typeparam name="TObjectService"></typeparam>
            <typeparam name="TObjectImpService"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddServiceHostedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加Service类型的HostedService服务。这类服务必须实现<see cref="T:TouchSocket.Core.ISetupConfigObject"/>与<see cref="T:TouchSocket.Sockets.IServiceBase"/>
            </summary>
            <typeparam name="TObjectService"></typeparam>
            <typeparam name="TObjectImpService"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSetupConfigObjectHostedService``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加SetupConfigObjectHostedService服务。
            </summary>
            <typeparam name="THostService"></typeparam>
            <typeparam name="TObjectService"></typeparam>
            <typeparam name="TObjectImpService"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTcpService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加TcpService服务。
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TImpService"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTcpService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加TcpService服务。并使用<see cref="T:TouchSocket.Sockets.ITcpService"/>注册服务。
            </summary>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddUdpSession``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加UdpSession服务。
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TImpService"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddUdpSession(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加Udp服务。并使用<see cref="T:TouchSocket.Sockets.IUdpSession"/>注册服务。
            </summary>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSingletonTcpClient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加单例TcpClient服务。
            </summary>
            <typeparam name="TClient"></typeparam>
            <typeparam name="TImpClient"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSingletonTcpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加单例TcpClient服务。并使用<see cref="T:TouchSocket.Sockets.ITcpClient"/>注册服务。
            </summary>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTransientTcpClient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加瞬态TcpClient服务。
            </summary>
            <typeparam name="TClient"></typeparam>
            <typeparam name="TImpClient"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTransientTcpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加瞬态TcpClient服务。并使用<see cref="T:TouchSocket.Sockets.ITcpClient"/>注册服务。
            </summary>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddScopedTcpClient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加Scoped TcpClient服务。
            </summary>
            <typeparam name="TClient"></typeparam>
            <typeparam name="TImpClient"></typeparam>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddScopedTcpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TouchSocket.Core.TouchSocketConfig})">
            <summary>
            添加Scoped TcpClient服务。并使用<see cref="T:TouchSocket.Sockets.ITcpClient"/>注册服务。
            </summary>
            <param name="services"></param>
            <param name="actionConfig"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Hosting.SetupConfigObjectHostedService`1">
            <summary>
            SetupObjectHostedService
            </summary>
        </member>
        <member name="P:TouchSocket.Hosting.SetupConfigObjectHostedService`1.Config">
            <summary>
            Config配置
            </summary>
        </member>
        <member name="P:TouchSocket.Hosting.SetupConfigObjectHostedService`1.ConfigObject">
            <summary>
            实际对象。
            </summary>
        </member>
        <member name="P:TouchSocket.Hosting.SetupConfigObjectHostedService`1.Resolver">
            <summary>
            IResolver
            </summary>
        </member>
        <member name="M:TouchSocket.Hosting.SetupConfigObjectHostedService`1.OnSetResolver(TouchSocket.Core.IResolver)">
            <summary>
            在设置完成<see cref="T:TouchSocket.Core.IResolver"/>时调用。
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:TouchSocket.Hosting.SetupConfigObjectHostedService`1.StartAsync(System.Threading.CancellationToken)">
            <summary>
            启动Host。并且调用<see cref="M:TouchSocket.Core.ISetupConfigObject.SetupAsync(TouchSocket.Core.TouchSocketConfig)"/>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Hosting.SetupConfigObjectHostedService`1.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Core.AspNetCoreLoggerExtension">
            <summary>
            为 Registrator 提供扩展方法，使其能够注册 AspNetCoreLogger。
            </summary>
        </member>
        <member name="M:TouchSocket.Core.AspNetCoreLoggerExtension.AddAspNetCoreLogger(TouchSocket.Core.IRegistrator)">
            <summary>
            向 IRegistrator 实例中添加 AspNetCoreLogger。
            </summary>
            <param name="registrator">要扩展的 IRegistrator 实例。</param>
            <remarks>
            此方法通过注册 AspNetCoreLogger 实例为日志记录提供支持，该实例在应用程序中作为单例使用。
            </remarks>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketHostingResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketHostingResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketHostingResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:TouchSocket.Resources.TouchSocketHostingResource.HostServerStarted">
            <summary>
              查找类似 服务器已启动。 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
